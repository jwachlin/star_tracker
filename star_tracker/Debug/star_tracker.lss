
star_tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b68  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00004b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a0  20000070  00004bd8  00020070  2**2
                  ALLOC
  3 .stack        00002000  20000110  00004c78  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001635c  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fcb  00000000  00000000  0003644d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000183e  00000000  00000000  00038418  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000498  00000000  00000000  00039c56  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003e8  00000000  00000000  0003a0ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003644  00000000  00000000  0003a4d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00005078  00000000  00000000  0003db1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001324  00000000  00000000  00042b94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	10 21 00 20 41 17 00 00 39 18 00 00 39 18 00 00     .!. A...9...9...
	...
      2c:	39 18 00 00 00 00 00 00 00 00 00 00 39 18 00 00     9...........9...
      3c:	39 18 00 00 39 18 00 00 39 18 00 00 39 18 00 00     9...9...9...9...
      4c:	39 18 00 00 f9 04 00 00 39 18 00 00 39 18 00 00     9.......9...9...
      5c:	39 18 00 00 39 18 00 00 39 18 00 00 39 18 00 00     9...9...9...9...
      6c:	39 18 00 00 39 18 00 00 39 18 00 00 39 18 00 00     9...9...9...9...
      7c:	39 18 00 00 39 18 00 00 39 18 00 00 39 18 00 00     9...9...9...9...
      8c:	39 18 00 00 39 18 00 00 00 00 00 00 00 00 00 00     9...9...........
      9c:	39 18 00 00 39 18 00 00 39 18 00 00 39 18 00 00     9...9...9...9...
      ac:	39 18 00 00 00 00 00 00                             9.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00004b68 	.word	0x00004b68

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00004b68 	.word	0x00004b68
     10c:	00004b68 	.word	0x00004b68
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	000014ad 	.word	0x000014ad
     190:	20000000 	.word	0x20000000
     194:	000025ad 	.word	0x000025ad
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_us+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_us+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_us+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000004 	.word	0x20000004
     1cc:	00000115 	.word	0x00000115

000001d0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	b082      	sub	sp, #8
     1d4:	af00      	add	r7, sp, #0
     1d6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1d8:	e004      	b.n	1e4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1da:	4b07      	ldr	r3, [pc, #28]	; (1f8 <delay_cycles_ms+0x28>)
     1dc:	681b      	ldr	r3, [r3, #0]
     1de:	0018      	movs	r0, r3
     1e0:	4b06      	ldr	r3, [pc, #24]	; (1fc <delay_cycles_ms+0x2c>)
     1e2:	4798      	blx	r3
	while (n--) {
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	1e5a      	subs	r2, r3, #1
     1e8:	607a      	str	r2, [r7, #4]
     1ea:	2b00      	cmp	r3, #0
     1ec:	d1f5      	bne.n	1da <delay_cycles_ms+0xa>
	}
}
     1ee:	46c0      	nop			; (mov r8, r8)
     1f0:	46bd      	mov	sp, r7
     1f2:	b002      	add	sp, #8
     1f4:	bd80      	pop	{r7, pc}
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	20000000 	.word	0x20000000
     1fc:	00000115 	.word	0x00000115

00000200 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     200:	b580      	push	{r7, lr}
     202:	b082      	sub	sp, #8
     204:	af00      	add	r7, sp, #0
     206:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     208:	687b      	ldr	r3, [r7, #4]
     20a:	2200      	movs	r2, #0
     20c:	701a      	strb	r2, [r3, #0]
}
     20e:	46c0      	nop			; (mov r8, r8)
     210:	46bd      	mov	sp, r7
     212:	b002      	add	sp, #8
     214:	bd80      	pop	{r7, pc}
	...

00000218 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     218:	b580      	push	{r7, lr}
     21a:	b082      	sub	sp, #8
     21c:	af00      	add	r7, sp, #0
     21e:	0002      	movs	r2, r0
     220:	6039      	str	r1, [r7, #0]
     222:	1dfb      	adds	r3, r7, #7
     224:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     226:	1dfb      	adds	r3, r7, #7
     228:	781b      	ldrb	r3, [r3, #0]
     22a:	2b01      	cmp	r3, #1
     22c:	d00a      	beq.n	244 <system_apb_clock_set_mask+0x2c>
     22e:	2b02      	cmp	r3, #2
     230:	d00f      	beq.n	252 <system_apb_clock_set_mask+0x3a>
     232:	2b00      	cmp	r3, #0
     234:	d114      	bne.n	260 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     236:	4b0e      	ldr	r3, [pc, #56]	; (270 <system_apb_clock_set_mask+0x58>)
     238:	4a0d      	ldr	r2, [pc, #52]	; (270 <system_apb_clock_set_mask+0x58>)
     23a:	6991      	ldr	r1, [r2, #24]
     23c:	683a      	ldr	r2, [r7, #0]
     23e:	430a      	orrs	r2, r1
     240:	619a      	str	r2, [r3, #24]
			break;
     242:	e00f      	b.n	264 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     244:	4b0a      	ldr	r3, [pc, #40]	; (270 <system_apb_clock_set_mask+0x58>)
     246:	4a0a      	ldr	r2, [pc, #40]	; (270 <system_apb_clock_set_mask+0x58>)
     248:	69d1      	ldr	r1, [r2, #28]
     24a:	683a      	ldr	r2, [r7, #0]
     24c:	430a      	orrs	r2, r1
     24e:	61da      	str	r2, [r3, #28]
			break;
     250:	e008      	b.n	264 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     252:	4b07      	ldr	r3, [pc, #28]	; (270 <system_apb_clock_set_mask+0x58>)
     254:	4a06      	ldr	r2, [pc, #24]	; (270 <system_apb_clock_set_mask+0x58>)
     256:	6a11      	ldr	r1, [r2, #32]
     258:	683a      	ldr	r2, [r7, #0]
     25a:	430a      	orrs	r2, r1
     25c:	621a      	str	r2, [r3, #32]
			break;
     25e:	e001      	b.n	264 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     260:	2317      	movs	r3, #23
     262:	e000      	b.n	266 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     264:	2300      	movs	r3, #0
}
     266:	0018      	movs	r0, r3
     268:	46bd      	mov	sp, r7
     26a:	b002      	add	sp, #8
     26c:	bd80      	pop	{r7, pc}
     26e:	46c0      	nop			; (mov r8, r8)
     270:	40000400 	.word	0x40000400

00000274 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     274:	b580      	push	{r7, lr}
     276:	b082      	sub	sp, #8
     278:	af00      	add	r7, sp, #0
     27a:	0002      	movs	r2, r0
     27c:	1dfb      	adds	r3, r7, #7
     27e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     280:	4b06      	ldr	r3, [pc, #24]	; (29c <system_interrupt_enable+0x28>)
     282:	1dfa      	adds	r2, r7, #7
     284:	7812      	ldrb	r2, [r2, #0]
     286:	0011      	movs	r1, r2
     288:	221f      	movs	r2, #31
     28a:	400a      	ands	r2, r1
     28c:	2101      	movs	r1, #1
     28e:	4091      	lsls	r1, r2
     290:	000a      	movs	r2, r1
     292:	601a      	str	r2, [r3, #0]
}
     294:	46c0      	nop			; (mov r8, r8)
     296:	46bd      	mov	sp, r7
     298:	b002      	add	sp, #8
     29a:	bd80      	pop	{r7, pc}
     29c:	e000e100 	.word	0xe000e100

000002a0 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     2a0:	b580      	push	{r7, lr}
     2a2:	b082      	sub	sp, #8
     2a4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     2a6:	4b0f      	ldr	r3, [pc, #60]	; (2e4 <extint_is_syncing+0x44>)
     2a8:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2aa:	2300      	movs	r3, #0
     2ac:	607b      	str	r3, [r7, #4]
     2ae:	e011      	b.n	2d4 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     2b0:	687b      	ldr	r3, [r7, #4]
     2b2:	009b      	lsls	r3, r3, #2
     2b4:	2208      	movs	r2, #8
     2b6:	4694      	mov	ip, r2
     2b8:	44bc      	add	ip, r7
     2ba:	4463      	add	r3, ip
     2bc:	3b08      	subs	r3, #8
     2be:	681b      	ldr	r3, [r3, #0]
     2c0:	785b      	ldrb	r3, [r3, #1]
     2c2:	b2db      	uxtb	r3, r3
     2c4:	b25b      	sxtb	r3, r3
     2c6:	2b00      	cmp	r3, #0
     2c8:	da01      	bge.n	2ce <extint_is_syncing+0x2e>
			return true;
     2ca:	2301      	movs	r3, #1
     2cc:	e006      	b.n	2dc <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2ce:	687b      	ldr	r3, [r7, #4]
     2d0:	3301      	adds	r3, #1
     2d2:	607b      	str	r3, [r7, #4]
     2d4:	687b      	ldr	r3, [r7, #4]
     2d6:	2b00      	cmp	r3, #0
     2d8:	d0ea      	beq.n	2b0 <extint_is_syncing+0x10>
		}
	}
	return false;
     2da:	2300      	movs	r3, #0
}
     2dc:	0018      	movs	r0, r3
     2de:	46bd      	mov	sp, r7
     2e0:	b002      	add	sp, #8
     2e2:	bd80      	pop	{r7, pc}
     2e4:	40001800 	.word	0x40001800

000002e8 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     2e8:	b580      	push	{r7, lr}
     2ea:	b084      	sub	sp, #16
     2ec:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     2ee:	4b2d      	ldr	r3, [pc, #180]	; (3a4 <_system_extint_init+0xbc>)
     2f0:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     2f2:	2140      	movs	r1, #64	; 0x40
     2f4:	2000      	movs	r0, #0
     2f6:	4b2c      	ldr	r3, [pc, #176]	; (3a8 <_system_extint_init+0xc0>)
     2f8:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     2fa:	003b      	movs	r3, r7
     2fc:	0018      	movs	r0, r3
     2fe:	4b2b      	ldr	r3, [pc, #172]	; (3ac <_system_extint_init+0xc4>)
     300:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     302:	003b      	movs	r3, r7
     304:	2200      	movs	r2, #0
     306:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     308:	003b      	movs	r3, r7
     30a:	0019      	movs	r1, r3
     30c:	2005      	movs	r0, #5
     30e:	4b28      	ldr	r3, [pc, #160]	; (3b0 <_system_extint_init+0xc8>)
     310:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     312:	2005      	movs	r0, #5
     314:	4b27      	ldr	r3, [pc, #156]	; (3b4 <_system_extint_init+0xcc>)
     316:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     318:	2300      	movs	r3, #0
     31a:	60fb      	str	r3, [r7, #12]
     31c:	e018      	b.n	350 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     31e:	68fb      	ldr	r3, [r7, #12]
     320:	009b      	lsls	r3, r3, #2
     322:	2210      	movs	r2, #16
     324:	4694      	mov	ip, r2
     326:	44bc      	add	ip, r7
     328:	4463      	add	r3, ip
     32a:	3b0c      	subs	r3, #12
     32c:	681a      	ldr	r2, [r3, #0]
     32e:	68fb      	ldr	r3, [r7, #12]
     330:	009b      	lsls	r3, r3, #2
     332:	2110      	movs	r1, #16
     334:	468c      	mov	ip, r1
     336:	44bc      	add	ip, r7
     338:	4463      	add	r3, ip
     33a:	3b0c      	subs	r3, #12
     33c:	681b      	ldr	r3, [r3, #0]
     33e:	781b      	ldrb	r3, [r3, #0]
     340:	b2db      	uxtb	r3, r3
     342:	2101      	movs	r1, #1
     344:	430b      	orrs	r3, r1
     346:	b2db      	uxtb	r3, r3
     348:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     34a:	68fb      	ldr	r3, [r7, #12]
     34c:	3301      	adds	r3, #1
     34e:	60fb      	str	r3, [r7, #12]
     350:	68fb      	ldr	r3, [r7, #12]
     352:	2b00      	cmp	r3, #0
     354:	d0e3      	beq.n	31e <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
     356:	46c0      	nop			; (mov r8, r8)
     358:	4b17      	ldr	r3, [pc, #92]	; (3b8 <_system_extint_init+0xd0>)
     35a:	4798      	blx	r3
     35c:	1e03      	subs	r3, r0, #0
     35e:	d1fb      	bne.n	358 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     360:	230b      	movs	r3, #11
     362:	18fb      	adds	r3, r7, r3
     364:	2200      	movs	r2, #0
     366:	701a      	strb	r2, [r3, #0]
     368:	e00d      	b.n	386 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     36a:	230b      	movs	r3, #11
     36c:	18fb      	adds	r3, r7, r3
     36e:	781a      	ldrb	r2, [r3, #0]
     370:	4b12      	ldr	r3, [pc, #72]	; (3bc <_system_extint_init+0xd4>)
     372:	0092      	lsls	r2, r2, #2
     374:	2100      	movs	r1, #0
     376:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     378:	230b      	movs	r3, #11
     37a:	18fb      	adds	r3, r7, r3
     37c:	781a      	ldrb	r2, [r3, #0]
     37e:	230b      	movs	r3, #11
     380:	18fb      	adds	r3, r7, r3
     382:	3201      	adds	r2, #1
     384:	701a      	strb	r2, [r3, #0]
     386:	230b      	movs	r3, #11
     388:	18fb      	adds	r3, r7, r3
     38a:	781b      	ldrb	r3, [r3, #0]
     38c:	2b0f      	cmp	r3, #15
     38e:	d9ec      	bls.n	36a <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     390:	2004      	movs	r0, #4
     392:	4b0b      	ldr	r3, [pc, #44]	; (3c0 <_system_extint_init+0xd8>)
     394:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     396:	4b0b      	ldr	r3, [pc, #44]	; (3c4 <_system_extint_init+0xdc>)
     398:	4798      	blx	r3
}
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	46bd      	mov	sp, r7
     39e:	b004      	add	sp, #16
     3a0:	bd80      	pop	{r7, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	40001800 	.word	0x40001800
     3a8:	00000219 	.word	0x00000219
     3ac:	00000201 	.word	0x00000201
     3b0:	00001585 	.word	0x00001585
     3b4:	000015c9 	.word	0x000015c9
     3b8:	000002a1 	.word	0x000002a1
     3bc:	200000c8 	.word	0x200000c8
     3c0:	00000275 	.word	0x00000275
     3c4:	000003c9 	.word	0x000003c9

000003c8 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     3c8:	b580      	push	{r7, lr}
     3ca:	b082      	sub	sp, #8
     3cc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     3ce:	4b15      	ldr	r3, [pc, #84]	; (424 <_extint_enable+0x5c>)
     3d0:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     3d2:	2300      	movs	r3, #0
     3d4:	607b      	str	r3, [r7, #4]
     3d6:	e018      	b.n	40a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	009b      	lsls	r3, r3, #2
     3dc:	2208      	movs	r2, #8
     3de:	4694      	mov	ip, r2
     3e0:	44bc      	add	ip, r7
     3e2:	4463      	add	r3, ip
     3e4:	3b08      	subs	r3, #8
     3e6:	681a      	ldr	r2, [r3, #0]
     3e8:	687b      	ldr	r3, [r7, #4]
     3ea:	009b      	lsls	r3, r3, #2
     3ec:	2108      	movs	r1, #8
     3ee:	468c      	mov	ip, r1
     3f0:	44bc      	add	ip, r7
     3f2:	4463      	add	r3, ip
     3f4:	3b08      	subs	r3, #8
     3f6:	681b      	ldr	r3, [r3, #0]
     3f8:	781b      	ldrb	r3, [r3, #0]
     3fa:	b2db      	uxtb	r3, r3
     3fc:	2102      	movs	r1, #2
     3fe:	430b      	orrs	r3, r1
     400:	b2db      	uxtb	r3, r3
     402:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     404:	687b      	ldr	r3, [r7, #4]
     406:	3301      	adds	r3, #1
     408:	607b      	str	r3, [r7, #4]
     40a:	687b      	ldr	r3, [r7, #4]
     40c:	2b00      	cmp	r3, #0
     40e:	d0e3      	beq.n	3d8 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
     410:	46c0      	nop			; (mov r8, r8)
     412:	4b05      	ldr	r3, [pc, #20]	; (428 <_extint_enable+0x60>)
     414:	4798      	blx	r3
     416:	1e03      	subs	r3, r0, #0
     418:	d1fb      	bne.n	412 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     41a:	46c0      	nop			; (mov r8, r8)
     41c:	46bd      	mov	sp, r7
     41e:	b002      	add	sp, #8
     420:	bd80      	pop	{r7, pc}
     422:	46c0      	nop			; (mov r8, r8)
     424:	40001800 	.word	0x40001800
     428:	000002a1 	.word	0x000002a1

0000042c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     42c:	b580      	push	{r7, lr}
     42e:	b084      	sub	sp, #16
     430:	af00      	add	r7, sp, #0
     432:	0002      	movs	r2, r0
     434:	1dfb      	adds	r3, r7, #7
     436:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     438:	230f      	movs	r3, #15
     43a:	18fb      	adds	r3, r7, r3
     43c:	1dfa      	adds	r2, r7, #7
     43e:	7812      	ldrb	r2, [r2, #0]
     440:	0952      	lsrs	r2, r2, #5
     442:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     444:	230f      	movs	r3, #15
     446:	18fb      	adds	r3, r7, r3
     448:	781b      	ldrb	r3, [r3, #0]
     44a:	2b00      	cmp	r3, #0
     44c:	d10c      	bne.n	468 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     44e:	4b09      	ldr	r3, [pc, #36]	; (474 <_extint_get_eic_from_channel+0x48>)
     450:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     452:	230f      	movs	r3, #15
     454:	18fb      	adds	r3, r7, r3
     456:	781b      	ldrb	r3, [r3, #0]
     458:	009b      	lsls	r3, r3, #2
     45a:	2210      	movs	r2, #16
     45c:	4694      	mov	ip, r2
     45e:	44bc      	add	ip, r7
     460:	4463      	add	r3, ip
     462:	3b08      	subs	r3, #8
     464:	681b      	ldr	r3, [r3, #0]
     466:	e000      	b.n	46a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     468:	2300      	movs	r3, #0
	}
}
     46a:	0018      	movs	r0, r3
     46c:	46bd      	mov	sp, r7
     46e:	b004      	add	sp, #16
     470:	bd80      	pop	{r7, pc}
     472:	46c0      	nop			; (mov r8, r8)
     474:	40001800 	.word	0x40001800

00000478 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     478:	b580      	push	{r7, lr}
     47a:	b084      	sub	sp, #16
     47c:	af00      	add	r7, sp, #0
     47e:	0002      	movs	r2, r0
     480:	1dfb      	adds	r3, r7, #7
     482:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     484:	1dfb      	adds	r3, r7, #7
     486:	781b      	ldrb	r3, [r3, #0]
     488:	0018      	movs	r0, r3
     48a:	4b0b      	ldr	r3, [pc, #44]	; (4b8 <extint_chan_is_detected+0x40>)
     48c:	4798      	blx	r3
     48e:	0003      	movs	r3, r0
     490:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     492:	1dfb      	adds	r3, r7, #7
     494:	781b      	ldrb	r3, [r3, #0]
     496:	221f      	movs	r2, #31
     498:	4013      	ands	r3, r2
     49a:	2201      	movs	r2, #1
     49c:	409a      	lsls	r2, r3
     49e:	0013      	movs	r3, r2
     4a0:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     4a2:	68fb      	ldr	r3, [r7, #12]
     4a4:	691b      	ldr	r3, [r3, #16]
     4a6:	68ba      	ldr	r2, [r7, #8]
     4a8:	4013      	ands	r3, r2
     4aa:	1e5a      	subs	r2, r3, #1
     4ac:	4193      	sbcs	r3, r2
     4ae:	b2db      	uxtb	r3, r3
}
     4b0:	0018      	movs	r0, r3
     4b2:	46bd      	mov	sp, r7
     4b4:	b004      	add	sp, #16
     4b6:	bd80      	pop	{r7, pc}
     4b8:	0000042d 	.word	0x0000042d

000004bc <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     4bc:	b580      	push	{r7, lr}
     4be:	b084      	sub	sp, #16
     4c0:	af00      	add	r7, sp, #0
     4c2:	0002      	movs	r2, r0
     4c4:	1dfb      	adds	r3, r7, #7
     4c6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     4c8:	1dfb      	adds	r3, r7, #7
     4ca:	781b      	ldrb	r3, [r3, #0]
     4cc:	0018      	movs	r0, r3
     4ce:	4b09      	ldr	r3, [pc, #36]	; (4f4 <extint_chan_clear_detected+0x38>)
     4d0:	4798      	blx	r3
     4d2:	0003      	movs	r3, r0
     4d4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     4d6:	1dfb      	adds	r3, r7, #7
     4d8:	781b      	ldrb	r3, [r3, #0]
     4da:	221f      	movs	r2, #31
     4dc:	4013      	ands	r3, r2
     4de:	2201      	movs	r2, #1
     4e0:	409a      	lsls	r2, r3
     4e2:	0013      	movs	r3, r2
     4e4:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     4e6:	68fb      	ldr	r3, [r7, #12]
     4e8:	68ba      	ldr	r2, [r7, #8]
     4ea:	611a      	str	r2, [r3, #16]
}
     4ec:	46c0      	nop			; (mov r8, r8)
     4ee:	46bd      	mov	sp, r7
     4f0:	b004      	add	sp, #16
     4f2:	bd80      	pop	{r7, pc}
     4f4:	0000042d 	.word	0x0000042d

000004f8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     4f8:	b580      	push	{r7, lr}
     4fa:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     4fc:	4b15      	ldr	r3, [pc, #84]	; (554 <EIC_Handler+0x5c>)
     4fe:	2200      	movs	r2, #0
     500:	701a      	strb	r2, [r3, #0]
     502:	e020      	b.n	546 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     504:	4b13      	ldr	r3, [pc, #76]	; (554 <EIC_Handler+0x5c>)
     506:	781b      	ldrb	r3, [r3, #0]
     508:	0018      	movs	r0, r3
     50a:	4b13      	ldr	r3, [pc, #76]	; (558 <EIC_Handler+0x60>)
     50c:	4798      	blx	r3
     50e:	1e03      	subs	r3, r0, #0
     510:	d013      	beq.n	53a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     512:	4b10      	ldr	r3, [pc, #64]	; (554 <EIC_Handler+0x5c>)
     514:	781b      	ldrb	r3, [r3, #0]
     516:	0018      	movs	r0, r3
     518:	4b10      	ldr	r3, [pc, #64]	; (55c <EIC_Handler+0x64>)
     51a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     51c:	4b0d      	ldr	r3, [pc, #52]	; (554 <EIC_Handler+0x5c>)
     51e:	781b      	ldrb	r3, [r3, #0]
     520:	001a      	movs	r2, r3
     522:	4b0f      	ldr	r3, [pc, #60]	; (560 <EIC_Handler+0x68>)
     524:	0092      	lsls	r2, r2, #2
     526:	58d3      	ldr	r3, [r2, r3]
     528:	2b00      	cmp	r3, #0
     52a:	d006      	beq.n	53a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     52c:	4b09      	ldr	r3, [pc, #36]	; (554 <EIC_Handler+0x5c>)
     52e:	781b      	ldrb	r3, [r3, #0]
     530:	001a      	movs	r2, r3
     532:	4b0b      	ldr	r3, [pc, #44]	; (560 <EIC_Handler+0x68>)
     534:	0092      	lsls	r2, r2, #2
     536:	58d3      	ldr	r3, [r2, r3]
     538:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     53a:	4b06      	ldr	r3, [pc, #24]	; (554 <EIC_Handler+0x5c>)
     53c:	781b      	ldrb	r3, [r3, #0]
     53e:	3301      	adds	r3, #1
     540:	b2da      	uxtb	r2, r3
     542:	4b04      	ldr	r3, [pc, #16]	; (554 <EIC_Handler+0x5c>)
     544:	701a      	strb	r2, [r3, #0]
     546:	4b03      	ldr	r3, [pc, #12]	; (554 <EIC_Handler+0x5c>)
     548:	781b      	ldrb	r3, [r3, #0]
     54a:	2b0f      	cmp	r3, #15
     54c:	d9da      	bls.n	504 <EIC_Handler+0xc>
			}
		}
	}
}
     54e:	46c0      	nop			; (mov r8, r8)
     550:	46bd      	mov	sp, r7
     552:	bd80      	pop	{r7, pc}
     554:	20000108 	.word	0x20000108
     558:	00000479 	.word	0x00000479
     55c:	000004bd 	.word	0x000004bd
     560:	200000c8 	.word	0x200000c8

00000564 <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
     564:	b580      	push	{r7, lr}
     566:	b082      	sub	sp, #8
     568:	af00      	add	r7, sp, #0
     56a:	6078      	str	r0, [r7, #4]
	return pin >> 5;
     56c:	687b      	ldr	r3, [r7, #4]
     56e:	095b      	lsrs	r3, r3, #5
}
     570:	0018      	movs	r0, r3
     572:	46bd      	mov	sp, r7
     574:	b002      	add	sp, #8
     576:	bd80      	pop	{r7, pc}

00000578 <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
     578:	b580      	push	{r7, lr}
     57a:	b082      	sub	sp, #8
     57c:	af00      	add	r7, sp, #0
     57e:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
     580:	687b      	ldr	r3, [r7, #4]
     582:	01db      	lsls	r3, r3, #7
     584:	4a03      	ldr	r2, [pc, #12]	; (594 <arch_ioport_port_to_base+0x1c>)
     586:	4694      	mov	ip, r2
     588:	4463      	add	r3, ip
}
     58a:	0018      	movs	r0, r3
     58c:	46bd      	mov	sp, r7
     58e:	b002      	add	sp, #8
     590:	bd80      	pop	{r7, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	41004400 	.word	0x41004400

00000598 <arch_ioport_pin_to_base>:

inline static PortGroup *arch_ioport_pin_to_base(ioport_pin_t pin)
{
     598:	b580      	push	{r7, lr}
     59a:	b082      	sub	sp, #8
     59c:	af00      	add	r7, sp, #0
     59e:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
     5a0:	687b      	ldr	r3, [r7, #4]
     5a2:	0018      	movs	r0, r3
     5a4:	4b05      	ldr	r3, [pc, #20]	; (5bc <arch_ioport_pin_to_base+0x24>)
     5a6:	4798      	blx	r3
     5a8:	0003      	movs	r3, r0
     5aa:	0018      	movs	r0, r3
     5ac:	4b04      	ldr	r3, [pc, #16]	; (5c0 <arch_ioport_pin_to_base+0x28>)
     5ae:	4798      	blx	r3
     5b0:	0003      	movs	r3, r0
}
     5b2:	0018      	movs	r0, r3
     5b4:	46bd      	mov	sp, r7
     5b6:	b002      	add	sp, #8
     5b8:	bd80      	pop	{r7, pc}
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	00000565 	.word	0x00000565
     5c0:	00000579 	.word	0x00000579

000005c4 <arch_ioport_pin_to_mask>:

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
     5c4:	b580      	push	{r7, lr}
     5c6:	b082      	sub	sp, #8
     5c8:	af00      	add	r7, sp, #0
     5ca:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
     5cc:	687b      	ldr	r3, [r7, #4]
     5ce:	221f      	movs	r2, #31
     5d0:	4013      	ands	r3, r2
     5d2:	2201      	movs	r2, #1
     5d4:	409a      	lsls	r2, r3
     5d6:	0013      	movs	r3, r2
}
     5d8:	0018      	movs	r0, r3
     5da:	46bd      	mov	sp, r7
     5dc:	b002      	add	sp, #8
     5de:	bd80      	pop	{r7, pc}

000005e0 <arch_ioport_set_port_mode>:
			arch_ioport_pin_to_mask(pin));
}

inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
     5e0:	b580      	push	{r7, lr}
     5e2:	b08a      	sub	sp, #40	; 0x28
     5e4:	af00      	add	r7, sp, #0
     5e6:	60f8      	str	r0, [r7, #12]
     5e8:	60b9      	str	r1, [r7, #8]
     5ea:	607a      	str	r2, [r7, #4]
	PortGroup *base = arch_ioport_port_to_base(port);
     5ec:	68fb      	ldr	r3, [r7, #12]
     5ee:	0018      	movs	r0, r3
     5f0:	4b2b      	ldr	r3, [pc, #172]	; (6a0 <arch_ioport_set_port_mode+0xc0>)
     5f2:	4798      	blx	r3
     5f4:	0003      	movs	r3, r0
     5f6:	623b      	str	r3, [r7, #32]

	uint32_t config_mask = 0;
     5f8:	2300      	movs	r3, #0
     5fa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t config_mux  = 0;
     5fc:	2300      	movs	r3, #0
     5fe:	61fb      	str	r3, [r7, #28]

	config_mask |= PORT_WRCONFIG_INEN;
     600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     602:	2280      	movs	r2, #128	; 0x80
     604:	0292      	lsls	r2, r2, #10
     606:	4313      	orrs	r3, r2
     608:	627b      	str	r3, [r7, #36]	; 0x24

	if ((mode & IOPORT_MODE_PULLDOWN) || (mode & IOPORT_MODE_PULLUP)) {
     60a:	687b      	ldr	r3, [r7, #4]
     60c:	2220      	movs	r2, #32
     60e:	4013      	ands	r3, r2
     610:	d103      	bne.n	61a <arch_ioport_set_port_mode+0x3a>
     612:	687b      	ldr	r3, [r7, #4]
     614:	2210      	movs	r2, #16
     616:	4013      	ands	r3, r2
     618:	d004      	beq.n	624 <arch_ioport_set_port_mode+0x44>
		config_mask |= PORT_WRCONFIG_PULLEN;
     61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     61c:	2280      	movs	r2, #128	; 0x80
     61e:	02d2      	lsls	r2, r2, #11
     620:	4313      	orrs	r3, r2
     622:	627b      	str	r3, [r7, #36]	; 0x24
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		config_mask |= PORT_WRCONFIG_ODRAIN;
	}
#endif

	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
     624:	687b      	ldr	r3, [r7, #4]
     626:	2280      	movs	r2, #128	; 0x80
     628:	4013      	ands	r3, r2
     62a:	d004      	beq.n	636 <arch_ioport_set_port_mode+0x56>
		config_mask |= PORT_WRCONFIG_DRVSTR;
     62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     62e:	2280      	movs	r2, #128	; 0x80
     630:	03d2      	lsls	r2, r2, #15
     632:	4313      	orrs	r3, r2
     634:	627b      	str	r3, [r7, #36]	; 0x24
	}

	config_mux = (mode & IOPORT_MODE_MUX_MASK) << PORT_WRCONFIG_PMUX_Pos;
     636:	687b      	ldr	r3, [r7, #4]
     638:	061a      	lsls	r2, r3, #24
     63a:	23f0      	movs	r3, #240	; 0xf0
     63c:	051b      	lsls	r3, r3, #20
     63e:	4013      	ands	r3, r2
     640:	61fb      	str	r3, [r7, #28]

	uint32_t lower_pin_mask = (mask & 0xFFFF);
     642:	68bb      	ldr	r3, [r7, #8]
     644:	041b      	lsls	r3, r3, #16
     646:	0c1b      	lsrs	r3, r3, #16
     648:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (mask >> 16);
     64a:	68bb      	ldr	r3, [r7, #8]
     64c:	0c1b      	lsrs	r3, r3, #16
     64e:	617b      	str	r3, [r7, #20]

	base->WRCONFIG.reg =
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     650:	69ba      	ldr	r2, [r7, #24]
     652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     654:	431a      	orrs	r2, r3
			config_mask | config_mux |
     656:	69fb      	ldr	r3, [r7, #28]
     658:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     65a:	22a0      	movs	r2, #160	; 0xa0
     65c:	05d2      	lsls	r2, r2, #23
     65e:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
     660:	6a3b      	ldr	r3, [r7, #32]
     662:	629a      	str	r2, [r3, #40]	; 0x28

	base->WRCONFIG.reg =
			(upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     664:	697a      	ldr	r2, [r7, #20]
     666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     668:	431a      	orrs	r2, r3
			config_mask | config_mux |
     66a:	69fb      	ldr	r3, [r7, #28]
     66c:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     66e:	22d0      	movs	r2, #208	; 0xd0
     670:	0612      	lsls	r2, r2, #24
     672:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
     674:	6a3b      	ldr	r3, [r7, #32]
     676:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if (mode & IOPORT_MODE_PULLDOWN) {
     678:	687b      	ldr	r3, [r7, #4]
     67a:	2220      	movs	r2, #32
     67c:	4013      	ands	r3, r2
     67e:	d003      	beq.n	688 <arch_ioport_set_port_mode+0xa8>
		base->OUTCLR.reg = mask;
     680:	6a3b      	ldr	r3, [r7, #32]
     682:	68ba      	ldr	r2, [r7, #8]
     684:	615a      	str	r2, [r3, #20]
	}
	else if (mode & IOPORT_MODE_PULLUP) {
		base->OUTSET.reg = mask;
	}
}
     686:	e006      	b.n	696 <arch_ioport_set_port_mode+0xb6>
	else if (mode & IOPORT_MODE_PULLUP) {
     688:	687b      	ldr	r3, [r7, #4]
     68a:	2210      	movs	r2, #16
     68c:	4013      	ands	r3, r2
     68e:	d002      	beq.n	696 <arch_ioport_set_port_mode+0xb6>
		base->OUTSET.reg = mask;
     690:	6a3b      	ldr	r3, [r7, #32]
     692:	68ba      	ldr	r2, [r7, #8]
     694:	619a      	str	r2, [r3, #24]
}
     696:	46c0      	nop			; (mov r8, r8)
     698:	46bd      	mov	sp, r7
     69a:	b00a      	add	sp, #40	; 0x28
     69c:	bd80      	pop	{r7, pc}
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	00000579 	.word	0x00000579

000006a4 <arch_ioport_set_pin_mode>:

inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
     6a4:	b590      	push	{r4, r7, lr}
     6a6:	b083      	sub	sp, #12
     6a8:	af00      	add	r7, sp, #0
     6aa:	6078      	str	r0, [r7, #4]
     6ac:	6039      	str	r1, [r7, #0]
	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	0018      	movs	r0, r3
     6b2:	4b08      	ldr	r3, [pc, #32]	; (6d4 <arch_ioport_set_pin_mode+0x30>)
     6b4:	4798      	blx	r3
     6b6:	0004      	movs	r4, r0
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	0018      	movs	r0, r3
     6bc:	4b06      	ldr	r3, [pc, #24]	; (6d8 <arch_ioport_set_pin_mode+0x34>)
     6be:	4798      	blx	r3
     6c0:	0001      	movs	r1, r0
     6c2:	683b      	ldr	r3, [r7, #0]
     6c4:	001a      	movs	r2, r3
     6c6:	0020      	movs	r0, r4
     6c8:	4b04      	ldr	r3, [pc, #16]	; (6dc <arch_ioport_set_pin_mode+0x38>)
     6ca:	4798      	blx	r3
			arch_ioport_pin_to_mask(pin), mode);
}
     6cc:	46c0      	nop			; (mov r8, r8)
     6ce:	46bd      	mov	sp, r7
     6d0:	b003      	add	sp, #12
     6d2:	bd90      	pop	{r4, r7, pc}
     6d4:	00000565 	.word	0x00000565
     6d8:	000005c5 	.word	0x000005c5
     6dc:	000005e1 	.word	0x000005e1

000006e0 <arch_ioport_set_pin_dir>:
	}
}

inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
     6e0:	b580      	push	{r7, lr}
     6e2:	b084      	sub	sp, #16
     6e4:	af00      	add	r7, sp, #0
     6e6:	6078      	str	r0, [r7, #4]
     6e8:	000a      	movs	r2, r1
     6ea:	1cfb      	adds	r3, r7, #3
     6ec:	701a      	strb	r2, [r3, #0]
	PortGroup *base = arch_ioport_pin_to_base(pin);
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	0018      	movs	r0, r3
     6f2:	4b18      	ldr	r3, [pc, #96]	; (754 <arch_ioport_set_pin_dir+0x74>)
     6f4:	4798      	blx	r3
     6f6:	0003      	movs	r3, r0
     6f8:	60fb      	str	r3, [r7, #12]

	if (dir == IOPORT_DIR_OUTPUT) {
     6fa:	1cfb      	adds	r3, r7, #3
     6fc:	781b      	ldrb	r3, [r3, #0]
     6fe:	2b01      	cmp	r3, #1
     700:	d107      	bne.n	712 <arch_ioport_set_pin_dir+0x32>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
     702:	687b      	ldr	r3, [r7, #4]
     704:	0018      	movs	r0, r3
     706:	4b14      	ldr	r3, [pc, #80]	; (758 <arch_ioport_set_pin_dir+0x78>)
     708:	4798      	blx	r3
     70a:	0002      	movs	r2, r0
     70c:	68fb      	ldr	r3, [r7, #12]
     70e:	609a      	str	r2, [r3, #8]
     710:	e00a      	b.n	728 <arch_ioport_set_pin_dir+0x48>
	} else if (dir == IOPORT_DIR_INPUT) {
     712:	1cfb      	adds	r3, r7, #3
     714:	781b      	ldrb	r3, [r3, #0]
     716:	2b00      	cmp	r3, #0
     718:	d106      	bne.n	728 <arch_ioport_set_pin_dir+0x48>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	0018      	movs	r0, r3
     71e:	4b0e      	ldr	r3, [pc, #56]	; (758 <arch_ioport_set_pin_dir+0x78>)
     720:	4798      	blx	r3
     722:	0002      	movs	r2, r0
     724:	68fb      	ldr	r3, [r7, #12]
     726:	605a      	str	r2, [r3, #4]
	}

	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
     728:	68fa      	ldr	r2, [r7, #12]
     72a:	2140      	movs	r1, #64	; 0x40
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	18d3      	adds	r3, r2, r3
     730:	185b      	adds	r3, r3, r1
     732:	781b      	ldrb	r3, [r3, #0]
     734:	b2db      	uxtb	r3, r3
     736:	2202      	movs	r2, #2
     738:	4313      	orrs	r3, r2
     73a:	b2d8      	uxtb	r0, r3
     73c:	68fa      	ldr	r2, [r7, #12]
     73e:	2140      	movs	r1, #64	; 0x40
     740:	687b      	ldr	r3, [r7, #4]
     742:	18d3      	adds	r3, r2, r3
     744:	185b      	adds	r3, r3, r1
     746:	1c02      	adds	r2, r0, #0
     748:	701a      	strb	r2, [r3, #0]
}
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	46bd      	mov	sp, r7
     74e:	b004      	add	sp, #16
     750:	bd80      	pop	{r7, pc}
     752:	46c0      	nop			; (mov r8, r8)
     754:	00000599 	.word	0x00000599
     758:	000005c5 	.word	0x000005c5

0000075c <arch_ioport_set_pin_level>:

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
     75c:	b590      	push	{r4, r7, lr}
     75e:	b083      	sub	sp, #12
     760:	af00      	add	r7, sp, #0
     762:	6078      	str	r0, [r7, #4]
     764:	000a      	movs	r2, r1
     766:	1cfb      	adds	r3, r7, #3
     768:	701a      	strb	r2, [r3, #0]
	if (level) {
     76a:	1cfb      	adds	r3, r7, #3
     76c:	781b      	ldrb	r3, [r3, #0]
     76e:	2b00      	cmp	r3, #0
     770:	d00b      	beq.n	78a <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
     772:	687b      	ldr	r3, [r7, #4]
     774:	0018      	movs	r0, r3
     776:	4b0c      	ldr	r3, [pc, #48]	; (7a8 <arch_ioport_set_pin_level+0x4c>)
     778:	4798      	blx	r3
     77a:	0004      	movs	r4, r0
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	0018      	movs	r0, r3
     780:	4b0a      	ldr	r3, [pc, #40]	; (7ac <arch_ioport_set_pin_level+0x50>)
     782:	4798      	blx	r3
     784:	0003      	movs	r3, r0
     786:	61a3      	str	r3, [r4, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
	}
}
     788:	e00a      	b.n	7a0 <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
     78a:	687b      	ldr	r3, [r7, #4]
     78c:	0018      	movs	r0, r3
     78e:	4b06      	ldr	r3, [pc, #24]	; (7a8 <arch_ioport_set_pin_level+0x4c>)
     790:	4798      	blx	r3
     792:	0004      	movs	r4, r0
     794:	687b      	ldr	r3, [r7, #4]
     796:	0018      	movs	r0, r3
     798:	4b04      	ldr	r3, [pc, #16]	; (7ac <arch_ioport_set_pin_level+0x50>)
     79a:	4798      	blx	r3
     79c:	0003      	movs	r3, r0
     79e:	6163      	str	r3, [r4, #20]
}
     7a0:	46c0      	nop			; (mov r8, r8)
     7a2:	46bd      	mov	sp, r7
     7a4:	b003      	add	sp, #12
     7a6:	bd90      	pop	{r4, r7, pc}
     7a8:	00000599 	.word	0x00000599
     7ac:	000005c5 	.word	0x000005c5

000007b0 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
     7b0:	b580      	push	{r7, lr}
     7b2:	b082      	sub	sp, #8
     7b4:	af00      	add	r7, sp, #0
     7b6:	6078      	str	r0, [r7, #4]
     7b8:	6039      	str	r1, [r7, #0]
	arch_ioport_set_pin_mode(pin, mode);
     7ba:	683a      	ldr	r2, [r7, #0]
     7bc:	687b      	ldr	r3, [r7, #4]
     7be:	0011      	movs	r1, r2
     7c0:	0018      	movs	r0, r3
     7c2:	4b03      	ldr	r3, [pc, #12]	; (7d0 <ioport_set_pin_mode+0x20>)
     7c4:	4798      	blx	r3
}
     7c6:	46c0      	nop			; (mov r8, r8)
     7c8:	46bd      	mov	sp, r7
     7ca:	b002      	add	sp, #8
     7cc:	bd80      	pop	{r7, pc}
     7ce:	46c0      	nop			; (mov r8, r8)
     7d0:	000006a5 	.word	0x000006a5

000007d4 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
     7d4:	b580      	push	{r7, lr}
     7d6:	b082      	sub	sp, #8
     7d8:	af00      	add	r7, sp, #0
     7da:	6078      	str	r0, [r7, #4]
     7dc:	000a      	movs	r2, r1
     7de:	1cfb      	adds	r3, r7, #3
     7e0:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_dir(pin, dir);
     7e2:	1cfb      	adds	r3, r7, #3
     7e4:	781a      	ldrb	r2, [r3, #0]
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	0011      	movs	r1, r2
     7ea:	0018      	movs	r0, r3
     7ec:	4b02      	ldr	r3, [pc, #8]	; (7f8 <ioport_set_pin_dir+0x24>)
     7ee:	4798      	blx	r3
}
     7f0:	46c0      	nop			; (mov r8, r8)
     7f2:	46bd      	mov	sp, r7
     7f4:	b002      	add	sp, #8
     7f6:	bd80      	pop	{r7, pc}
     7f8:	000006e1 	.word	0x000006e1

000007fc <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
     7fc:	b580      	push	{r7, lr}
     7fe:	b082      	sub	sp, #8
     800:	af00      	add	r7, sp, #0
     802:	6078      	str	r0, [r7, #4]
     804:	000a      	movs	r2, r1
     806:	1cfb      	adds	r3, r7, #3
     808:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
     80a:	1cfb      	adds	r3, r7, #3
     80c:	781a      	ldrb	r2, [r3, #0]
     80e:	687b      	ldr	r3, [r7, #4]
     810:	0011      	movs	r1, r2
     812:	0018      	movs	r0, r3
     814:	4b02      	ldr	r3, [pc, #8]	; (820 <ioport_set_pin_level+0x24>)
     816:	4798      	blx	r3
}
     818:	46c0      	nop			; (mov r8, r8)
     81a:	46bd      	mov	sp, r7
     81c:	b002      	add	sp, #8
     81e:	bd80      	pop	{r7, pc}
     820:	0000075d 	.word	0x0000075d

00000824 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     824:	b580      	push	{r7, lr}
     826:	af00      	add	r7, sp, #0
	 // Set up coil control
	 ioport_set_pin_dir(COIL_1_PIN, IOPORT_DIR_OUTPUT);
     828:	2101      	movs	r1, #1
     82a:	2001      	movs	r0, #1
     82c:	4b18      	ldr	r3, [pc, #96]	; (890 <system_board_init+0x6c>)
     82e:	4798      	blx	r3
	 ioport_set_pin_level(COIL_1_PIN, !COIL_ACTIVE_LEVEL);
     830:	2100      	movs	r1, #0
     832:	2001      	movs	r0, #1
     834:	4b17      	ldr	r3, [pc, #92]	; (894 <system_board_init+0x70>)
     836:	4798      	blx	r3
	 ioport_set_pin_dir(COIL_2_PIN, IOPORT_DIR_OUTPUT);
     838:	2101      	movs	r1, #1
     83a:	2000      	movs	r0, #0
     83c:	4b14      	ldr	r3, [pc, #80]	; (890 <system_board_init+0x6c>)
     83e:	4798      	blx	r3
	 ioport_set_pin_level(COIL_2_PIN, !COIL_ACTIVE_LEVEL);
     840:	2100      	movs	r1, #0
     842:	2000      	movs	r0, #0
     844:	4b13      	ldr	r3, [pc, #76]	; (894 <system_board_init+0x70>)
     846:	4798      	blx	r3
	 ioport_set_pin_dir(COIL_3_PIN, IOPORT_DIR_OUTPUT);
     848:	2101      	movs	r1, #1
     84a:	2023      	movs	r0, #35	; 0x23
     84c:	4b10      	ldr	r3, [pc, #64]	; (890 <system_board_init+0x6c>)
     84e:	4798      	blx	r3
	 ioport_set_pin_level(COIL_3_PIN, !COIL_ACTIVE_LEVEL);
     850:	2100      	movs	r1, #0
     852:	2023      	movs	r0, #35	; 0x23
     854:	4b0f      	ldr	r3, [pc, #60]	; (894 <system_board_init+0x70>)
     856:	4798      	blx	r3
	 ioport_set_pin_dir(COIL_4_PIN, IOPORT_DIR_OUTPUT);
     858:	2101      	movs	r1, #1
     85a:	2022      	movs	r0, #34	; 0x22
     85c:	4b0c      	ldr	r3, [pc, #48]	; (890 <system_board_init+0x6c>)
     85e:	4798      	blx	r3
	 ioport_set_pin_level(COIL_4_PIN, !COIL_ACTIVE_LEVEL);
     860:	2100      	movs	r1, #0
     862:	2022      	movs	r0, #34	; 0x22
     864:	4b0b      	ldr	r3, [pc, #44]	; (894 <system_board_init+0x70>)
     866:	4798      	blx	r3

	 // Set up buttons
	 ioport_set_pin_dir(BUTTON_1_PIN, IOPORT_DIR_INPUT);
     868:	2100      	movs	r1, #0
     86a:	2036      	movs	r0, #54	; 0x36
     86c:	4b08      	ldr	r3, [pc, #32]	; (890 <system_board_init+0x6c>)
     86e:	4798      	blx	r3
	 ioport_set_pin_mode(BUTTON_1_PIN, IOPORT_MODE_PULLUP);
     870:	2110      	movs	r1, #16
     872:	2036      	movs	r0, #54	; 0x36
     874:	4b08      	ldr	r3, [pc, #32]	; (898 <system_board_init+0x74>)
     876:	4798      	blx	r3
	 ioport_set_pin_dir(BUTTON_2_PIN, IOPORT_DIR_INPUT);
     878:	2100      	movs	r1, #0
     87a:	200f      	movs	r0, #15
     87c:	4b04      	ldr	r3, [pc, #16]	; (890 <system_board_init+0x6c>)
     87e:	4798      	blx	r3
	 ioport_set_pin_mode(BUTTON_2_PIN, IOPORT_MODE_PULLUP);
     880:	2110      	movs	r1, #16
     882:	200f      	movs	r0, #15
     884:	4b04      	ldr	r3, [pc, #16]	; (898 <system_board_init+0x74>)
     886:	4798      	blx	r3
     888:	46c0      	nop			; (mov r8, r8)
     88a:	46bd      	mov	sp, r7
     88c:	bd80      	pop	{r7, pc}
     88e:	46c0      	nop			; (mov r8, r8)
     890:	000007d5 	.word	0x000007d5
     894:	000007fd 	.word	0x000007fd
     898:	000007b1 	.word	0x000007b1

0000089c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     89c:	b580      	push	{r7, lr}
     89e:	b082      	sub	sp, #8
     8a0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     8a2:	4b10      	ldr	r3, [pc, #64]	; (8e4 <cpu_irq_enter_critical+0x48>)
     8a4:	681b      	ldr	r3, [r3, #0]
     8a6:	2b00      	cmp	r3, #0
     8a8:	d112      	bne.n	8d0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     8aa:	f3ef 8310 	mrs	r3, PRIMASK
     8ae:	607b      	str	r3, [r7, #4]
  return(result);
     8b0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     8b2:	2b00      	cmp	r3, #0
     8b4:	d109      	bne.n	8ca <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     8b6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     8b8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     8bc:	4b0a      	ldr	r3, [pc, #40]	; (8e8 <cpu_irq_enter_critical+0x4c>)
     8be:	2200      	movs	r2, #0
     8c0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     8c2:	4b0a      	ldr	r3, [pc, #40]	; (8ec <cpu_irq_enter_critical+0x50>)
     8c4:	2201      	movs	r2, #1
     8c6:	701a      	strb	r2, [r3, #0]
     8c8:	e002      	b.n	8d0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     8ca:	4b08      	ldr	r3, [pc, #32]	; (8ec <cpu_irq_enter_critical+0x50>)
     8cc:	2200      	movs	r2, #0
     8ce:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     8d0:	4b04      	ldr	r3, [pc, #16]	; (8e4 <cpu_irq_enter_critical+0x48>)
     8d2:	681b      	ldr	r3, [r3, #0]
     8d4:	1c5a      	adds	r2, r3, #1
     8d6:	4b03      	ldr	r3, [pc, #12]	; (8e4 <cpu_irq_enter_critical+0x48>)
     8d8:	601a      	str	r2, [r3, #0]
}
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	46bd      	mov	sp, r7
     8de:	b002      	add	sp, #8
     8e0:	bd80      	pop	{r7, pc}
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	2000008c 	.word	0x2000008c
     8e8:	20000008 	.word	0x20000008
     8ec:	20000090 	.word	0x20000090

000008f0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     8f0:	b580      	push	{r7, lr}
     8f2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     8f4:	4b0b      	ldr	r3, [pc, #44]	; (924 <cpu_irq_leave_critical+0x34>)
     8f6:	681b      	ldr	r3, [r3, #0]
     8f8:	1e5a      	subs	r2, r3, #1
     8fa:	4b0a      	ldr	r3, [pc, #40]	; (924 <cpu_irq_leave_critical+0x34>)
     8fc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     8fe:	4b09      	ldr	r3, [pc, #36]	; (924 <cpu_irq_leave_critical+0x34>)
     900:	681b      	ldr	r3, [r3, #0]
     902:	2b00      	cmp	r3, #0
     904:	d10a      	bne.n	91c <cpu_irq_leave_critical+0x2c>
     906:	4b08      	ldr	r3, [pc, #32]	; (928 <cpu_irq_leave_critical+0x38>)
     908:	781b      	ldrb	r3, [r3, #0]
     90a:	b2db      	uxtb	r3, r3
     90c:	2b00      	cmp	r3, #0
     90e:	d005      	beq.n	91c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     910:	4b06      	ldr	r3, [pc, #24]	; (92c <cpu_irq_leave_critical+0x3c>)
     912:	2201      	movs	r2, #1
     914:	701a      	strb	r2, [r3, #0]
     916:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     91a:	b662      	cpsie	i
	}
}
     91c:	46c0      	nop			; (mov r8, r8)
     91e:	46bd      	mov	sp, r7
     920:	bd80      	pop	{r7, pc}
     922:	46c0      	nop			; (mov r8, r8)
     924:	2000008c 	.word	0x2000008c
     928:	20000090 	.word	0x20000090
     92c:	20000008 	.word	0x20000008

00000930 <system_gclk_chan_get_config_defaults>:
{
     930:	b580      	push	{r7, lr}
     932:	b082      	sub	sp, #8
     934:	af00      	add	r7, sp, #0
     936:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     938:	687b      	ldr	r3, [r7, #4]
     93a:	2200      	movs	r2, #0
     93c:	701a      	strb	r2, [r3, #0]
}
     93e:	46c0      	nop			; (mov r8, r8)
     940:	46bd      	mov	sp, r7
     942:	b002      	add	sp, #8
     944:	bd80      	pop	{r7, pc}
	...

00000948 <system_apb_clock_set_mask>:
{
     948:	b580      	push	{r7, lr}
     94a:	b082      	sub	sp, #8
     94c:	af00      	add	r7, sp, #0
     94e:	0002      	movs	r2, r0
     950:	6039      	str	r1, [r7, #0]
     952:	1dfb      	adds	r3, r7, #7
     954:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     956:	1dfb      	adds	r3, r7, #7
     958:	781b      	ldrb	r3, [r3, #0]
     95a:	2b01      	cmp	r3, #1
     95c:	d00a      	beq.n	974 <system_apb_clock_set_mask+0x2c>
     95e:	2b02      	cmp	r3, #2
     960:	d00f      	beq.n	982 <system_apb_clock_set_mask+0x3a>
     962:	2b00      	cmp	r3, #0
     964:	d114      	bne.n	990 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     966:	4b0e      	ldr	r3, [pc, #56]	; (9a0 <system_apb_clock_set_mask+0x58>)
     968:	4a0d      	ldr	r2, [pc, #52]	; (9a0 <system_apb_clock_set_mask+0x58>)
     96a:	6991      	ldr	r1, [r2, #24]
     96c:	683a      	ldr	r2, [r7, #0]
     96e:	430a      	orrs	r2, r1
     970:	619a      	str	r2, [r3, #24]
			break;
     972:	e00f      	b.n	994 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     974:	4b0a      	ldr	r3, [pc, #40]	; (9a0 <system_apb_clock_set_mask+0x58>)
     976:	4a0a      	ldr	r2, [pc, #40]	; (9a0 <system_apb_clock_set_mask+0x58>)
     978:	69d1      	ldr	r1, [r2, #28]
     97a:	683a      	ldr	r2, [r7, #0]
     97c:	430a      	orrs	r2, r1
     97e:	61da      	str	r2, [r3, #28]
			break;
     980:	e008      	b.n	994 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     982:	4b07      	ldr	r3, [pc, #28]	; (9a0 <system_apb_clock_set_mask+0x58>)
     984:	4a06      	ldr	r2, [pc, #24]	; (9a0 <system_apb_clock_set_mask+0x58>)
     986:	6a11      	ldr	r1, [r2, #32]
     988:	683a      	ldr	r2, [r7, #0]
     98a:	430a      	orrs	r2, r1
     98c:	621a      	str	r2, [r3, #32]
			break;
     98e:	e001      	b.n	994 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     990:	2317      	movs	r3, #23
     992:	e000      	b.n	996 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     994:	2300      	movs	r3, #0
}
     996:	0018      	movs	r0, r3
     998:	46bd      	mov	sp, r7
     99a:	b002      	add	sp, #8
     99c:	bd80      	pop	{r7, pc}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	40000400 	.word	0x40000400

000009a4 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     9a4:	b580      	push	{r7, lr}
     9a6:	b084      	sub	sp, #16
     9a8:	af00      	add	r7, sp, #0
     9aa:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9ac:	687b      	ldr	r3, [r7, #4]
     9ae:	681b      	ldr	r3, [r3, #0]
     9b0:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     9b2:	68fb      	ldr	r3, [r7, #12]
     9b4:	7a9b      	ldrb	r3, [r3, #10]
     9b6:	b2db      	uxtb	r3, r3
     9b8:	b25b      	sxtb	r3, r3
     9ba:	2b00      	cmp	r3, #0
     9bc:	da01      	bge.n	9c2 <rtc_count_is_syncing+0x1e>
                return true;
     9be:	2301      	movs	r3, #1
     9c0:	e000      	b.n	9c4 <rtc_count_is_syncing+0x20>
        }

        return false;
     9c2:	2300      	movs	r3, #0
}
     9c4:	0018      	movs	r0, r3
     9c6:	46bd      	mov	sp, r7
     9c8:	b004      	add	sp, #16
     9ca:	bd80      	pop	{r7, pc}

000009cc <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     9cc:	b580      	push	{r7, lr}
     9ce:	b084      	sub	sp, #16
     9d0:	af00      	add	r7, sp, #0
     9d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	681b      	ldr	r3, [r3, #0]
     9d8:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     9da:	46c0      	nop			; (mov r8, r8)
     9dc:	687b      	ldr	r3, [r7, #4]
     9de:	0018      	movs	r0, r3
     9e0:	4b07      	ldr	r3, [pc, #28]	; (a00 <rtc_count_enable+0x34>)
     9e2:	4798      	blx	r3
     9e4:	1e03      	subs	r3, r0, #0
     9e6:	d1f9      	bne.n	9dc <rtc_count_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     9e8:	68fb      	ldr	r3, [r7, #12]
     9ea:	881b      	ldrh	r3, [r3, #0]
     9ec:	b29b      	uxth	r3, r3
     9ee:	2202      	movs	r2, #2
     9f0:	4313      	orrs	r3, r2
     9f2:	b29a      	uxth	r2, r3
     9f4:	68fb      	ldr	r3, [r7, #12]
     9f6:	801a      	strh	r2, [r3, #0]
}
     9f8:	46c0      	nop			; (mov r8, r8)
     9fa:	46bd      	mov	sp, r7
     9fc:	b004      	add	sp, #16
     9fe:	bd80      	pop	{r7, pc}
     a00:	000009a5 	.word	0x000009a5

00000a04 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     a04:	b580      	push	{r7, lr}
     a06:	b084      	sub	sp, #16
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a0c:	687b      	ldr	r3, [r7, #4]
     a0e:	681b      	ldr	r3, [r3, #0]
     a10:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	687b      	ldr	r3, [r7, #4]
     a16:	0018      	movs	r0, r3
     a18:	4b0a      	ldr	r3, [pc, #40]	; (a44 <rtc_count_disable+0x40>)
     a1a:	4798      	blx	r3
     a1c:	1e03      	subs	r3, r0, #0
     a1e:	d1f9      	bne.n	a14 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     a20:	68fb      	ldr	r3, [r7, #12]
     a22:	22c1      	movs	r2, #193	; 0xc1
     a24:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     a26:	68fb      	ldr	r3, [r7, #12]
     a28:	22c1      	movs	r2, #193	; 0xc1
     a2a:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     a2c:	68fb      	ldr	r3, [r7, #12]
     a2e:	881b      	ldrh	r3, [r3, #0]
     a30:	b29b      	uxth	r3, r3
     a32:	2202      	movs	r2, #2
     a34:	4393      	bics	r3, r2
     a36:	b29a      	uxth	r2, r3
     a38:	68fb      	ldr	r3, [r7, #12]
     a3a:	801a      	strh	r2, [r3, #0]
}
     a3c:	46c0      	nop			; (mov r8, r8)
     a3e:	46bd      	mov	sp, r7
     a40:	b004      	add	sp, #16
     a42:	bd80      	pop	{r7, pc}
     a44:	000009a5 	.word	0x000009a5

00000a48 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     a48:	b580      	push	{r7, lr}
     a4a:	b084      	sub	sp, #16
     a4c:	af00      	add	r7, sp, #0
     a4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a50:	687b      	ldr	r3, [r7, #4]
     a52:	681b      	ldr	r3, [r3, #0]
     a54:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     a56:	687b      	ldr	r3, [r7, #4]
     a58:	0018      	movs	r0, r3
     a5a:	4b0a      	ldr	r3, [pc, #40]	; (a84 <rtc_count_reset+0x3c>)
     a5c:	4798      	blx	r3
#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_count_is_syncing(module)) {
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	687b      	ldr	r3, [r7, #4]
     a62:	0018      	movs	r0, r3
     a64:	4b08      	ldr	r3, [pc, #32]	; (a88 <rtc_count_reset+0x40>)
     a66:	4798      	blx	r3
     a68:	1e03      	subs	r3, r0, #0
     a6a:	d1f9      	bne.n	a60 <rtc_count_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     a6c:	68fb      	ldr	r3, [r7, #12]
     a6e:	881b      	ldrh	r3, [r3, #0]
     a70:	b29b      	uxth	r3, r3
     a72:	2201      	movs	r2, #1
     a74:	4313      	orrs	r3, r2
     a76:	b29a      	uxth	r2, r3
     a78:	68fb      	ldr	r3, [r7, #12]
     a7a:	801a      	strh	r2, [r3, #0]
}
     a7c:	46c0      	nop			; (mov r8, r8)
     a7e:	46bd      	mov	sp, r7
     a80:	b004      	add	sp, #16
     a82:	bd80      	pop	{r7, pc}
     a84:	00000a05 	.word	0x00000a05
     a88:	000009a5 	.word	0x000009a5

00000a8c <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     a8c:	b580      	push	{r7, lr}
     a8e:	b084      	sub	sp, #16
     a90:	af00      	add	r7, sp, #0
     a92:	6078      	str	r0, [r7, #4]
     a94:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a96:	687b      	ldr	r3, [r7, #4]
     a98:	681b      	ldr	r3, [r3, #0]
     a9a:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     a9c:	683b      	ldr	r3, [r7, #0]
     a9e:	881a      	ldrh	r2, [r3, #0]
     aa0:	68bb      	ldr	r3, [r7, #8]
     aa2:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     aa4:	683b      	ldr	r3, [r7, #0]
     aa6:	789b      	ldrb	r3, [r3, #2]
     aa8:	2b00      	cmp	r3, #0
     aaa:	d03a      	beq.n	b22 <_rtc_count_set_config+0x96>
     aac:	2b01      	cmp	r3, #1
     aae:	d000      	beq.n	ab2 <_rtc_count_set_config+0x26>
     ab0:	e06c      	b.n	b8c <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     ab2:	68bb      	ldr	r3, [r7, #8]
     ab4:	881b      	ldrh	r3, [r3, #0]
     ab6:	b29a      	uxth	r2, r3
     ab8:	68bb      	ldr	r3, [r7, #8]
     aba:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     abc:	683b      	ldr	r3, [r7, #0]
     abe:	78db      	ldrb	r3, [r3, #3]
     ac0:	2b00      	cmp	r3, #0
     ac2:	d007      	beq.n	ad4 <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     ac4:	68bb      	ldr	r3, [r7, #8]
     ac6:	881b      	ldrh	r3, [r3, #0]
     ac8:	b29b      	uxth	r3, r3
     aca:	2280      	movs	r2, #128	; 0x80
     acc:	4313      	orrs	r3, r2
     ace:	b29a      	uxth	r2, r3
     ad0:	68bb      	ldr	r3, [r7, #8]
     ad2:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     ad4:	230f      	movs	r3, #15
     ad6:	18fb      	adds	r3, r7, r3
     ad8:	2200      	movs	r2, #0
     ada:	701a      	strb	r2, [r3, #0]
     adc:	e01b      	b.n	b16 <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
     ade:	46c0      	nop			; (mov r8, r8)
     ae0:	687b      	ldr	r3, [r7, #4]
     ae2:	0018      	movs	r0, r3
     ae4:	4b33      	ldr	r3, [pc, #204]	; (bb4 <_rtc_count_set_config+0x128>)
     ae6:	4798      	blx	r3
     ae8:	1e03      	subs	r3, r0, #0
     aea:	d1f9      	bne.n	ae0 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     aec:	230f      	movs	r3, #15
     aee:	18fb      	adds	r3, r7, r3
     af0:	781a      	ldrb	r2, [r3, #0]
     af2:	683b      	ldr	r3, [r7, #0]
     af4:	3202      	adds	r2, #2
     af6:	0092      	lsls	r2, r2, #2
     af8:	58d1      	ldr	r1, [r2, r3]
     afa:	230f      	movs	r3, #15
     afc:	18fb      	adds	r3, r7, r3
     afe:	781a      	ldrb	r2, [r3, #0]
     b00:	687b      	ldr	r3, [r7, #4]
     b02:	0018      	movs	r0, r3
     b04:	4b2c      	ldr	r3, [pc, #176]	; (bb8 <_rtc_count_set_config+0x12c>)
     b06:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     b08:	230f      	movs	r3, #15
     b0a:	18fb      	adds	r3, r7, r3
     b0c:	781a      	ldrb	r2, [r3, #0]
     b0e:	230f      	movs	r3, #15
     b10:	18fb      	adds	r3, r7, r3
     b12:	3201      	adds	r2, #1
     b14:	701a      	strb	r2, [r3, #0]
     b16:	230f      	movs	r3, #15
     b18:	18fb      	adds	r3, r7, r3
     b1a:	781b      	ldrb	r3, [r3, #0]
     b1c:	2b00      	cmp	r3, #0
     b1e:	d0de      	beq.n	ade <_rtc_count_set_config+0x52>
						(enum rtc_count_compare)i);
			}
			break;
     b20:	e036      	b.n	b90 <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     b22:	68bb      	ldr	r3, [r7, #8]
     b24:	881b      	ldrh	r3, [r3, #0]
     b26:	b29b      	uxth	r3, r3
     b28:	2204      	movs	r2, #4
     b2a:	4313      	orrs	r3, r2
     b2c:	b29a      	uxth	r2, r3
     b2e:	68bb      	ldr	r3, [r7, #8]
     b30:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     b32:	683b      	ldr	r3, [r7, #0]
     b34:	78db      	ldrb	r3, [r3, #3]
     b36:	2b00      	cmp	r3, #0
     b38:	d001      	beq.n	b3e <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     b3a:	2317      	movs	r3, #23
     b3c:	e036      	b.n	bac <_rtc_count_set_config+0x120>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     b3e:	230e      	movs	r3, #14
     b40:	18fb      	adds	r3, r7, r3
     b42:	2200      	movs	r2, #0
     b44:	701a      	strb	r2, [r3, #0]
     b46:	e01b      	b.n	b80 <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
     b48:	46c0      	nop			; (mov r8, r8)
     b4a:	687b      	ldr	r3, [r7, #4]
     b4c:	0018      	movs	r0, r3
     b4e:	4b19      	ldr	r3, [pc, #100]	; (bb4 <_rtc_count_set_config+0x128>)
     b50:	4798      	blx	r3
     b52:	1e03      	subs	r3, r0, #0
     b54:	d1f9      	bne.n	b4a <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     b56:	230e      	movs	r3, #14
     b58:	18fb      	adds	r3, r7, r3
     b5a:	781a      	ldrb	r2, [r3, #0]
     b5c:	683b      	ldr	r3, [r7, #0]
     b5e:	3202      	adds	r2, #2
     b60:	0092      	lsls	r2, r2, #2
     b62:	58d1      	ldr	r1, [r2, r3]
     b64:	230e      	movs	r3, #14
     b66:	18fb      	adds	r3, r7, r3
     b68:	781a      	ldrb	r2, [r3, #0]
     b6a:	687b      	ldr	r3, [r7, #4]
     b6c:	0018      	movs	r0, r3
     b6e:	4b12      	ldr	r3, [pc, #72]	; (bb8 <_rtc_count_set_config+0x12c>)
     b70:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     b72:	230e      	movs	r3, #14
     b74:	18fb      	adds	r3, r7, r3
     b76:	781a      	ldrb	r2, [r3, #0]
     b78:	230e      	movs	r3, #14
     b7a:	18fb      	adds	r3, r7, r3
     b7c:	3201      	adds	r2, #1
     b7e:	701a      	strb	r2, [r3, #0]
     b80:	230e      	movs	r3, #14
     b82:	18fb      	adds	r3, r7, r3
     b84:	781b      	ldrb	r3, [r3, #0]
     b86:	2b01      	cmp	r3, #1
     b88:	d9de      	bls.n	b48 <_rtc_count_set_config+0xbc>
						(enum rtc_count_compare)i);
			}
			break;
     b8a:	e001      	b.n	b90 <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     b8c:	2317      	movs	r3, #23
     b8e:	e00d      	b.n	bac <_rtc_count_set_config+0x120>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	791b      	ldrb	r3, [r3, #4]
     b94:	2b00      	cmp	r3, #0
     b96:	d008      	beq.n	baa <_rtc_count_set_config+0x11e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     b98:	68bb      	ldr	r3, [r7, #8]
     b9a:	885b      	ldrh	r3, [r3, #2]
     b9c:	b29b      	uxth	r3, r3
     b9e:	2280      	movs	r2, #128	; 0x80
     ba0:	01d2      	lsls	r2, r2, #7
     ba2:	4313      	orrs	r3, r2
     ba4:	b29a      	uxth	r2, r3
     ba6:	68bb      	ldr	r3, [r7, #8]
     ba8:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     baa:	2300      	movs	r3, #0
}
     bac:	0018      	movs	r0, r3
     bae:	46bd      	mov	sp, r7
     bb0:	b004      	add	sp, #16
     bb2:	bd80      	pop	{r7, pc}
     bb4:	000009a5 	.word	0x000009a5
     bb8:	00000d49 	.word	0x00000d49

00000bbc <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     bbc:	b580      	push	{r7, lr}
     bbe:	b086      	sub	sp, #24
     bc0:	af00      	add	r7, sp, #0
     bc2:	60f8      	str	r0, [r7, #12]
     bc4:	60b9      	str	r1, [r7, #8]
     bc6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     bc8:	68fb      	ldr	r3, [r7, #12]
     bca:	68ba      	ldr	r2, [r7, #8]
     bcc:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
     bce:	2120      	movs	r1, #32
     bd0:	2000      	movs	r0, #0
     bd2:	4b17      	ldr	r3, [pc, #92]	; (c30 <rtc_count_init+0x74>)
     bd4:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     bd6:	2314      	movs	r3, #20
     bd8:	18fb      	adds	r3, r7, r3
     bda:	0018      	movs	r0, r3
     bdc:	4b15      	ldr	r3, [pc, #84]	; (c34 <rtc_count_init+0x78>)
     bde:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     be0:	2314      	movs	r3, #20
     be2:	18fb      	adds	r3, r7, r3
     be4:	2202      	movs	r2, #2
     be6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     be8:	2314      	movs	r3, #20
     bea:	18fb      	adds	r3, r7, r3
     bec:	0019      	movs	r1, r3
     bee:	2004      	movs	r0, #4
     bf0:	4b11      	ldr	r3, [pc, #68]	; (c38 <rtc_count_init+0x7c>)
     bf2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     bf4:	2004      	movs	r0, #4
     bf6:	4b11      	ldr	r3, [pc, #68]	; (c3c <rtc_count_init+0x80>)
     bf8:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     bfa:	68fb      	ldr	r3, [r7, #12]
     bfc:	0018      	movs	r0, r3
     bfe:	4b10      	ldr	r3, [pc, #64]	; (c40 <rtc_count_init+0x84>)
     c00:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     c02:	687b      	ldr	r3, [r7, #4]
     c04:	789a      	ldrb	r2, [r3, #2]
     c06:	68fb      	ldr	r3, [r7, #12]
     c08:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
     c0a:	687b      	ldr	r3, [r7, #4]
     c0c:	791a      	ldrb	r2, [r3, #4]
     c0e:	68fb      	ldr	r3, [r7, #12]
     c10:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     c12:	4b0c      	ldr	r3, [pc, #48]	; (c44 <rtc_count_init+0x88>)
     c14:	68fa      	ldr	r2, [r7, #12]
     c16:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     c18:	687a      	ldr	r2, [r7, #4]
     c1a:	68fb      	ldr	r3, [r7, #12]
     c1c:	0011      	movs	r1, r2
     c1e:	0018      	movs	r0, r3
     c20:	4b09      	ldr	r3, [pc, #36]	; (c48 <rtc_count_init+0x8c>)
     c22:	4798      	blx	r3
     c24:	0003      	movs	r3, r0
}
     c26:	0018      	movs	r0, r3
     c28:	46bd      	mov	sp, r7
     c2a:	b006      	add	sp, #24
     c2c:	bd80      	pop	{r7, pc}
     c2e:	46c0      	nop			; (mov r8, r8)
     c30:	00000949 	.word	0x00000949
     c34:	00000931 	.word	0x00000931
     c38:	00001585 	.word	0x00001585
     c3c:	000015c9 	.word	0x000015c9
     c40:	00000a49 	.word	0x00000a49
     c44:	2000010c 	.word	0x2000010c
     c48:	00000a8d 	.word	0x00000a8d

00000c4c <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     c4c:	b580      	push	{r7, lr}
     c4e:	b084      	sub	sp, #16
     c50:	af00      	add	r7, sp, #0
     c52:	6078      	str	r0, [r7, #4]
     c54:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     c56:	687b      	ldr	r3, [r7, #4]
     c58:	681b      	ldr	r3, [r3, #0]
     c5a:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     c5c:	46c0      	nop			; (mov r8, r8)
     c5e:	687b      	ldr	r3, [r7, #4]
     c60:	0018      	movs	r0, r3
     c62:	4b10      	ldr	r3, [pc, #64]	; (ca4 <rtc_count_set_count+0x58>)
     c64:	4798      	blx	r3
     c66:	1e03      	subs	r3, r0, #0
     c68:	d1f9      	bne.n	c5e <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     c6a:	687b      	ldr	r3, [r7, #4]
     c6c:	791b      	ldrb	r3, [r3, #4]
     c6e:	2b00      	cmp	r3, #0
     c70:	d005      	beq.n	c7e <rtc_count_set_count+0x32>
     c72:	2b01      	cmp	r3, #1
     c74:	d10e      	bne.n	c94 <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     c76:	68fb      	ldr	r3, [r7, #12]
     c78:	683a      	ldr	r2, [r7, #0]
     c7a:	611a      	str	r2, [r3, #16]

			break;
     c7c:	e00c      	b.n	c98 <rtc_count_set_count+0x4c>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     c7e:	683b      	ldr	r3, [r7, #0]
     c80:	4a09      	ldr	r2, [pc, #36]	; (ca8 <rtc_count_set_count+0x5c>)
     c82:	4293      	cmp	r3, r2
     c84:	d901      	bls.n	c8a <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     c86:	2317      	movs	r3, #23
     c88:	e007      	b.n	c9a <rtc_count_set_count+0x4e>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     c8a:	683b      	ldr	r3, [r7, #0]
     c8c:	b29a      	uxth	r2, r3
     c8e:	68fb      	ldr	r3, [r7, #12]
     c90:	821a      	strh	r2, [r3, #16]

			break;
     c92:	e001      	b.n	c98 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     c94:	2317      	movs	r3, #23
     c96:	e000      	b.n	c9a <rtc_count_set_count+0x4e>
	}
	return STATUS_OK;
     c98:	2300      	movs	r3, #0
}
     c9a:	0018      	movs	r0, r3
     c9c:	46bd      	mov	sp, r7
     c9e:	b004      	add	sp, #16
     ca0:	bd80      	pop	{r7, pc}
     ca2:	46c0      	nop			; (mov r8, r8)
     ca4:	000009a5 	.word	0x000009a5
     ca8:	0000ffff 	.word	0x0000ffff

00000cac <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     cac:	b580      	push	{r7, lr}
     cae:	b084      	sub	sp, #16
     cb0:	af00      	add	r7, sp, #0
     cb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	681b      	ldr	r3, [r3, #0]
     cb8:	60bb      	str	r3, [r7, #8]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	795b      	ldrb	r3, [r3, #5]
     cbe:	2201      	movs	r2, #1
     cc0:	4053      	eors	r3, r2
     cc2:	b2db      	uxtb	r3, r3
     cc4:	2b00      	cmp	r3, #0
     cc6:	d00a      	beq.n	cde <rtc_count_get_count+0x32>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     cc8:	68bb      	ldr	r3, [r7, #8]
     cca:	4a1c      	ldr	r2, [pc, #112]	; (d3c <rtc_count_get_count+0x90>)
     ccc:	805a      	strh	r2, [r3, #2]

		while (rtc_count_is_syncing(module)) {
     cce:	46c0      	nop			; (mov r8, r8)
     cd0:	687b      	ldr	r3, [r7, #4]
     cd2:	0018      	movs	r0, r3
     cd4:	4b1a      	ldr	r3, [pc, #104]	; (d40 <rtc_count_get_count+0x94>)
     cd6:	4798      	blx	r3
     cd8:	1e03      	subs	r3, r0, #0
     cda:	d1f9      	bne.n	cd0 <rtc_count_get_count+0x24>
     cdc:	e016      	b.n	d0c <rtc_count_get_count+0x60>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE0.READREQ.reg & RTC_READREQ_RCONT)){
     cde:	68bb      	ldr	r3, [r7, #8]
     ce0:	885b      	ldrh	r3, [r3, #2]
     ce2:	b29b      	uxth	r3, r3
     ce4:	001a      	movs	r2, r3
     ce6:	2380      	movs	r3, #128	; 0x80
     ce8:	01db      	lsls	r3, r3, #7
     cea:	4013      	ands	r3, r2
     cec:	d10e      	bne.n	d0c <rtc_count_get_count+0x60>
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
     cee:	68bb      	ldr	r3, [r7, #8]
     cf0:	885b      	ldrh	r3, [r3, #2]
     cf2:	b29b      	uxth	r3, r3
     cf4:	4a13      	ldr	r2, [pc, #76]	; (d44 <rtc_count_get_count+0x98>)
     cf6:	4313      	orrs	r3, r2
     cf8:	b29a      	uxth	r2, r3
     cfa:	68bb      	ldr	r3, [r7, #8]
     cfc:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_count_is_syncing(module)) {
     cfe:	46c0      	nop			; (mov r8, r8)
     d00:	687b      	ldr	r3, [r7, #4]
     d02:	0018      	movs	r0, r3
     d04:	4b0e      	ldr	r3, [pc, #56]	; (d40 <rtc_count_get_count+0x94>)
     d06:	4798      	blx	r3
     d08:	1e03      	subs	r3, r0, #0
     d0a:	d1f9      	bne.n	d00 <rtc_count_get_count+0x54>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     d0c:	687b      	ldr	r3, [r7, #4]
     d0e:	791b      	ldrb	r3, [r3, #4]
     d10:	2b00      	cmp	r3, #0
     d12:	d005      	beq.n	d20 <rtc_count_get_count+0x74>
     d14:	2b01      	cmp	r3, #1
     d16:	d108      	bne.n	d2a <rtc_count_get_count+0x7e>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     d18:	68bb      	ldr	r3, [r7, #8]
     d1a:	691b      	ldr	r3, [r3, #16]
     d1c:	60fb      	str	r3, [r7, #12]

			break;
     d1e:	e007      	b.n	d30 <rtc_count_get_count+0x84>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     d20:	68bb      	ldr	r3, [r7, #8]
     d22:	8a1b      	ldrh	r3, [r3, #16]
     d24:	b29b      	uxth	r3, r3
     d26:	60fb      	str	r3, [r7, #12]

			break;
     d28:	e002      	b.n	d30 <rtc_count_get_count+0x84>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     d2a:	2300      	movs	r3, #0
     d2c:	60fb      	str	r3, [r7, #12]
			break;
     d2e:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     d30:	68fb      	ldr	r3, [r7, #12]
}
     d32:	0018      	movs	r0, r3
     d34:	46bd      	mov	sp, r7
     d36:	b004      	add	sp, #16
     d38:	bd80      	pop	{r7, pc}
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	ffff8000 	.word	0xffff8000
     d40:	000009a5 	.word	0x000009a5
     d44:	ffffc000 	.word	0xffffc000

00000d48 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     d48:	b580      	push	{r7, lr}
     d4a:	b086      	sub	sp, #24
     d4c:	af00      	add	r7, sp, #0
     d4e:	60f8      	str	r0, [r7, #12]
     d50:	60b9      	str	r1, [r7, #8]
     d52:	1dfb      	adds	r3, r7, #7
     d54:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d56:	68fb      	ldr	r3, [r7, #12]
     d58:	681b      	ldr	r3, [r3, #0]
     d5a:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     d5c:	46c0      	nop			; (mov r8, r8)
     d5e:	68fb      	ldr	r3, [r7, #12]
     d60:	0018      	movs	r0, r3
     d62:	4b1a      	ldr	r3, [pc, #104]	; (dcc <rtc_count_set_compare+0x84>)
     d64:	4798      	blx	r3
     d66:	1e03      	subs	r3, r0, #0
     d68:	d1f9      	bne.n	d5e <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     d6a:	68fb      	ldr	r3, [r7, #12]
     d6c:	791b      	ldrb	r3, [r3, #4]
     d6e:	2b00      	cmp	r3, #0
     d70:	d00f      	beq.n	d92 <rtc_count_set_compare+0x4a>
     d72:	2b01      	cmp	r3, #1
     d74:	d122      	bne.n	dbc <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     d76:	1dfb      	adds	r3, r7, #7
     d78:	781b      	ldrb	r3, [r3, #0]
     d7a:	2b01      	cmp	r3, #1
     d7c:	d901      	bls.n	d82 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     d7e:	2317      	movs	r3, #23
     d80:	e01f      	b.n	dc2 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     d82:	1dfb      	adds	r3, r7, #7
     d84:	781a      	ldrb	r2, [r3, #0]
     d86:	697b      	ldr	r3, [r7, #20]
     d88:	3206      	adds	r2, #6
     d8a:	0092      	lsls	r2, r2, #2
     d8c:	68b9      	ldr	r1, [r7, #8]
     d8e:	50d1      	str	r1, [r2, r3]

			break;
     d90:	e016      	b.n	dc0 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     d92:	1dfb      	adds	r3, r7, #7
     d94:	781b      	ldrb	r3, [r3, #0]
     d96:	2b02      	cmp	r3, #2
     d98:	d901      	bls.n	d9e <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     d9a:	2317      	movs	r3, #23
     d9c:	e011      	b.n	dc2 <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     d9e:	68bb      	ldr	r3, [r7, #8]
     da0:	4a0b      	ldr	r2, [pc, #44]	; (dd0 <rtc_count_set_compare+0x88>)
     da2:	4293      	cmp	r3, r2
     da4:	d901      	bls.n	daa <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     da6:	2317      	movs	r3, #23
     da8:	e00b      	b.n	dc2 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     daa:	1dfb      	adds	r3, r7, #7
     dac:	781a      	ldrb	r2, [r3, #0]
     dae:	68bb      	ldr	r3, [r7, #8]
     db0:	b299      	uxth	r1, r3
     db2:	697b      	ldr	r3, [r7, #20]
     db4:	320c      	adds	r2, #12
     db6:	0052      	lsls	r2, r2, #1
     db8:	52d1      	strh	r1, [r2, r3]

			break;
     dba:	e001      	b.n	dc0 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     dbc:	231a      	movs	r3, #26
     dbe:	e000      	b.n	dc2 <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     dc0:	2300      	movs	r3, #0
}
     dc2:	0018      	movs	r0, r3
     dc4:	46bd      	mov	sp, r7
     dc6:	b006      	add	sp, #24
     dc8:	bd80      	pop	{r7, pc}
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	000009a5 	.word	0x000009a5
     dd0:	0000ffff 	.word	0x0000ffff

00000dd4 <system_gclk_gen_get_config_defaults>:
{
     dd4:	b580      	push	{r7, lr}
     dd6:	b082      	sub	sp, #8
     dd8:	af00      	add	r7, sp, #0
     dda:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
     ddc:	687b      	ldr	r3, [r7, #4]
     dde:	2201      	movs	r2, #1
     de0:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
     de2:	687b      	ldr	r3, [r7, #4]
     de4:	2200      	movs	r2, #0
     de6:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	2206      	movs	r2, #6
     dec:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
     dee:	687b      	ldr	r3, [r7, #4]
     df0:	2200      	movs	r2, #0
     df2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
     df4:	687b      	ldr	r3, [r7, #4]
     df6:	2200      	movs	r2, #0
     df8:	725a      	strb	r2, [r3, #9]
}
     dfa:	46c0      	nop			; (mov r8, r8)
     dfc:	46bd      	mov	sp, r7
     dfe:	b002      	add	sp, #8
     e00:	bd80      	pop	{r7, pc}

00000e02 <system_clock_source_osc8m_get_config_defaults>:
{
     e02:	b580      	push	{r7, lr}
     e04:	b082      	sub	sp, #8
     e06:	af00      	add	r7, sp, #0
     e08:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
     e0a:	687b      	ldr	r3, [r7, #4]
     e0c:	2203      	movs	r2, #3
     e0e:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
     e10:	687b      	ldr	r3, [r7, #4]
     e12:	2200      	movs	r2, #0
     e14:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	2201      	movs	r2, #1
     e1a:	709a      	strb	r2, [r3, #2]
}
     e1c:	46c0      	nop			; (mov r8, r8)
     e1e:	46bd      	mov	sp, r7
     e20:	b002      	add	sp, #8
     e22:	bd80      	pop	{r7, pc}

00000e24 <system_cpu_clock_set_divider>:
{
     e24:	b580      	push	{r7, lr}
     e26:	b082      	sub	sp, #8
     e28:	af00      	add	r7, sp, #0
     e2a:	0002      	movs	r2, r0
     e2c:	1dfb      	adds	r3, r7, #7
     e2e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
     e30:	4a03      	ldr	r2, [pc, #12]	; (e40 <system_cpu_clock_set_divider+0x1c>)
     e32:	1dfb      	adds	r3, r7, #7
     e34:	781b      	ldrb	r3, [r3, #0]
     e36:	7213      	strb	r3, [r2, #8]
}
     e38:	46c0      	nop			; (mov r8, r8)
     e3a:	46bd      	mov	sp, r7
     e3c:	b002      	add	sp, #8
     e3e:	bd80      	pop	{r7, pc}
     e40:	40000400 	.word	0x40000400

00000e44 <system_apb_clock_set_divider>:
{
     e44:	b580      	push	{r7, lr}
     e46:	b082      	sub	sp, #8
     e48:	af00      	add	r7, sp, #0
     e4a:	0002      	movs	r2, r0
     e4c:	1dfb      	adds	r3, r7, #7
     e4e:	701a      	strb	r2, [r3, #0]
     e50:	1dbb      	adds	r3, r7, #6
     e52:	1c0a      	adds	r2, r1, #0
     e54:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     e56:	1dfb      	adds	r3, r7, #7
     e58:	781b      	ldrb	r3, [r3, #0]
     e5a:	2b01      	cmp	r3, #1
     e5c:	d008      	beq.n	e70 <system_apb_clock_set_divider+0x2c>
     e5e:	2b02      	cmp	r3, #2
     e60:	d00b      	beq.n	e7a <system_apb_clock_set_divider+0x36>
     e62:	2b00      	cmp	r3, #0
     e64:	d10e      	bne.n	e84 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
     e66:	4a0b      	ldr	r2, [pc, #44]	; (e94 <system_apb_clock_set_divider+0x50>)
     e68:	1dbb      	adds	r3, r7, #6
     e6a:	781b      	ldrb	r3, [r3, #0]
     e6c:	7253      	strb	r3, [r2, #9]
			break;
     e6e:	e00b      	b.n	e88 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
     e70:	4a08      	ldr	r2, [pc, #32]	; (e94 <system_apb_clock_set_divider+0x50>)
     e72:	1dbb      	adds	r3, r7, #6
     e74:	781b      	ldrb	r3, [r3, #0]
     e76:	7293      	strb	r3, [r2, #10]
			break;
     e78:	e006      	b.n	e88 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
     e7a:	4a06      	ldr	r2, [pc, #24]	; (e94 <system_apb_clock_set_divider+0x50>)
     e7c:	1dbb      	adds	r3, r7, #6
     e7e:	781b      	ldrb	r3, [r3, #0]
     e80:	72d3      	strb	r3, [r2, #11]
			break;
     e82:	e001      	b.n	e88 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
     e84:	2317      	movs	r3, #23
     e86:	e000      	b.n	e8a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
     e88:	2300      	movs	r3, #0
}
     e8a:	0018      	movs	r0, r3
     e8c:	46bd      	mov	sp, r7
     e8e:	b002      	add	sp, #8
     e90:	bd80      	pop	{r7, pc}
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	40000400 	.word	0x40000400

00000e98 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
     e98:	b580      	push	{r7, lr}
     e9a:	b082      	sub	sp, #8
     e9c:	af00      	add	r7, sp, #0
     e9e:	0002      	movs	r2, r0
     ea0:	1dfb      	adds	r3, r7, #7
     ea2:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     ea4:	4a08      	ldr	r2, [pc, #32]	; (ec8 <system_flash_set_waitstates+0x30>)
     ea6:	1dfb      	adds	r3, r7, #7
     ea8:	781b      	ldrb	r3, [r3, #0]
     eaa:	210f      	movs	r1, #15
     eac:	400b      	ands	r3, r1
     eae:	b2d9      	uxtb	r1, r3
     eb0:	6853      	ldr	r3, [r2, #4]
     eb2:	200f      	movs	r0, #15
     eb4:	4001      	ands	r1, r0
     eb6:	0049      	lsls	r1, r1, #1
     eb8:	201e      	movs	r0, #30
     eba:	4383      	bics	r3, r0
     ebc:	430b      	orrs	r3, r1
     ebe:	6053      	str	r3, [r2, #4]
}
     ec0:	46c0      	nop			; (mov r8, r8)
     ec2:	46bd      	mov	sp, r7
     ec4:	b002      	add	sp, #8
     ec6:	bd80      	pop	{r7, pc}
     ec8:	41004000 	.word	0x41004000

00000ecc <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
     ecc:	b580      	push	{r7, lr}
     ece:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     ed0:	46c0      	nop			; (mov r8, r8)
     ed2:	4b04      	ldr	r3, [pc, #16]	; (ee4 <_system_dfll_wait_for_sync+0x18>)
     ed4:	68db      	ldr	r3, [r3, #12]
     ed6:	2210      	movs	r2, #16
     ed8:	4013      	ands	r3, r2
     eda:	d0fa      	beq.n	ed2 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
     edc:	46c0      	nop			; (mov r8, r8)
     ede:	46bd      	mov	sp, r7
     ee0:	bd80      	pop	{r7, pc}
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	40000800 	.word	0x40000800

00000ee8 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
     ee8:	b580      	push	{r7, lr}
     eea:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     eec:	4b0c      	ldr	r3, [pc, #48]	; (f20 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     eee:	2202      	movs	r2, #2
     ef0:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
     ef2:	4b0c      	ldr	r3, [pc, #48]	; (f24 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
     ef4:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     ef6:	4a0a      	ldr	r2, [pc, #40]	; (f20 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     ef8:	4b0b      	ldr	r3, [pc, #44]	; (f28 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
     efa:	689b      	ldr	r3, [r3, #8]
     efc:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     efe:	4a08      	ldr	r2, [pc, #32]	; (f20 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     f00:	4b09      	ldr	r3, [pc, #36]	; (f28 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
     f02:	685b      	ldr	r3, [r3, #4]
     f04:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
     f06:	4b06      	ldr	r3, [pc, #24]	; (f20 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     f08:	2200      	movs	r2, #0
     f0a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
     f0c:	4b05      	ldr	r3, [pc, #20]	; (f24 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
     f0e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     f10:	4a03      	ldr	r2, [pc, #12]	; (f20 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     f12:	4b05      	ldr	r3, [pc, #20]	; (f28 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
     f14:	681b      	ldr	r3, [r3, #0]
     f16:	b29b      	uxth	r3, r3
     f18:	8493      	strh	r3, [r2, #36]	; 0x24
}
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	46bd      	mov	sp, r7
     f1e:	bd80      	pop	{r7, pc}
     f20:	40000800 	.word	0x40000800
     f24:	00000ecd 	.word	0x00000ecd
     f28:	20000094 	.word	0x20000094

00000f2c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     f2c:	b580      	push	{r7, lr}
     f2e:	b082      	sub	sp, #8
     f30:	af00      	add	r7, sp, #0
     f32:	0002      	movs	r2, r0
     f34:	1dfb      	adds	r3, r7, #7
     f36:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
     f38:	1dfb      	adds	r3, r7, #7
     f3a:	781b      	ldrb	r3, [r3, #0]
     f3c:	2b08      	cmp	r3, #8
     f3e:	d841      	bhi.n	fc4 <system_clock_source_get_hz+0x98>
     f40:	009a      	lsls	r2, r3, #2
     f42:	4b23      	ldr	r3, [pc, #140]	; (fd0 <system_clock_source_get_hz+0xa4>)
     f44:	18d3      	adds	r3, r2, r3
     f46:	681b      	ldr	r3, [r3, #0]
     f48:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     f4a:	4b22      	ldr	r3, [pc, #136]	; (fd4 <system_clock_source_get_hz+0xa8>)
     f4c:	691b      	ldr	r3, [r3, #16]
     f4e:	e03a      	b.n	fc6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     f50:	4b21      	ldr	r3, [pc, #132]	; (fd8 <system_clock_source_get_hz+0xac>)
     f52:	6a1b      	ldr	r3, [r3, #32]
     f54:	059b      	lsls	r3, r3, #22
     f56:	0f9b      	lsrs	r3, r3, #30
     f58:	b2db      	uxtb	r3, r3
     f5a:	001a      	movs	r2, r3
     f5c:	4b1f      	ldr	r3, [pc, #124]	; (fdc <system_clock_source_get_hz+0xb0>)
     f5e:	40d3      	lsrs	r3, r2
     f60:	e031      	b.n	fc6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     f62:	2380      	movs	r3, #128	; 0x80
     f64:	021b      	lsls	r3, r3, #8
     f66:	e02e      	b.n	fc6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
     f68:	2380      	movs	r3, #128	; 0x80
     f6a:	021b      	lsls	r3, r3, #8
     f6c:	e02b      	b.n	fc6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     f6e:	4b19      	ldr	r3, [pc, #100]	; (fd4 <system_clock_source_get_hz+0xa8>)
     f70:	695b      	ldr	r3, [r3, #20]
     f72:	e028      	b.n	fc6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f74:	4b17      	ldr	r3, [pc, #92]	; (fd4 <system_clock_source_get_hz+0xa8>)
     f76:	681b      	ldr	r3, [r3, #0]
     f78:	2202      	movs	r2, #2
     f7a:	4013      	ands	r3, r2
     f7c:	d101      	bne.n	f82 <system_clock_source_get_hz+0x56>
			return 0;
     f7e:	2300      	movs	r3, #0
     f80:	e021      	b.n	fc6 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
     f82:	4b17      	ldr	r3, [pc, #92]	; (fe0 <system_clock_source_get_hz+0xb4>)
     f84:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
     f86:	4b13      	ldr	r3, [pc, #76]	; (fd4 <system_clock_source_get_hz+0xa8>)
     f88:	681b      	ldr	r3, [r3, #0]
     f8a:	2224      	movs	r2, #36	; 0x24
     f8c:	4013      	ands	r3, r2
     f8e:	2b04      	cmp	r3, #4
     f90:	d109      	bne.n	fa6 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f92:	2000      	movs	r0, #0
     f94:	4b13      	ldr	r3, [pc, #76]	; (fe4 <system_clock_source_get_hz+0xb8>)
     f96:	4798      	blx	r3
     f98:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
     f9a:	4b0e      	ldr	r3, [pc, #56]	; (fd4 <system_clock_source_get_hz+0xa8>)
     f9c:	689b      	ldr	r3, [r3, #8]
     f9e:	041b      	lsls	r3, r3, #16
     fa0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     fa2:	4353      	muls	r3, r2
     fa4:	e00f      	b.n	fc6 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
     fa6:	4b10      	ldr	r3, [pc, #64]	; (fe8 <system_clock_source_get_hz+0xbc>)
     fa8:	e00d      	b.n	fc6 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     faa:	4a0b      	ldr	r2, [pc, #44]	; (fd8 <system_clock_source_get_hz+0xac>)
     fac:	2350      	movs	r3, #80	; 0x50
     fae:	5cd3      	ldrb	r3, [r2, r3]
     fb0:	b2db      	uxtb	r3, r3
     fb2:	001a      	movs	r2, r3
     fb4:	2304      	movs	r3, #4
     fb6:	4013      	ands	r3, r2
     fb8:	d101      	bne.n	fbe <system_clock_source_get_hz+0x92>
			return 0;
     fba:	2300      	movs	r3, #0
     fbc:	e003      	b.n	fc6 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
     fbe:	4b05      	ldr	r3, [pc, #20]	; (fd4 <system_clock_source_get_hz+0xa8>)
     fc0:	68db      	ldr	r3, [r3, #12]
     fc2:	e000      	b.n	fc6 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
     fc4:	2300      	movs	r3, #0
	}
}
     fc6:	0018      	movs	r0, r3
     fc8:	46bd      	mov	sp, r7
     fca:	b002      	add	sp, #8
     fcc:	bd80      	pop	{r7, pc}
     fce:	46c0      	nop			; (mov r8, r8)
     fd0:	00004a28 	.word	0x00004a28
     fd4:	20000094 	.word	0x20000094
     fd8:	40000800 	.word	0x40000800
     fdc:	007a1200 	.word	0x007a1200
     fe0:	00000ecd 	.word	0x00000ecd
     fe4:	000016a9 	.word	0x000016a9
     fe8:	02dc6c00 	.word	0x02dc6c00

00000fec <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     fec:	b580      	push	{r7, lr}
     fee:	b084      	sub	sp, #16
     ff0:	af00      	add	r7, sp, #0
     ff2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     ff4:	4b1a      	ldr	r3, [pc, #104]	; (1060 <system_clock_source_osc8m_set_config+0x74>)
     ff6:	6a1b      	ldr	r3, [r3, #32]
     ff8:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     ffa:	687b      	ldr	r3, [r7, #4]
     ffc:	781b      	ldrb	r3, [r3, #0]
     ffe:	1c1a      	adds	r2, r3, #0
    1000:	2303      	movs	r3, #3
    1002:	4013      	ands	r3, r2
    1004:	b2da      	uxtb	r2, r3
    1006:	230d      	movs	r3, #13
    1008:	18fb      	adds	r3, r7, r3
    100a:	2103      	movs	r1, #3
    100c:	400a      	ands	r2, r1
    100e:	0010      	movs	r0, r2
    1010:	781a      	ldrb	r2, [r3, #0]
    1012:	2103      	movs	r1, #3
    1014:	438a      	bics	r2, r1
    1016:	1c11      	adds	r1, r2, #0
    1018:	1c02      	adds	r2, r0, #0
    101a:	430a      	orrs	r2, r1
    101c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	789a      	ldrb	r2, [r3, #2]
    1022:	230c      	movs	r3, #12
    1024:	18fb      	adds	r3, r7, r3
    1026:	01d0      	lsls	r0, r2, #7
    1028:	781a      	ldrb	r2, [r3, #0]
    102a:	217f      	movs	r1, #127	; 0x7f
    102c:	400a      	ands	r2, r1
    102e:	1c11      	adds	r1, r2, #0
    1030:	1c02      	adds	r2, r0, #0
    1032:	430a      	orrs	r2, r1
    1034:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1036:	687b      	ldr	r3, [r7, #4]
    1038:	785a      	ldrb	r2, [r3, #1]
    103a:	230c      	movs	r3, #12
    103c:	18fb      	adds	r3, r7, r3
    103e:	2101      	movs	r1, #1
    1040:	400a      	ands	r2, r1
    1042:	0190      	lsls	r0, r2, #6
    1044:	781a      	ldrb	r2, [r3, #0]
    1046:	2140      	movs	r1, #64	; 0x40
    1048:	438a      	bics	r2, r1
    104a:	1c11      	adds	r1, r2, #0
    104c:	1c02      	adds	r2, r0, #0
    104e:	430a      	orrs	r2, r1
    1050:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    1052:	4b03      	ldr	r3, [pc, #12]	; (1060 <system_clock_source_osc8m_set_config+0x74>)
    1054:	68fa      	ldr	r2, [r7, #12]
    1056:	621a      	str	r2, [r3, #32]
}
    1058:	46c0      	nop			; (mov r8, r8)
    105a:	46bd      	mov	sp, r7
    105c:	b004      	add	sp, #16
    105e:	bd80      	pop	{r7, pc}
    1060:	40000800 	.word	0x40000800

00001064 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1064:	b580      	push	{r7, lr}
    1066:	b082      	sub	sp, #8
    1068:	af00      	add	r7, sp, #0
    106a:	0002      	movs	r2, r0
    106c:	1dfb      	adds	r3, r7, #7
    106e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1070:	1dfb      	adds	r3, r7, #7
    1072:	781b      	ldrb	r3, [r3, #0]
    1074:	2b08      	cmp	r3, #8
    1076:	d83b      	bhi.n	10f0 <system_clock_source_enable+0x8c>
    1078:	009a      	lsls	r2, r3, #2
    107a:	4b21      	ldr	r3, [pc, #132]	; (1100 <system_clock_source_enable+0x9c>)
    107c:	18d3      	adds	r3, r2, r3
    107e:	681b      	ldr	r3, [r3, #0]
    1080:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1082:	4b20      	ldr	r3, [pc, #128]	; (1104 <system_clock_source_enable+0xa0>)
    1084:	4a1f      	ldr	r2, [pc, #124]	; (1104 <system_clock_source_enable+0xa0>)
    1086:	6a12      	ldr	r2, [r2, #32]
    1088:	2102      	movs	r1, #2
    108a:	430a      	orrs	r2, r1
    108c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    108e:	2300      	movs	r3, #0
    1090:	e031      	b.n	10f6 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1092:	4b1c      	ldr	r3, [pc, #112]	; (1104 <system_clock_source_enable+0xa0>)
    1094:	4a1b      	ldr	r2, [pc, #108]	; (1104 <system_clock_source_enable+0xa0>)
    1096:	6992      	ldr	r2, [r2, #24]
    1098:	2102      	movs	r1, #2
    109a:	430a      	orrs	r2, r1
    109c:	619a      	str	r2, [r3, #24]
		break;
    109e:	e029      	b.n	10f4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    10a0:	4a18      	ldr	r2, [pc, #96]	; (1104 <system_clock_source_enable+0xa0>)
    10a2:	4b18      	ldr	r3, [pc, #96]	; (1104 <system_clock_source_enable+0xa0>)
    10a4:	8a1b      	ldrh	r3, [r3, #16]
    10a6:	b29b      	uxth	r3, r3
    10a8:	2102      	movs	r1, #2
    10aa:	430b      	orrs	r3, r1
    10ac:	b29b      	uxth	r3, r3
    10ae:	8213      	strh	r3, [r2, #16]
		break;
    10b0:	e020      	b.n	10f4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    10b2:	4a14      	ldr	r2, [pc, #80]	; (1104 <system_clock_source_enable+0xa0>)
    10b4:	4b13      	ldr	r3, [pc, #76]	; (1104 <system_clock_source_enable+0xa0>)
    10b6:	8a9b      	ldrh	r3, [r3, #20]
    10b8:	b29b      	uxth	r3, r3
    10ba:	2102      	movs	r1, #2
    10bc:	430b      	orrs	r3, r1
    10be:	b29b      	uxth	r3, r3
    10c0:	8293      	strh	r3, [r2, #20]
		break;
    10c2:	e017      	b.n	10f4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    10c4:	4b10      	ldr	r3, [pc, #64]	; (1108 <system_clock_source_enable+0xa4>)
    10c6:	681b      	ldr	r3, [r3, #0]
    10c8:	2202      	movs	r2, #2
    10ca:	431a      	orrs	r2, r3
    10cc:	4b0e      	ldr	r3, [pc, #56]	; (1108 <system_clock_source_enable+0xa4>)
    10ce:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    10d0:	4b0e      	ldr	r3, [pc, #56]	; (110c <system_clock_source_enable+0xa8>)
    10d2:	4798      	blx	r3
		break;
    10d4:	e00e      	b.n	10f4 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    10d6:	4a0b      	ldr	r2, [pc, #44]	; (1104 <system_clock_source_enable+0xa0>)
    10d8:	490a      	ldr	r1, [pc, #40]	; (1104 <system_clock_source_enable+0xa0>)
    10da:	2344      	movs	r3, #68	; 0x44
    10dc:	5ccb      	ldrb	r3, [r1, r3]
    10de:	b2db      	uxtb	r3, r3
    10e0:	2102      	movs	r1, #2
    10e2:	430b      	orrs	r3, r1
    10e4:	b2d9      	uxtb	r1, r3
    10e6:	2344      	movs	r3, #68	; 0x44
    10e8:	54d1      	strb	r1, [r2, r3]
		break;
    10ea:	e003      	b.n	10f4 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    10ec:	2300      	movs	r3, #0
    10ee:	e002      	b.n	10f6 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    10f0:	2317      	movs	r3, #23
    10f2:	e000      	b.n	10f6 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    10f4:	2300      	movs	r3, #0
}
    10f6:	0018      	movs	r0, r3
    10f8:	46bd      	mov	sp, r7
    10fa:	b002      	add	sp, #8
    10fc:	bd80      	pop	{r7, pc}
    10fe:	46c0      	nop			; (mov r8, r8)
    1100:	00004a4c 	.word	0x00004a4c
    1104:	40000800 	.word	0x40000800
    1108:	20000094 	.word	0x20000094
    110c:	00000ee9 	.word	0x00000ee9

00001110 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1110:	b580      	push	{r7, lr}
    1112:	b082      	sub	sp, #8
    1114:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1116:	003b      	movs	r3, r7
    1118:	2201      	movs	r2, #1
    111a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    111c:	2300      	movs	r3, #0
    111e:	607b      	str	r3, [r7, #4]
    1120:	e009      	b.n	1136 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1122:	687b      	ldr	r3, [r7, #4]
    1124:	b2db      	uxtb	r3, r3
    1126:	003a      	movs	r2, r7
    1128:	0011      	movs	r1, r2
    112a:	0018      	movs	r0, r3
    112c:	4b05      	ldr	r3, [pc, #20]	; (1144 <_switch_peripheral_gclk+0x34>)
    112e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1130:	687b      	ldr	r3, [r7, #4]
    1132:	3301      	adds	r3, #1
    1134:	607b      	str	r3, [r7, #4]
    1136:	687b      	ldr	r3, [r7, #4]
    1138:	2b24      	cmp	r3, #36	; 0x24
    113a:	d9f2      	bls.n	1122 <_switch_peripheral_gclk+0x12>
	}
}
    113c:	46c0      	nop			; (mov r8, r8)
    113e:	46bd      	mov	sp, r7
    1140:	b002      	add	sp, #8
    1142:	bd80      	pop	{r7, pc}
    1144:	00001585 	.word	0x00001585

00001148 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1148:	b580      	push	{r7, lr}
    114a:	b0a0      	sub	sp, #128	; 0x80
    114c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    114e:	4b36      	ldr	r3, [pc, #216]	; (1228 <system_clock_init+0xe0>)
    1150:	22c2      	movs	r2, #194	; 0xc2
    1152:	00d2      	lsls	r2, r2, #3
    1154:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    1156:	2003      	movs	r0, #3
    1158:	4b34      	ldr	r3, [pc, #208]	; (122c <system_clock_init+0xe4>)
    115a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    115c:	4b34      	ldr	r3, [pc, #208]	; (1230 <system_clock_init+0xe8>)
    115e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    1160:	237c      	movs	r3, #124	; 0x7c
    1162:	18fb      	adds	r3, r7, r3
    1164:	0018      	movs	r0, r3
    1166:	4b33      	ldr	r3, [pc, #204]	; (1234 <system_clock_init+0xec>)
    1168:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    116a:	237c      	movs	r3, #124	; 0x7c
    116c:	18fb      	adds	r3, r7, r3
    116e:	2200      	movs	r2, #0
    1170:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1172:	237c      	movs	r3, #124	; 0x7c
    1174:	18fb      	adds	r3, r7, r3
    1176:	2201      	movs	r2, #1
    1178:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    117a:	237c      	movs	r3, #124	; 0x7c
    117c:	18fb      	adds	r3, r7, r3
    117e:	2200      	movs	r2, #0
    1180:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1182:	237c      	movs	r3, #124	; 0x7c
    1184:	18fb      	adds	r3, r7, r3
    1186:	0018      	movs	r0, r3
    1188:	4b2b      	ldr	r3, [pc, #172]	; (1238 <system_clock_init+0xf0>)
    118a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    118c:	2006      	movs	r0, #6
    118e:	4b2b      	ldr	r3, [pc, #172]	; (123c <system_clock_init+0xf4>)
    1190:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1192:	4b2b      	ldr	r3, [pc, #172]	; (1240 <system_clock_init+0xf8>)
    1194:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1196:	2358      	movs	r3, #88	; 0x58
    1198:	18fb      	adds	r3, r7, r3
    119a:	0018      	movs	r0, r3
    119c:	4b29      	ldr	r3, [pc, #164]	; (1244 <system_clock_init+0xfc>)
    119e:	4798      	blx	r3
    11a0:	2358      	movs	r3, #88	; 0x58
    11a2:	18fb      	adds	r3, r7, r3
    11a4:	2204      	movs	r2, #4
    11a6:	701a      	strb	r2, [r3, #0]
    11a8:	2358      	movs	r3, #88	; 0x58
    11aa:	18fb      	adds	r3, r7, r3
    11ac:	2220      	movs	r2, #32
    11ae:	605a      	str	r2, [r3, #4]
    11b0:	2358      	movs	r3, #88	; 0x58
    11b2:	18fb      	adds	r3, r7, r3
    11b4:	2200      	movs	r2, #0
    11b6:	721a      	strb	r2, [r3, #8]
    11b8:	2358      	movs	r3, #88	; 0x58
    11ba:	18fb      	adds	r3, r7, r3
    11bc:	2200      	movs	r2, #0
    11be:	725a      	strb	r2, [r3, #9]
    11c0:	2358      	movs	r3, #88	; 0x58
    11c2:	18fb      	adds	r3, r7, r3
    11c4:	0019      	movs	r1, r3
    11c6:	2002      	movs	r0, #2
    11c8:	4b1f      	ldr	r3, [pc, #124]	; (1248 <system_clock_init+0x100>)
    11ca:	4798      	blx	r3
    11cc:	2002      	movs	r0, #2
    11ce:	4b1f      	ldr	r3, [pc, #124]	; (124c <system_clock_init+0x104>)
    11d0:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    11d2:	2000      	movs	r0, #0
    11d4:	4b1e      	ldr	r3, [pc, #120]	; (1250 <system_clock_init+0x108>)
    11d6:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    11d8:	2100      	movs	r1, #0
    11da:	2000      	movs	r0, #0
    11dc:	4b1d      	ldr	r3, [pc, #116]	; (1254 <system_clock_init+0x10c>)
    11de:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    11e0:	2100      	movs	r1, #0
    11e2:	2001      	movs	r0, #1
    11e4:	4b1b      	ldr	r3, [pc, #108]	; (1254 <system_clock_init+0x10c>)
    11e6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    11e8:	2100      	movs	r1, #0
    11ea:	2002      	movs	r0, #2
    11ec:	4b19      	ldr	r3, [pc, #100]	; (1254 <system_clock_init+0x10c>)
    11ee:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    11f0:	1d3b      	adds	r3, r7, #4
    11f2:	0018      	movs	r0, r3
    11f4:	4b13      	ldr	r3, [pc, #76]	; (1244 <system_clock_init+0xfc>)
    11f6:	4798      	blx	r3
    11f8:	1d3b      	adds	r3, r7, #4
    11fa:	2206      	movs	r2, #6
    11fc:	701a      	strb	r2, [r3, #0]
    11fe:	1d3b      	adds	r3, r7, #4
    1200:	2201      	movs	r2, #1
    1202:	605a      	str	r2, [r3, #4]
    1204:	1d3b      	adds	r3, r7, #4
    1206:	2200      	movs	r2, #0
    1208:	721a      	strb	r2, [r3, #8]
    120a:	1d3b      	adds	r3, r7, #4
    120c:	2200      	movs	r2, #0
    120e:	725a      	strb	r2, [r3, #9]
    1210:	1d3b      	adds	r3, r7, #4
    1212:	0019      	movs	r1, r3
    1214:	2000      	movs	r0, #0
    1216:	4b0c      	ldr	r3, [pc, #48]	; (1248 <system_clock_init+0x100>)
    1218:	4798      	blx	r3
    121a:	2000      	movs	r0, #0
    121c:	4b0b      	ldr	r3, [pc, #44]	; (124c <system_clock_init+0x104>)
    121e:	4798      	blx	r3
#endif
}
    1220:	46c0      	nop			; (mov r8, r8)
    1222:	46bd      	mov	sp, r7
    1224:	b020      	add	sp, #128	; 0x80
    1226:	bd80      	pop	{r7, pc}
    1228:	40000800 	.word	0x40000800
    122c:	00000e99 	.word	0x00000e99
    1230:	00001111 	.word	0x00001111
    1234:	00000e03 	.word	0x00000e03
    1238:	00000fed 	.word	0x00000fed
    123c:	00001065 	.word	0x00001065
    1240:	000012fd 	.word	0x000012fd
    1244:	00000dd5 	.word	0x00000dd5
    1248:	0000132d 	.word	0x0000132d
    124c:	00001451 	.word	0x00001451
    1250:	00000e25 	.word	0x00000e25
    1254:	00000e45 	.word	0x00000e45

00001258 <system_apb_clock_set_mask>:
{
    1258:	b580      	push	{r7, lr}
    125a:	b082      	sub	sp, #8
    125c:	af00      	add	r7, sp, #0
    125e:	0002      	movs	r2, r0
    1260:	6039      	str	r1, [r7, #0]
    1262:	1dfb      	adds	r3, r7, #7
    1264:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1266:	1dfb      	adds	r3, r7, #7
    1268:	781b      	ldrb	r3, [r3, #0]
    126a:	2b01      	cmp	r3, #1
    126c:	d00a      	beq.n	1284 <system_apb_clock_set_mask+0x2c>
    126e:	2b02      	cmp	r3, #2
    1270:	d00f      	beq.n	1292 <system_apb_clock_set_mask+0x3a>
    1272:	2b00      	cmp	r3, #0
    1274:	d114      	bne.n	12a0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1276:	4b0e      	ldr	r3, [pc, #56]	; (12b0 <system_apb_clock_set_mask+0x58>)
    1278:	4a0d      	ldr	r2, [pc, #52]	; (12b0 <system_apb_clock_set_mask+0x58>)
    127a:	6991      	ldr	r1, [r2, #24]
    127c:	683a      	ldr	r2, [r7, #0]
    127e:	430a      	orrs	r2, r1
    1280:	619a      	str	r2, [r3, #24]
			break;
    1282:	e00f      	b.n	12a4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1284:	4b0a      	ldr	r3, [pc, #40]	; (12b0 <system_apb_clock_set_mask+0x58>)
    1286:	4a0a      	ldr	r2, [pc, #40]	; (12b0 <system_apb_clock_set_mask+0x58>)
    1288:	69d1      	ldr	r1, [r2, #28]
    128a:	683a      	ldr	r2, [r7, #0]
    128c:	430a      	orrs	r2, r1
    128e:	61da      	str	r2, [r3, #28]
			break;
    1290:	e008      	b.n	12a4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1292:	4b07      	ldr	r3, [pc, #28]	; (12b0 <system_apb_clock_set_mask+0x58>)
    1294:	4a06      	ldr	r2, [pc, #24]	; (12b0 <system_apb_clock_set_mask+0x58>)
    1296:	6a11      	ldr	r1, [r2, #32]
    1298:	683a      	ldr	r2, [r7, #0]
    129a:	430a      	orrs	r2, r1
    129c:	621a      	str	r2, [r3, #32]
			break;
    129e:	e001      	b.n	12a4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    12a0:	2317      	movs	r3, #23
    12a2:	e000      	b.n	12a6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    12a4:	2300      	movs	r3, #0
}
    12a6:	0018      	movs	r0, r3
    12a8:	46bd      	mov	sp, r7
    12aa:	b002      	add	sp, #8
    12ac:	bd80      	pop	{r7, pc}
    12ae:	46c0      	nop			; (mov r8, r8)
    12b0:	40000400 	.word	0x40000400

000012b4 <system_interrupt_enter_critical_section>:
{
    12b4:	b580      	push	{r7, lr}
    12b6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    12b8:	4b02      	ldr	r3, [pc, #8]	; (12c4 <system_interrupt_enter_critical_section+0x10>)
    12ba:	4798      	blx	r3
}
    12bc:	46c0      	nop			; (mov r8, r8)
    12be:	46bd      	mov	sp, r7
    12c0:	bd80      	pop	{r7, pc}
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	0000089d 	.word	0x0000089d

000012c8 <system_interrupt_leave_critical_section>:
{
    12c8:	b580      	push	{r7, lr}
    12ca:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    12cc:	4b02      	ldr	r3, [pc, #8]	; (12d8 <system_interrupt_leave_critical_section+0x10>)
    12ce:	4798      	blx	r3
}
    12d0:	46c0      	nop			; (mov r8, r8)
    12d2:	46bd      	mov	sp, r7
    12d4:	bd80      	pop	{r7, pc}
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	000008f1 	.word	0x000008f1

000012dc <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    12dc:	b580      	push	{r7, lr}
    12de:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12e0:	4b05      	ldr	r3, [pc, #20]	; (12f8 <system_gclk_is_syncing+0x1c>)
    12e2:	785b      	ldrb	r3, [r3, #1]
    12e4:	b2db      	uxtb	r3, r3
    12e6:	b25b      	sxtb	r3, r3
    12e8:	2b00      	cmp	r3, #0
    12ea:	da01      	bge.n	12f0 <system_gclk_is_syncing+0x14>
		return true;
    12ec:	2301      	movs	r3, #1
    12ee:	e000      	b.n	12f2 <system_gclk_is_syncing+0x16>
	}

	return false;
    12f0:	2300      	movs	r3, #0
}
    12f2:	0018      	movs	r0, r3
    12f4:	46bd      	mov	sp, r7
    12f6:	bd80      	pop	{r7, pc}
    12f8:	40000c00 	.word	0x40000c00

000012fc <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    12fc:	b580      	push	{r7, lr}
    12fe:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    1300:	2108      	movs	r1, #8
    1302:	2000      	movs	r0, #0
    1304:	4b07      	ldr	r3, [pc, #28]	; (1324 <system_gclk_init+0x28>)
    1306:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1308:	4b07      	ldr	r3, [pc, #28]	; (1328 <system_gclk_init+0x2c>)
    130a:	2201      	movs	r2, #1
    130c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    130e:	46c0      	nop			; (mov r8, r8)
    1310:	4b05      	ldr	r3, [pc, #20]	; (1328 <system_gclk_init+0x2c>)
    1312:	781b      	ldrb	r3, [r3, #0]
    1314:	b2db      	uxtb	r3, r3
    1316:	001a      	movs	r2, r3
    1318:	2301      	movs	r3, #1
    131a:	4013      	ands	r3, r2
    131c:	d1f8      	bne.n	1310 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    131e:	46c0      	nop			; (mov r8, r8)
    1320:	46bd      	mov	sp, r7
    1322:	bd80      	pop	{r7, pc}
    1324:	00001259 	.word	0x00001259
    1328:	40000c00 	.word	0x40000c00

0000132c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    132c:	b580      	push	{r7, lr}
    132e:	b086      	sub	sp, #24
    1330:	af00      	add	r7, sp, #0
    1332:	0002      	movs	r2, r0
    1334:	6039      	str	r1, [r7, #0]
    1336:	1dfb      	adds	r3, r7, #7
    1338:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    133a:	1dfb      	adds	r3, r7, #7
    133c:	781b      	ldrb	r3, [r3, #0]
    133e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    1340:	1dfb      	adds	r3, r7, #7
    1342:	781b      	ldrb	r3, [r3, #0]
    1344:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1346:	683b      	ldr	r3, [r7, #0]
    1348:	781b      	ldrb	r3, [r3, #0]
    134a:	021b      	lsls	r3, r3, #8
    134c:	001a      	movs	r2, r3
    134e:	697b      	ldr	r3, [r7, #20]
    1350:	4313      	orrs	r3, r2
    1352:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1354:	683b      	ldr	r3, [r7, #0]
    1356:	785b      	ldrb	r3, [r3, #1]
    1358:	2b00      	cmp	r3, #0
    135a:	d004      	beq.n	1366 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    135c:	697b      	ldr	r3, [r7, #20]
    135e:	2280      	movs	r2, #128	; 0x80
    1360:	02d2      	lsls	r2, r2, #11
    1362:	4313      	orrs	r3, r2
    1364:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1366:	683b      	ldr	r3, [r7, #0]
    1368:	7a5b      	ldrb	r3, [r3, #9]
    136a:	2b00      	cmp	r3, #0
    136c:	d004      	beq.n	1378 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    136e:	697b      	ldr	r3, [r7, #20]
    1370:	2280      	movs	r2, #128	; 0x80
    1372:	0312      	lsls	r2, r2, #12
    1374:	4313      	orrs	r3, r2
    1376:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1378:	683b      	ldr	r3, [r7, #0]
    137a:	685b      	ldr	r3, [r3, #4]
    137c:	2b01      	cmp	r3, #1
    137e:	d92c      	bls.n	13da <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1380:	683b      	ldr	r3, [r7, #0]
    1382:	685a      	ldr	r2, [r3, #4]
    1384:	683b      	ldr	r3, [r7, #0]
    1386:	685b      	ldr	r3, [r3, #4]
    1388:	3b01      	subs	r3, #1
    138a:	4013      	ands	r3, r2
    138c:	d11a      	bne.n	13c4 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    138e:	2300      	movs	r3, #0
    1390:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1392:	2302      	movs	r3, #2
    1394:	60bb      	str	r3, [r7, #8]
    1396:	e005      	b.n	13a4 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    1398:	68fb      	ldr	r3, [r7, #12]
    139a:	3301      	adds	r3, #1
    139c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    139e:	68bb      	ldr	r3, [r7, #8]
    13a0:	005b      	lsls	r3, r3, #1
    13a2:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    13a4:	683b      	ldr	r3, [r7, #0]
    13a6:	685a      	ldr	r2, [r3, #4]
    13a8:	68bb      	ldr	r3, [r7, #8]
    13aa:	429a      	cmp	r2, r3
    13ac:	d8f4      	bhi.n	1398 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    13ae:	68fb      	ldr	r3, [r7, #12]
    13b0:	021b      	lsls	r3, r3, #8
    13b2:	693a      	ldr	r2, [r7, #16]
    13b4:	4313      	orrs	r3, r2
    13b6:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    13b8:	697b      	ldr	r3, [r7, #20]
    13ba:	2280      	movs	r2, #128	; 0x80
    13bc:	0352      	lsls	r2, r2, #13
    13be:	4313      	orrs	r3, r2
    13c0:	617b      	str	r3, [r7, #20]
    13c2:	e00a      	b.n	13da <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    13c4:	683b      	ldr	r3, [r7, #0]
    13c6:	685b      	ldr	r3, [r3, #4]
    13c8:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    13ca:	693a      	ldr	r2, [r7, #16]
    13cc:	4313      	orrs	r3, r2
    13ce:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    13d0:	697b      	ldr	r3, [r7, #20]
    13d2:	2280      	movs	r2, #128	; 0x80
    13d4:	0292      	lsls	r2, r2, #10
    13d6:	4313      	orrs	r3, r2
    13d8:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    13da:	683b      	ldr	r3, [r7, #0]
    13dc:	7a1b      	ldrb	r3, [r3, #8]
    13de:	2b00      	cmp	r3, #0
    13e0:	d004      	beq.n	13ec <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    13e2:	697b      	ldr	r3, [r7, #20]
    13e4:	2280      	movs	r2, #128	; 0x80
    13e6:	0392      	lsls	r2, r2, #14
    13e8:	4313      	orrs	r3, r2
    13ea:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    13ec:	46c0      	nop			; (mov r8, r8)
    13ee:	4b13      	ldr	r3, [pc, #76]	; (143c <system_gclk_gen_set_config+0x110>)
    13f0:	4798      	blx	r3
    13f2:	1e03      	subs	r3, r0, #0
    13f4:	d1fb      	bne.n	13ee <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    13f6:	4b12      	ldr	r3, [pc, #72]	; (1440 <system_gclk_gen_set_config+0x114>)
    13f8:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    13fa:	4a12      	ldr	r2, [pc, #72]	; (1444 <system_gclk_gen_set_config+0x118>)
    13fc:	1dfb      	adds	r3, r7, #7
    13fe:	781b      	ldrb	r3, [r3, #0]
    1400:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1402:	46c0      	nop			; (mov r8, r8)
    1404:	4b0d      	ldr	r3, [pc, #52]	; (143c <system_gclk_gen_set_config+0x110>)
    1406:	4798      	blx	r3
    1408:	1e03      	subs	r3, r0, #0
    140a:	d1fb      	bne.n	1404 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    140c:	4b0e      	ldr	r3, [pc, #56]	; (1448 <system_gclk_gen_set_config+0x11c>)
    140e:	693a      	ldr	r2, [r7, #16]
    1410:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    1412:	46c0      	nop			; (mov r8, r8)
    1414:	4b09      	ldr	r3, [pc, #36]	; (143c <system_gclk_gen_set_config+0x110>)
    1416:	4798      	blx	r3
    1418:	1e03      	subs	r3, r0, #0
    141a:	d1fb      	bne.n	1414 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    141c:	4b0a      	ldr	r3, [pc, #40]	; (1448 <system_gclk_gen_set_config+0x11c>)
    141e:	4a0a      	ldr	r2, [pc, #40]	; (1448 <system_gclk_gen_set_config+0x11c>)
    1420:	6851      	ldr	r1, [r2, #4]
    1422:	2280      	movs	r2, #128	; 0x80
    1424:	0252      	lsls	r2, r2, #9
    1426:	4011      	ands	r1, r2
    1428:	697a      	ldr	r2, [r7, #20]
    142a:	430a      	orrs	r2, r1
    142c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    142e:	4b07      	ldr	r3, [pc, #28]	; (144c <system_gclk_gen_set_config+0x120>)
    1430:	4798      	blx	r3
}
    1432:	46c0      	nop			; (mov r8, r8)
    1434:	46bd      	mov	sp, r7
    1436:	b006      	add	sp, #24
    1438:	bd80      	pop	{r7, pc}
    143a:	46c0      	nop			; (mov r8, r8)
    143c:	000012dd 	.word	0x000012dd
    1440:	000012b5 	.word	0x000012b5
    1444:	40000c08 	.word	0x40000c08
    1448:	40000c00 	.word	0x40000c00
    144c:	000012c9 	.word	0x000012c9

00001450 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1450:	b580      	push	{r7, lr}
    1452:	b082      	sub	sp, #8
    1454:	af00      	add	r7, sp, #0
    1456:	0002      	movs	r2, r0
    1458:	1dfb      	adds	r3, r7, #7
    145a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    145c:	46c0      	nop			; (mov r8, r8)
    145e:	4b0e      	ldr	r3, [pc, #56]	; (1498 <system_gclk_gen_enable+0x48>)
    1460:	4798      	blx	r3
    1462:	1e03      	subs	r3, r0, #0
    1464:	d1fb      	bne.n	145e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1466:	4b0d      	ldr	r3, [pc, #52]	; (149c <system_gclk_gen_enable+0x4c>)
    1468:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    146a:	4a0d      	ldr	r2, [pc, #52]	; (14a0 <system_gclk_gen_enable+0x50>)
    146c:	1dfb      	adds	r3, r7, #7
    146e:	781b      	ldrb	r3, [r3, #0]
    1470:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1472:	46c0      	nop			; (mov r8, r8)
    1474:	4b08      	ldr	r3, [pc, #32]	; (1498 <system_gclk_gen_enable+0x48>)
    1476:	4798      	blx	r3
    1478:	1e03      	subs	r3, r0, #0
    147a:	d1fb      	bne.n	1474 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    147c:	4b09      	ldr	r3, [pc, #36]	; (14a4 <system_gclk_gen_enable+0x54>)
    147e:	4a09      	ldr	r2, [pc, #36]	; (14a4 <system_gclk_gen_enable+0x54>)
    1480:	6852      	ldr	r2, [r2, #4]
    1482:	2180      	movs	r1, #128	; 0x80
    1484:	0249      	lsls	r1, r1, #9
    1486:	430a      	orrs	r2, r1
    1488:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    148a:	4b07      	ldr	r3, [pc, #28]	; (14a8 <system_gclk_gen_enable+0x58>)
    148c:	4798      	blx	r3
}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	46bd      	mov	sp, r7
    1492:	b002      	add	sp, #8
    1494:	bd80      	pop	{r7, pc}
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	000012dd 	.word	0x000012dd
    149c:	000012b5 	.word	0x000012b5
    14a0:	40000c04 	.word	0x40000c04
    14a4:	40000c00 	.word	0x40000c00
    14a8:	000012c9 	.word	0x000012c9

000014ac <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    14ac:	b580      	push	{r7, lr}
    14ae:	b086      	sub	sp, #24
    14b0:	af00      	add	r7, sp, #0
    14b2:	0002      	movs	r2, r0
    14b4:	1dfb      	adds	r3, r7, #7
    14b6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    14b8:	46c0      	nop			; (mov r8, r8)
    14ba:	4b2a      	ldr	r3, [pc, #168]	; (1564 <system_gclk_gen_get_hz+0xb8>)
    14bc:	4798      	blx	r3
    14be:	1e03      	subs	r3, r0, #0
    14c0:	d1fb      	bne.n	14ba <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    14c2:	4b29      	ldr	r3, [pc, #164]	; (1568 <system_gclk_gen_get_hz+0xbc>)
    14c4:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    14c6:	4a29      	ldr	r2, [pc, #164]	; (156c <system_gclk_gen_get_hz+0xc0>)
    14c8:	1dfb      	adds	r3, r7, #7
    14ca:	781b      	ldrb	r3, [r3, #0]
    14cc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    14ce:	46c0      	nop			; (mov r8, r8)
    14d0:	4b24      	ldr	r3, [pc, #144]	; (1564 <system_gclk_gen_get_hz+0xb8>)
    14d2:	4798      	blx	r3
    14d4:	1e03      	subs	r3, r0, #0
    14d6:	d1fb      	bne.n	14d0 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    14d8:	4b25      	ldr	r3, [pc, #148]	; (1570 <system_gclk_gen_get_hz+0xc4>)
    14da:	685b      	ldr	r3, [r3, #4]
    14dc:	04db      	lsls	r3, r3, #19
    14de:	0edb      	lsrs	r3, r3, #27
    14e0:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    14e2:	0018      	movs	r0, r3
    14e4:	4b23      	ldr	r3, [pc, #140]	; (1574 <system_gclk_gen_get_hz+0xc8>)
    14e6:	4798      	blx	r3
    14e8:	0003      	movs	r3, r0
    14ea:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    14ec:	4a1f      	ldr	r2, [pc, #124]	; (156c <system_gclk_gen_get_hz+0xc0>)
    14ee:	1dfb      	adds	r3, r7, #7
    14f0:	781b      	ldrb	r3, [r3, #0]
    14f2:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    14f4:	4b1e      	ldr	r3, [pc, #120]	; (1570 <system_gclk_gen_get_hz+0xc4>)
    14f6:	685b      	ldr	r3, [r3, #4]
    14f8:	02db      	lsls	r3, r3, #11
    14fa:	0fdb      	lsrs	r3, r3, #31
    14fc:	b2da      	uxtb	r2, r3
    14fe:	2313      	movs	r3, #19
    1500:	18fb      	adds	r3, r7, r3
    1502:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1504:	4a1c      	ldr	r2, [pc, #112]	; (1578 <system_gclk_gen_get_hz+0xcc>)
    1506:	1dfb      	adds	r3, r7, #7
    1508:	781b      	ldrb	r3, [r3, #0]
    150a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    150c:	46c0      	nop			; (mov r8, r8)
    150e:	4b15      	ldr	r3, [pc, #84]	; (1564 <system_gclk_gen_get_hz+0xb8>)
    1510:	4798      	blx	r3
    1512:	1e03      	subs	r3, r0, #0
    1514:	d1fb      	bne.n	150e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1516:	4b16      	ldr	r3, [pc, #88]	; (1570 <system_gclk_gen_get_hz+0xc4>)
    1518:	689b      	ldr	r3, [r3, #8]
    151a:	021b      	lsls	r3, r3, #8
    151c:	0c1b      	lsrs	r3, r3, #16
    151e:	b29b      	uxth	r3, r3
    1520:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    1522:	4b16      	ldr	r3, [pc, #88]	; (157c <system_gclk_gen_get_hz+0xd0>)
    1524:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1526:	2313      	movs	r3, #19
    1528:	18fb      	adds	r3, r7, r3
    152a:	781b      	ldrb	r3, [r3, #0]
    152c:	2b00      	cmp	r3, #0
    152e:	d109      	bne.n	1544 <system_gclk_gen_get_hz+0x98>
    1530:	68fb      	ldr	r3, [r7, #12]
    1532:	2b01      	cmp	r3, #1
    1534:	d906      	bls.n	1544 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    1536:	4b12      	ldr	r3, [pc, #72]	; (1580 <system_gclk_gen_get_hz+0xd4>)
    1538:	68f9      	ldr	r1, [r7, #12]
    153a:	6978      	ldr	r0, [r7, #20]
    153c:	4798      	blx	r3
    153e:	0003      	movs	r3, r0
    1540:	617b      	str	r3, [r7, #20]
    1542:	e00a      	b.n	155a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    1544:	2313      	movs	r3, #19
    1546:	18fb      	adds	r3, r7, r3
    1548:	781b      	ldrb	r3, [r3, #0]
    154a:	2b00      	cmp	r3, #0
    154c:	d005      	beq.n	155a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    154e:	68fb      	ldr	r3, [r7, #12]
    1550:	3301      	adds	r3, #1
    1552:	697a      	ldr	r2, [r7, #20]
    1554:	40da      	lsrs	r2, r3
    1556:	0013      	movs	r3, r2
    1558:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    155a:	697b      	ldr	r3, [r7, #20]
}
    155c:	0018      	movs	r0, r3
    155e:	46bd      	mov	sp, r7
    1560:	b006      	add	sp, #24
    1562:	bd80      	pop	{r7, pc}
    1564:	000012dd 	.word	0x000012dd
    1568:	000012b5 	.word	0x000012b5
    156c:	40000c04 	.word	0x40000c04
    1570:	40000c00 	.word	0x40000c00
    1574:	00000f2d 	.word	0x00000f2d
    1578:	40000c08 	.word	0x40000c08
    157c:	000012c9 	.word	0x000012c9
    1580:	000025ad 	.word	0x000025ad

00001584 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1584:	b580      	push	{r7, lr}
    1586:	b084      	sub	sp, #16
    1588:	af00      	add	r7, sp, #0
    158a:	0002      	movs	r2, r0
    158c:	6039      	str	r1, [r7, #0]
    158e:	1dfb      	adds	r3, r7, #7
    1590:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    1592:	1dfb      	adds	r3, r7, #7
    1594:	781b      	ldrb	r3, [r3, #0]
    1596:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1598:	683b      	ldr	r3, [r7, #0]
    159a:	781b      	ldrb	r3, [r3, #0]
    159c:	021b      	lsls	r3, r3, #8
    159e:	001a      	movs	r2, r3
    15a0:	68fb      	ldr	r3, [r7, #12]
    15a2:	4313      	orrs	r3, r2
    15a4:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    15a6:	1dfb      	adds	r3, r7, #7
    15a8:	781b      	ldrb	r3, [r3, #0]
    15aa:	0018      	movs	r0, r3
    15ac:	4b04      	ldr	r3, [pc, #16]	; (15c0 <system_gclk_chan_set_config+0x3c>)
    15ae:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    15b0:	4b04      	ldr	r3, [pc, #16]	; (15c4 <system_gclk_chan_set_config+0x40>)
    15b2:	68fa      	ldr	r2, [r7, #12]
    15b4:	b292      	uxth	r2, r2
    15b6:	805a      	strh	r2, [r3, #2]
}
    15b8:	46c0      	nop			; (mov r8, r8)
    15ba:	46bd      	mov	sp, r7
    15bc:	b004      	add	sp, #16
    15be:	bd80      	pop	{r7, pc}
    15c0:	00001611 	.word	0x00001611
    15c4:	40000c00 	.word	0x40000c00

000015c8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    15c8:	b580      	push	{r7, lr}
    15ca:	b082      	sub	sp, #8
    15cc:	af00      	add	r7, sp, #0
    15ce:	0002      	movs	r2, r0
    15d0:	1dfb      	adds	r3, r7, #7
    15d2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    15d4:	4b0a      	ldr	r3, [pc, #40]	; (1600 <system_gclk_chan_enable+0x38>)
    15d6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    15d8:	4a0a      	ldr	r2, [pc, #40]	; (1604 <system_gclk_chan_enable+0x3c>)
    15da:	1dfb      	adds	r3, r7, #7
    15dc:	781b      	ldrb	r3, [r3, #0]
    15de:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    15e0:	4909      	ldr	r1, [pc, #36]	; (1608 <system_gclk_chan_enable+0x40>)
    15e2:	4b09      	ldr	r3, [pc, #36]	; (1608 <system_gclk_chan_enable+0x40>)
    15e4:	885b      	ldrh	r3, [r3, #2]
    15e6:	b29b      	uxth	r3, r3
    15e8:	2280      	movs	r2, #128	; 0x80
    15ea:	01d2      	lsls	r2, r2, #7
    15ec:	4313      	orrs	r3, r2
    15ee:	b29b      	uxth	r3, r3
    15f0:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    15f2:	4b06      	ldr	r3, [pc, #24]	; (160c <system_gclk_chan_enable+0x44>)
    15f4:	4798      	blx	r3
}
    15f6:	46c0      	nop			; (mov r8, r8)
    15f8:	46bd      	mov	sp, r7
    15fa:	b002      	add	sp, #8
    15fc:	bd80      	pop	{r7, pc}
    15fe:	46c0      	nop			; (mov r8, r8)
    1600:	000012b5 	.word	0x000012b5
    1604:	40000c02 	.word	0x40000c02
    1608:	40000c00 	.word	0x40000c00
    160c:	000012c9 	.word	0x000012c9

00001610 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1610:	b580      	push	{r7, lr}
    1612:	b084      	sub	sp, #16
    1614:	af00      	add	r7, sp, #0
    1616:	0002      	movs	r2, r0
    1618:	1dfb      	adds	r3, r7, #7
    161a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    161c:	4b1c      	ldr	r3, [pc, #112]	; (1690 <system_gclk_chan_disable+0x80>)
    161e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1620:	4a1c      	ldr	r2, [pc, #112]	; (1694 <system_gclk_chan_disable+0x84>)
    1622:	1dfb      	adds	r3, r7, #7
    1624:	781b      	ldrb	r3, [r3, #0]
    1626:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1628:	4b1b      	ldr	r3, [pc, #108]	; (1698 <system_gclk_chan_disable+0x88>)
    162a:	885b      	ldrh	r3, [r3, #2]
    162c:	051b      	lsls	r3, r3, #20
    162e:	0f1b      	lsrs	r3, r3, #28
    1630:	b2db      	uxtb	r3, r3
    1632:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    1634:	4a18      	ldr	r2, [pc, #96]	; (1698 <system_gclk_chan_disable+0x88>)
    1636:	8853      	ldrh	r3, [r2, #2]
    1638:	4918      	ldr	r1, [pc, #96]	; (169c <system_gclk_chan_disable+0x8c>)
    163a:	400b      	ands	r3, r1
    163c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    163e:	4a16      	ldr	r2, [pc, #88]	; (1698 <system_gclk_chan_disable+0x88>)
    1640:	4b15      	ldr	r3, [pc, #84]	; (1698 <system_gclk_chan_disable+0x88>)
    1642:	885b      	ldrh	r3, [r3, #2]
    1644:	b29b      	uxth	r3, r3
    1646:	4916      	ldr	r1, [pc, #88]	; (16a0 <system_gclk_chan_disable+0x90>)
    1648:	400b      	ands	r3, r1
    164a:	b29b      	uxth	r3, r3
    164c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    164e:	46c0      	nop			; (mov r8, r8)
    1650:	4b11      	ldr	r3, [pc, #68]	; (1698 <system_gclk_chan_disable+0x88>)
    1652:	885b      	ldrh	r3, [r3, #2]
    1654:	b29b      	uxth	r3, r3
    1656:	001a      	movs	r2, r3
    1658:	2380      	movs	r3, #128	; 0x80
    165a:	01db      	lsls	r3, r3, #7
    165c:	4013      	ands	r3, r2
    165e:	d1f7      	bne.n	1650 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1660:	4a0d      	ldr	r2, [pc, #52]	; (1698 <system_gclk_chan_disable+0x88>)
    1662:	68fb      	ldr	r3, [r7, #12]
    1664:	b2db      	uxtb	r3, r3
    1666:	1c19      	adds	r1, r3, #0
    1668:	230f      	movs	r3, #15
    166a:	400b      	ands	r3, r1
    166c:	b2d9      	uxtb	r1, r3
    166e:	8853      	ldrh	r3, [r2, #2]
    1670:	1c08      	adds	r0, r1, #0
    1672:	210f      	movs	r1, #15
    1674:	4001      	ands	r1, r0
    1676:	0208      	lsls	r0, r1, #8
    1678:	4908      	ldr	r1, [pc, #32]	; (169c <system_gclk_chan_disable+0x8c>)
    167a:	400b      	ands	r3, r1
    167c:	1c19      	adds	r1, r3, #0
    167e:	1c03      	adds	r3, r0, #0
    1680:	430b      	orrs	r3, r1
    1682:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    1684:	4b07      	ldr	r3, [pc, #28]	; (16a4 <system_gclk_chan_disable+0x94>)
    1686:	4798      	blx	r3
}
    1688:	46c0      	nop			; (mov r8, r8)
    168a:	46bd      	mov	sp, r7
    168c:	b004      	add	sp, #16
    168e:	bd80      	pop	{r7, pc}
    1690:	000012b5 	.word	0x000012b5
    1694:	40000c02 	.word	0x40000c02
    1698:	40000c00 	.word	0x40000c00
    169c:	fffff0ff 	.word	0xfffff0ff
    16a0:	ffffbfff 	.word	0xffffbfff
    16a4:	000012c9 	.word	0x000012c9

000016a8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    16a8:	b580      	push	{r7, lr}
    16aa:	b084      	sub	sp, #16
    16ac:	af00      	add	r7, sp, #0
    16ae:	0002      	movs	r2, r0
    16b0:	1dfb      	adds	r3, r7, #7
    16b2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    16b4:	4b0d      	ldr	r3, [pc, #52]	; (16ec <system_gclk_chan_get_hz+0x44>)
    16b6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16b8:	4a0d      	ldr	r2, [pc, #52]	; (16f0 <system_gclk_chan_get_hz+0x48>)
    16ba:	1dfb      	adds	r3, r7, #7
    16bc:	781b      	ldrb	r3, [r3, #0]
    16be:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    16c0:	4b0c      	ldr	r3, [pc, #48]	; (16f4 <system_gclk_chan_get_hz+0x4c>)
    16c2:	885b      	ldrh	r3, [r3, #2]
    16c4:	051b      	lsls	r3, r3, #20
    16c6:	0f1b      	lsrs	r3, r3, #28
    16c8:	b2da      	uxtb	r2, r3
    16ca:	230f      	movs	r3, #15
    16cc:	18fb      	adds	r3, r7, r3
    16ce:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    16d0:	4b09      	ldr	r3, [pc, #36]	; (16f8 <system_gclk_chan_get_hz+0x50>)
    16d2:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    16d4:	230f      	movs	r3, #15
    16d6:	18fb      	adds	r3, r7, r3
    16d8:	781b      	ldrb	r3, [r3, #0]
    16da:	0018      	movs	r0, r3
    16dc:	4b07      	ldr	r3, [pc, #28]	; (16fc <system_gclk_chan_get_hz+0x54>)
    16de:	4798      	blx	r3
    16e0:	0003      	movs	r3, r0
}
    16e2:	0018      	movs	r0, r3
    16e4:	46bd      	mov	sp, r7
    16e6:	b004      	add	sp, #16
    16e8:	bd80      	pop	{r7, pc}
    16ea:	46c0      	nop			; (mov r8, r8)
    16ec:	000012b5 	.word	0x000012b5
    16f0:	40000c02 	.word	0x40000c02
    16f4:	40000c00 	.word	0x40000c00
    16f8:	000012c9 	.word	0x000012c9
    16fc:	000014ad 	.word	0x000014ad

00001700 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    1700:	b580      	push	{r7, lr}
    1702:	af00      	add	r7, sp, #0
	return;
    1704:	46c0      	nop			; (mov r8, r8)
}
    1706:	46bd      	mov	sp, r7
    1708:	bd80      	pop	{r7, pc}
	...

0000170c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    170c:	b580      	push	{r7, lr}
    170e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1710:	4b06      	ldr	r3, [pc, #24]	; (172c <system_init+0x20>)
    1712:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1714:	4b06      	ldr	r3, [pc, #24]	; (1730 <system_init+0x24>)
    1716:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1718:	4b06      	ldr	r3, [pc, #24]	; (1734 <system_init+0x28>)
    171a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    171c:	4b06      	ldr	r3, [pc, #24]	; (1738 <system_init+0x2c>)
    171e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1720:	4b06      	ldr	r3, [pc, #24]	; (173c <system_init+0x30>)
    1722:	4798      	blx	r3
}
    1724:	46c0      	nop			; (mov r8, r8)
    1726:	46bd      	mov	sp, r7
    1728:	bd80      	pop	{r7, pc}
    172a:	46c0      	nop			; (mov r8, r8)
    172c:	00001149 	.word	0x00001149
    1730:	00000825 	.word	0x00000825
    1734:	00001701 	.word	0x00001701
    1738:	000002e9 	.word	0x000002e9
    173c:	00001701 	.word	0x00001701

00001740 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1740:	b580      	push	{r7, lr}
    1742:	b082      	sub	sp, #8
    1744:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    1746:	4b2f      	ldr	r3, [pc, #188]	; (1804 <Reset_Handler+0xc4>)
    1748:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    174a:	4b2f      	ldr	r3, [pc, #188]	; (1808 <Reset_Handler+0xc8>)
    174c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    174e:	687a      	ldr	r2, [r7, #4]
    1750:	683b      	ldr	r3, [r7, #0]
    1752:	429a      	cmp	r2, r3
    1754:	d00c      	beq.n	1770 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    1756:	e007      	b.n	1768 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    1758:	683b      	ldr	r3, [r7, #0]
    175a:	1d1a      	adds	r2, r3, #4
    175c:	603a      	str	r2, [r7, #0]
    175e:	687a      	ldr	r2, [r7, #4]
    1760:	1d11      	adds	r1, r2, #4
    1762:	6079      	str	r1, [r7, #4]
    1764:	6812      	ldr	r2, [r2, #0]
    1766:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    1768:	683a      	ldr	r2, [r7, #0]
    176a:	4b28      	ldr	r3, [pc, #160]	; (180c <Reset_Handler+0xcc>)
    176c:	429a      	cmp	r2, r3
    176e:	d3f3      	bcc.n	1758 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1770:	4b27      	ldr	r3, [pc, #156]	; (1810 <Reset_Handler+0xd0>)
    1772:	603b      	str	r3, [r7, #0]
    1774:	e004      	b.n	1780 <Reset_Handler+0x40>
                *pDest++ = 0;
    1776:	683b      	ldr	r3, [r7, #0]
    1778:	1d1a      	adds	r2, r3, #4
    177a:	603a      	str	r2, [r7, #0]
    177c:	2200      	movs	r2, #0
    177e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    1780:	683a      	ldr	r2, [r7, #0]
    1782:	4b24      	ldr	r3, [pc, #144]	; (1814 <Reset_Handler+0xd4>)
    1784:	429a      	cmp	r2, r3
    1786:	d3f6      	bcc.n	1776 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1788:	4b23      	ldr	r3, [pc, #140]	; (1818 <Reset_Handler+0xd8>)
    178a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    178c:	4b23      	ldr	r3, [pc, #140]	; (181c <Reset_Handler+0xdc>)
    178e:	687a      	ldr	r2, [r7, #4]
    1790:	21ff      	movs	r1, #255	; 0xff
    1792:	438a      	bics	r2, r1
    1794:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1796:	4a22      	ldr	r2, [pc, #136]	; (1820 <Reset_Handler+0xe0>)
    1798:	2390      	movs	r3, #144	; 0x90
    179a:	005b      	lsls	r3, r3, #1
    179c:	2102      	movs	r1, #2
    179e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    17a0:	4a20      	ldr	r2, [pc, #128]	; (1824 <Reset_Handler+0xe4>)
    17a2:	78d3      	ldrb	r3, [r2, #3]
    17a4:	2103      	movs	r1, #3
    17a6:	438b      	bics	r3, r1
    17a8:	1c19      	adds	r1, r3, #0
    17aa:	2302      	movs	r3, #2
    17ac:	430b      	orrs	r3, r1
    17ae:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    17b0:	4a1c      	ldr	r2, [pc, #112]	; (1824 <Reset_Handler+0xe4>)
    17b2:	78d3      	ldrb	r3, [r2, #3]
    17b4:	210c      	movs	r1, #12
    17b6:	438b      	bics	r3, r1
    17b8:	1c19      	adds	r1, r3, #0
    17ba:	2308      	movs	r3, #8
    17bc:	430b      	orrs	r3, r1
    17be:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    17c0:	4a19      	ldr	r2, [pc, #100]	; (1828 <Reset_Handler+0xe8>)
    17c2:	7b93      	ldrb	r3, [r2, #14]
    17c4:	2130      	movs	r1, #48	; 0x30
    17c6:	438b      	bics	r3, r1
    17c8:	1c19      	adds	r1, r3, #0
    17ca:	2320      	movs	r3, #32
    17cc:	430b      	orrs	r3, r1
    17ce:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    17d0:	4a15      	ldr	r2, [pc, #84]	; (1828 <Reset_Handler+0xe8>)
    17d2:	7b93      	ldrb	r3, [r2, #14]
    17d4:	210c      	movs	r1, #12
    17d6:	438b      	bics	r3, r1
    17d8:	1c19      	adds	r1, r3, #0
    17da:	2308      	movs	r3, #8
    17dc:	430b      	orrs	r3, r1
    17de:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    17e0:	4a11      	ldr	r2, [pc, #68]	; (1828 <Reset_Handler+0xe8>)
    17e2:	7b93      	ldrb	r3, [r2, #14]
    17e4:	2103      	movs	r1, #3
    17e6:	438b      	bics	r3, r1
    17e8:	1c19      	adds	r1, r3, #0
    17ea:	2302      	movs	r3, #2
    17ec:	430b      	orrs	r3, r1
    17ee:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    17f0:	4a0e      	ldr	r2, [pc, #56]	; (182c <Reset_Handler+0xec>)
    17f2:	6853      	ldr	r3, [r2, #4]
    17f4:	2180      	movs	r1, #128	; 0x80
    17f6:	430b      	orrs	r3, r1
    17f8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    17fa:	4b0d      	ldr	r3, [pc, #52]	; (1830 <Reset_Handler+0xf0>)
    17fc:	4798      	blx	r3

        /* Branch to main function */
        main();
    17fe:	4b0d      	ldr	r3, [pc, #52]	; (1834 <Reset_Handler+0xf4>)
    1800:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1802:	e7fe      	b.n	1802 <Reset_Handler+0xc2>
    1804:	00004b68 	.word	0x00004b68
    1808:	20000000 	.word	0x20000000
    180c:	20000070 	.word	0x20000070
    1810:	20000070 	.word	0x20000070
    1814:	20000110 	.word	0x20000110
    1818:	00000000 	.word	0x00000000
    181c:	e000ed00 	.word	0xe000ed00
    1820:	41007000 	.word	0x41007000
    1824:	41005000 	.word	0x41005000
    1828:	41004800 	.word	0x41004800
    182c:	41004000 	.word	0x41004000
    1830:	000049e1 	.word	0x000049e1
    1834:	00001ce9 	.word	0x00001ce9

00001838 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1838:	b580      	push	{r7, lr}
    183a:	af00      	add	r7, sp, #0
        while (1) {
    183c:	e7fe      	b.n	183c <Dummy_Handler+0x4>

0000183e <arch_ioport_pin_to_port_id>:
{
    183e:	b580      	push	{r7, lr}
    1840:	b082      	sub	sp, #8
    1842:	af00      	add	r7, sp, #0
    1844:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    1846:	687b      	ldr	r3, [r7, #4]
    1848:	095b      	lsrs	r3, r3, #5
}
    184a:	0018      	movs	r0, r3
    184c:	46bd      	mov	sp, r7
    184e:	b002      	add	sp, #8
    1850:	bd80      	pop	{r7, pc}
	...

00001854 <arch_ioport_port_to_base>:
{
    1854:	b580      	push	{r7, lr}
    1856:	b082      	sub	sp, #8
    1858:	af00      	add	r7, sp, #0
    185a:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	01db      	lsls	r3, r3, #7
    1860:	4a03      	ldr	r2, [pc, #12]	; (1870 <arch_ioport_port_to_base+0x1c>)
    1862:	4694      	mov	ip, r2
    1864:	4463      	add	r3, ip
}
    1866:	0018      	movs	r0, r3
    1868:	46bd      	mov	sp, r7
    186a:	b002      	add	sp, #8
    186c:	bd80      	pop	{r7, pc}
    186e:	46c0      	nop			; (mov r8, r8)
    1870:	41004400 	.word	0x41004400

00001874 <arch_ioport_pin_to_base>:
{
    1874:	b580      	push	{r7, lr}
    1876:	b082      	sub	sp, #8
    1878:	af00      	add	r7, sp, #0
    187a:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    187c:	687b      	ldr	r3, [r7, #4]
    187e:	0018      	movs	r0, r3
    1880:	4b05      	ldr	r3, [pc, #20]	; (1898 <arch_ioport_pin_to_base+0x24>)
    1882:	4798      	blx	r3
    1884:	0003      	movs	r3, r0
    1886:	0018      	movs	r0, r3
    1888:	4b04      	ldr	r3, [pc, #16]	; (189c <arch_ioport_pin_to_base+0x28>)
    188a:	4798      	blx	r3
    188c:	0003      	movs	r3, r0
}
    188e:	0018      	movs	r0, r3
    1890:	46bd      	mov	sp, r7
    1892:	b002      	add	sp, #8
    1894:	bd80      	pop	{r7, pc}
    1896:	46c0      	nop			; (mov r8, r8)
    1898:	0000183f 	.word	0x0000183f
    189c:	00001855 	.word	0x00001855

000018a0 <arch_ioport_pin_to_mask>:
{
    18a0:	b580      	push	{r7, lr}
    18a2:	b082      	sub	sp, #8
    18a4:	af00      	add	r7, sp, #0
    18a6:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    18a8:	687b      	ldr	r3, [r7, #4]
    18aa:	221f      	movs	r2, #31
    18ac:	4013      	ands	r3, r2
    18ae:	2201      	movs	r2, #1
    18b0:	409a      	lsls	r2, r3
    18b2:	0013      	movs	r3, r2
}
    18b4:	0018      	movs	r0, r3
    18b6:	46bd      	mov	sp, r7
    18b8:	b002      	add	sp, #8
    18ba:	bd80      	pop	{r7, pc}

000018bc <arch_ioport_set_pin_level>:
{
    18bc:	b590      	push	{r4, r7, lr}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
    18c4:	000a      	movs	r2, r1
    18c6:	1cfb      	adds	r3, r7, #3
    18c8:	701a      	strb	r2, [r3, #0]
	if (level) {
    18ca:	1cfb      	adds	r3, r7, #3
    18cc:	781b      	ldrb	r3, [r3, #0]
    18ce:	2b00      	cmp	r3, #0
    18d0:	d00b      	beq.n	18ea <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	0018      	movs	r0, r3
    18d6:	4b0c      	ldr	r3, [pc, #48]	; (1908 <arch_ioport_set_pin_level+0x4c>)
    18d8:	4798      	blx	r3
    18da:	0004      	movs	r4, r0
    18dc:	687b      	ldr	r3, [r7, #4]
    18de:	0018      	movs	r0, r3
    18e0:	4b0a      	ldr	r3, [pc, #40]	; (190c <arch_ioport_set_pin_level+0x50>)
    18e2:	4798      	blx	r3
    18e4:	0003      	movs	r3, r0
    18e6:	61a3      	str	r3, [r4, #24]
}
    18e8:	e00a      	b.n	1900 <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    18ea:	687b      	ldr	r3, [r7, #4]
    18ec:	0018      	movs	r0, r3
    18ee:	4b06      	ldr	r3, [pc, #24]	; (1908 <arch_ioport_set_pin_level+0x4c>)
    18f0:	4798      	blx	r3
    18f2:	0004      	movs	r4, r0
    18f4:	687b      	ldr	r3, [r7, #4]
    18f6:	0018      	movs	r0, r3
    18f8:	4b04      	ldr	r3, [pc, #16]	; (190c <arch_ioport_set_pin_level+0x50>)
    18fa:	4798      	blx	r3
    18fc:	0003      	movs	r3, r0
    18fe:	6163      	str	r3, [r4, #20]
}
    1900:	46c0      	nop			; (mov r8, r8)
    1902:	46bd      	mov	sp, r7
    1904:	b003      	add	sp, #12
    1906:	bd90      	pop	{r4, r7, pc}
    1908:	00001875 	.word	0x00001875
    190c:	000018a1 	.word	0x000018a1

00001910 <arch_ioport_get_pin_level>:
		base->OUTCLR.reg = mask;
	}
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
    1910:	b590      	push	{r4, r7, lr}
    1912:	b083      	sub	sp, #12
    1914:	af00      	add	r7, sp, #0
    1916:	6078      	str	r0, [r7, #4]
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    1918:	687b      	ldr	r3, [r7, #4]
    191a:	0018      	movs	r0, r3
    191c:	4b08      	ldr	r3, [pc, #32]	; (1940 <arch_ioport_get_pin_level+0x30>)
    191e:	4798      	blx	r3
    1920:	0003      	movs	r3, r0
    1922:	6a1c      	ldr	r4, [r3, #32]
    1924:	687b      	ldr	r3, [r7, #4]
    1926:	0018      	movs	r0, r3
    1928:	4b06      	ldr	r3, [pc, #24]	; (1944 <arch_ioport_get_pin_level+0x34>)
    192a:	4798      	blx	r3
    192c:	0003      	movs	r3, r0
    192e:	4023      	ands	r3, r4
    1930:	1e5a      	subs	r2, r3, #1
    1932:	4193      	sbcs	r3, r2
    1934:	b2db      	uxtb	r3, r3
}
    1936:	0018      	movs	r0, r3
    1938:	46bd      	mov	sp, r7
    193a:	b003      	add	sp, #12
    193c:	bd90      	pop	{r4, r7, pc}
    193e:	46c0      	nop			; (mov r8, r8)
    1940:	00001875 	.word	0x00001875
    1944:	000018a1 	.word	0x000018a1

00001948 <ioport_set_pin_level>:
{
    1948:	b580      	push	{r7, lr}
    194a:	b082      	sub	sp, #8
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
    1950:	000a      	movs	r2, r1
    1952:	1cfb      	adds	r3, r7, #3
    1954:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    1956:	1cfb      	adds	r3, r7, #3
    1958:	781a      	ldrb	r2, [r3, #0]
    195a:	687b      	ldr	r3, [r7, #4]
    195c:	0011      	movs	r1, r2
    195e:	0018      	movs	r0, r3
    1960:	4b02      	ldr	r3, [pc, #8]	; (196c <ioport_set_pin_level+0x24>)
    1962:	4798      	blx	r3
}
    1964:	46c0      	nop			; (mov r8, r8)
    1966:	46bd      	mov	sp, r7
    1968:	b002      	add	sp, #8
    196a:	bd80      	pop	{r7, pc}
    196c:	000018bd 	.word	0x000018bd

00001970 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
    1970:	b580      	push	{r7, lr}
    1972:	b082      	sub	sp, #8
    1974:	af00      	add	r7, sp, #0
    1976:	6078      	str	r0, [r7, #4]
	return arch_ioport_get_pin_level(pin);
    1978:	687b      	ldr	r3, [r7, #4]
    197a:	0018      	movs	r0, r3
    197c:	4b03      	ldr	r3, [pc, #12]	; (198c <ioport_get_pin_level+0x1c>)
    197e:	4798      	blx	r3
    1980:	0003      	movs	r3, r0
}
    1982:	0018      	movs	r0, r3
    1984:	46bd      	mov	sp, r7
    1986:	b002      	add	sp, #8
    1988:	bd80      	pop	{r7, pc}
    198a:	46c0      	nop			; (mov r8, r8)
    198c:	00001911 	.word	0x00001911

00001990 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    1990:	b580      	push	{r7, lr}
    1992:	b084      	sub	sp, #16
    1994:	af00      	add	r7, sp, #0
    1996:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	22a0      	movs	r2, #160	; 0xa0
    199c:	0112      	lsls	r2, r2, #4
    199e:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    19a0:	687b      	ldr	r3, [r7, #4]
    19a2:	2201      	movs	r2, #1
    19a4:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    19a6:	687b      	ldr	r3, [r7, #4]
    19a8:	2200      	movs	r2, #0
    19aa:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    19ac:	687b      	ldr	r3, [r7, #4]
    19ae:	2200      	movs	r2, #0
    19b0:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    19b2:	230f      	movs	r3, #15
    19b4:	18fb      	adds	r3, r7, r3
    19b6:	2200      	movs	r2, #0
    19b8:	701a      	strb	r2, [r3, #0]
    19ba:	e00e      	b.n	19da <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    19bc:	230f      	movs	r3, #15
    19be:	18fb      	adds	r3, r7, r3
    19c0:	781a      	ldrb	r2, [r3, #0]
    19c2:	687b      	ldr	r3, [r7, #4]
    19c4:	3202      	adds	r2, #2
    19c6:	0092      	lsls	r2, r2, #2
    19c8:	2100      	movs	r1, #0
    19ca:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    19cc:	230f      	movs	r3, #15
    19ce:	18fb      	adds	r3, r7, r3
    19d0:	781a      	ldrb	r2, [r3, #0]
    19d2:	230f      	movs	r3, #15
    19d4:	18fb      	adds	r3, r7, r3
    19d6:	3201      	adds	r2, #1
    19d8:	701a      	strb	r2, [r3, #0]
    19da:	230f      	movs	r3, #15
    19dc:	18fb      	adds	r3, r7, r3
    19de:	781b      	ldrb	r3, [r3, #0]
    19e0:	2b01      	cmp	r3, #1
    19e2:	d9eb      	bls.n	19bc <rtc_count_get_config_defaults+0x2c>
	}
}
    19e4:	46c0      	nop			; (mov r8, r8)
    19e6:	46bd      	mov	sp, r7
    19e8:	b004      	add	sp, #16
    19ea:	bd80      	pop	{r7, pc}

000019ec <get_current_time_ms>:
static uint32_t start_movement_time = 0;

static struct rtc_module module;

static uint32_t get_current_time_ms(void)
{
    19ec:	b580      	push	{r7, lr}
    19ee:	b082      	sub	sp, #8
    19f0:	af00      	add	r7, sp, #0
	// Actually ticks at 1024Hz.
	uint32_t count_faster = rtc_count_get_count(&module);
    19f2:	4b0a      	ldr	r3, [pc, #40]	; (1a1c <get_current_time_ms+0x30>)
    19f4:	0018      	movs	r0, r3
    19f6:	4b0a      	ldr	r3, [pc, #40]	; (1a20 <get_current_time_ms+0x34>)
    19f8:	4798      	blx	r3
    19fa:	0003      	movs	r3, r0
    19fc:	607b      	str	r3, [r7, #4]
	uint32_t count_corrected = (count_faster * 1000) / 1024;
    19fe:	687b      	ldr	r3, [r7, #4]
    1a00:	22fa      	movs	r2, #250	; 0xfa
    1a02:	0092      	lsls	r2, r2, #2
    1a04:	4353      	muls	r3, r2
    1a06:	0a9b      	lsrs	r3, r3, #10
    1a08:	603b      	str	r3, [r7, #0]
	return rtc_count_get_count(&module);
    1a0a:	4b04      	ldr	r3, [pc, #16]	; (1a1c <get_current_time_ms+0x30>)
    1a0c:	0018      	movs	r0, r3
    1a0e:	4b04      	ldr	r3, [pc, #16]	; (1a20 <get_current_time_ms+0x34>)
    1a10:	4798      	blx	r3
    1a12:	0003      	movs	r3, r0
}
    1a14:	0018      	movs	r0, r3
    1a16:	46bd      	mov	sp, r7
    1a18:	b002      	add	sp, #8
    1a1a:	bd80      	pop	{r7, pc}
    1a1c:	200000b8 	.word	0x200000b8
    1a20:	00000cad 	.word	0x00000cad

00001a24 <drive_phase>:

static void drive_phase(uint8_t step)
{
    1a24:	b580      	push	{r7, lr}
    1a26:	b082      	sub	sp, #8
    1a28:	af00      	add	r7, sp, #0
    1a2a:	0002      	movs	r2, r0
    1a2c:	1dfb      	adds	r3, r7, #7
    1a2e:	701a      	strb	r2, [r3, #0]
	if(step >= NUMBER_STEPS)
    1a30:	1dfb      	adds	r3, r7, #7
    1a32:	781b      	ldrb	r3, [r3, #0]
    1a34:	2b03      	cmp	r3, #3
    1a36:	d867      	bhi.n	1b08 <drive_phase+0xe4>
	*    4  1  0  0  1
	*
	* BUT Pins entered in sequence IN1-IN3-IN2-IN4 for proper step sequence
	*/

	if(step == 0)
    1a38:	1dfb      	adds	r3, r7, #7
    1a3a:	781b      	ldrb	r3, [r3, #0]
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	d114      	bne.n	1a6a <drive_phase+0x46>
	{
		ioport_set_pin_level(coil_pins[0], COIL_ACTIVE_LEVEL); // Blue
    1a40:	2301      	movs	r3, #1
    1a42:	2101      	movs	r1, #1
    1a44:	0018      	movs	r0, r3
    1a46:	4b32      	ldr	r3, [pc, #200]	; (1b10 <drive_phase+0xec>)
    1a48:	4798      	blx	r3
		ioport_set_pin_level(coil_pins[1], !COIL_ACTIVE_LEVEL); // Pink
    1a4a:	2323      	movs	r3, #35	; 0x23
    1a4c:	2100      	movs	r1, #0
    1a4e:	0018      	movs	r0, r3
    1a50:	4b2f      	ldr	r3, [pc, #188]	; (1b10 <drive_phase+0xec>)
    1a52:	4798      	blx	r3
		ioport_set_pin_level(coil_pins[2], COIL_ACTIVE_LEVEL); // Yellow
    1a54:	2300      	movs	r3, #0
    1a56:	2101      	movs	r1, #1
    1a58:	0018      	movs	r0, r3
    1a5a:	4b2d      	ldr	r3, [pc, #180]	; (1b10 <drive_phase+0xec>)
    1a5c:	4798      	blx	r3
		ioport_set_pin_level(coil_pins[3], !COIL_ACTIVE_LEVEL); // Orange
    1a5e:	2322      	movs	r3, #34	; 0x22
    1a60:	2100      	movs	r1, #0
    1a62:	0018      	movs	r0, r3
    1a64:	4b2a      	ldr	r3, [pc, #168]	; (1b10 <drive_phase+0xec>)
    1a66:	4798      	blx	r3
    1a68:	e049      	b.n	1afe <drive_phase+0xda>
	}
	else if(step == 1)
    1a6a:	1dfb      	adds	r3, r7, #7
    1a6c:	781b      	ldrb	r3, [r3, #0]
    1a6e:	2b01      	cmp	r3, #1
    1a70:	d114      	bne.n	1a9c <drive_phase+0x78>
	{
		ioport_set_pin_level(coil_pins[0], !COIL_ACTIVE_LEVEL); // Blue
    1a72:	2301      	movs	r3, #1
    1a74:	2100      	movs	r1, #0
    1a76:	0018      	movs	r0, r3
    1a78:	4b25      	ldr	r3, [pc, #148]	; (1b10 <drive_phase+0xec>)
    1a7a:	4798      	blx	r3
		ioport_set_pin_level(coil_pins[1], COIL_ACTIVE_LEVEL); // Pink
    1a7c:	2323      	movs	r3, #35	; 0x23
    1a7e:	2101      	movs	r1, #1
    1a80:	0018      	movs	r0, r3
    1a82:	4b23      	ldr	r3, [pc, #140]	; (1b10 <drive_phase+0xec>)
    1a84:	4798      	blx	r3
		ioport_set_pin_level(coil_pins[2], COIL_ACTIVE_LEVEL); // Yellow
    1a86:	2300      	movs	r3, #0
    1a88:	2101      	movs	r1, #1
    1a8a:	0018      	movs	r0, r3
    1a8c:	4b20      	ldr	r3, [pc, #128]	; (1b10 <drive_phase+0xec>)
    1a8e:	4798      	blx	r3
		ioport_set_pin_level(coil_pins[3], !COIL_ACTIVE_LEVEL); // Orange
    1a90:	2322      	movs	r3, #34	; 0x22
    1a92:	2100      	movs	r1, #0
    1a94:	0018      	movs	r0, r3
    1a96:	4b1e      	ldr	r3, [pc, #120]	; (1b10 <drive_phase+0xec>)
    1a98:	4798      	blx	r3
    1a9a:	e030      	b.n	1afe <drive_phase+0xda>
	}
	else if(step == 2)
    1a9c:	1dfb      	adds	r3, r7, #7
    1a9e:	781b      	ldrb	r3, [r3, #0]
    1aa0:	2b02      	cmp	r3, #2
    1aa2:	d114      	bne.n	1ace <drive_phase+0xaa>
	{
		ioport_set_pin_level(coil_pins[0], !COIL_ACTIVE_LEVEL); // Blue
    1aa4:	2301      	movs	r3, #1
    1aa6:	2100      	movs	r1, #0
    1aa8:	0018      	movs	r0, r3
    1aaa:	4b19      	ldr	r3, [pc, #100]	; (1b10 <drive_phase+0xec>)
    1aac:	4798      	blx	r3
		ioport_set_pin_level(coil_pins[1], COIL_ACTIVE_LEVEL); // Pink
    1aae:	2323      	movs	r3, #35	; 0x23
    1ab0:	2101      	movs	r1, #1
    1ab2:	0018      	movs	r0, r3
    1ab4:	4b16      	ldr	r3, [pc, #88]	; (1b10 <drive_phase+0xec>)
    1ab6:	4798      	blx	r3
		ioport_set_pin_level(coil_pins[2], !COIL_ACTIVE_LEVEL); // Yellow
    1ab8:	2300      	movs	r3, #0
    1aba:	2100      	movs	r1, #0
    1abc:	0018      	movs	r0, r3
    1abe:	4b14      	ldr	r3, [pc, #80]	; (1b10 <drive_phase+0xec>)
    1ac0:	4798      	blx	r3
		ioport_set_pin_level(coil_pins[3], COIL_ACTIVE_LEVEL); // Orange
    1ac2:	2322      	movs	r3, #34	; 0x22
    1ac4:	2101      	movs	r1, #1
    1ac6:	0018      	movs	r0, r3
    1ac8:	4b11      	ldr	r3, [pc, #68]	; (1b10 <drive_phase+0xec>)
    1aca:	4798      	blx	r3
    1acc:	e017      	b.n	1afe <drive_phase+0xda>
	}
	else if(step == 3)
    1ace:	1dfb      	adds	r3, r7, #7
    1ad0:	781b      	ldrb	r3, [r3, #0]
    1ad2:	2b03      	cmp	r3, #3
    1ad4:	d113      	bne.n	1afe <drive_phase+0xda>
	{
		ioport_set_pin_level(coil_pins[0], COIL_ACTIVE_LEVEL); // Blue
    1ad6:	2301      	movs	r3, #1
    1ad8:	2101      	movs	r1, #1
    1ada:	0018      	movs	r0, r3
    1adc:	4b0c      	ldr	r3, [pc, #48]	; (1b10 <drive_phase+0xec>)
    1ade:	4798      	blx	r3
		ioport_set_pin_level(coil_pins[1], !COIL_ACTIVE_LEVEL); // Pink
    1ae0:	2323      	movs	r3, #35	; 0x23
    1ae2:	2100      	movs	r1, #0
    1ae4:	0018      	movs	r0, r3
    1ae6:	4b0a      	ldr	r3, [pc, #40]	; (1b10 <drive_phase+0xec>)
    1ae8:	4798      	blx	r3
		ioport_set_pin_level(coil_pins[2], !COIL_ACTIVE_LEVEL); // Yellow
    1aea:	2300      	movs	r3, #0
    1aec:	2100      	movs	r1, #0
    1aee:	0018      	movs	r0, r3
    1af0:	4b07      	ldr	r3, [pc, #28]	; (1b10 <drive_phase+0xec>)
    1af2:	4798      	blx	r3
		ioport_set_pin_level(coil_pins[3], COIL_ACTIVE_LEVEL); // Orange
    1af4:	2322      	movs	r3, #34	; 0x22
    1af6:	2101      	movs	r1, #1
    1af8:	0018      	movs	r0, r3
    1afa:	4b05      	ldr	r3, [pc, #20]	; (1b10 <drive_phase+0xec>)
    1afc:	4798      	blx	r3
	}

	delay_us(COIL_DELAY_US);
    1afe:	4b05      	ldr	r3, [pc, #20]	; (1b14 <drive_phase+0xf0>)
    1b00:	0018      	movs	r0, r3
    1b02:	4b05      	ldr	r3, [pc, #20]	; (1b18 <drive_phase+0xf4>)
    1b04:	4798      	blx	r3
    1b06:	e000      	b.n	1b0a <drive_phase+0xe6>
		return;
    1b08:	46c0      	nop			; (mov r8, r8)
}
    1b0a:	46bd      	mov	sp, r7
    1b0c:	b002      	add	sp, #8
    1b0e:	bd80      	pop	{r7, pc}
    1b10:	00001949 	.word	0x00001949
    1b14:	000005dc 	.word	0x000005dc
    1b18:	000001a1 	.word	0x000001a1

00001b1c <step_motor>:

static void step_motor(int32_t steps)
{
    1b1c:	b580      	push	{r7, lr}
    1b1e:	b084      	sub	sp, #16
    1b20:	af00      	add	r7, sp, #0
    1b22:	6078      	str	r0, [r7, #4]
	int32_t i;
	static int32_t current_step_stage;

	current_step += steps;
    1b24:	4b33      	ldr	r3, [pc, #204]	; (1bf4 <step_motor+0xd8>)
    1b26:	681a      	ldr	r2, [r3, #0]
    1b28:	687b      	ldr	r3, [r7, #4]
    1b2a:	18d2      	adds	r2, r2, r3
    1b2c:	4b31      	ldr	r3, [pc, #196]	; (1bf4 <step_motor+0xd8>)
    1b2e:	601a      	str	r2, [r3, #0]

	if(steps > 0)
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	2b00      	cmp	r3, #0
    1b34:	dd23      	ble.n	1b7e <step_motor+0x62>
	{
		for(i = 0; i < steps; i++)
    1b36:	2300      	movs	r3, #0
    1b38:	60fb      	str	r3, [r7, #12]
    1b3a:	e01b      	b.n	1b74 <step_motor+0x58>
		{
			// Number of steps
			drive_phase(current_step_stage);
    1b3c:	4b2e      	ldr	r3, [pc, #184]	; (1bf8 <step_motor+0xdc>)
    1b3e:	681b      	ldr	r3, [r3, #0]
    1b40:	b2db      	uxtb	r3, r3
    1b42:	0018      	movs	r0, r3
    1b44:	4b2d      	ldr	r3, [pc, #180]	; (1bfc <step_motor+0xe0>)
    1b46:	4798      	blx	r3
			current_step_stage++;
    1b48:	4b2b      	ldr	r3, [pc, #172]	; (1bf8 <step_motor+0xdc>)
    1b4a:	681b      	ldr	r3, [r3, #0]
    1b4c:	1c5a      	adds	r2, r3, #1
    1b4e:	4b2a      	ldr	r3, [pc, #168]	; (1bf8 <step_motor+0xdc>)
    1b50:	601a      	str	r2, [r3, #0]
			if(current_step_stage >= NUMBER_STEPS)
    1b52:	4b29      	ldr	r3, [pc, #164]	; (1bf8 <step_motor+0xdc>)
    1b54:	681b      	ldr	r3, [r3, #0]
    1b56:	2b03      	cmp	r3, #3
    1b58:	dd02      	ble.n	1b60 <step_motor+0x44>
			{
				current_step_stage = 0;
    1b5a:	4b27      	ldr	r3, [pc, #156]	; (1bf8 <step_motor+0xdc>)
    1b5c:	2200      	movs	r2, #0
    1b5e:	601a      	str	r2, [r3, #0]
			}
			if(current_step_stage < 0)
    1b60:	4b25      	ldr	r3, [pc, #148]	; (1bf8 <step_motor+0xdc>)
    1b62:	681b      	ldr	r3, [r3, #0]
    1b64:	2b00      	cmp	r3, #0
    1b66:	da02      	bge.n	1b6e <step_motor+0x52>
			{
				current_step_stage = (NUMBER_STEPS-1);
    1b68:	4b23      	ldr	r3, [pc, #140]	; (1bf8 <step_motor+0xdc>)
    1b6a:	2203      	movs	r2, #3
    1b6c:	601a      	str	r2, [r3, #0]
		for(i = 0; i < steps; i++)
    1b6e:	68fb      	ldr	r3, [r7, #12]
    1b70:	3301      	adds	r3, #1
    1b72:	60fb      	str	r3, [r7, #12]
    1b74:	68fa      	ldr	r2, [r7, #12]
    1b76:	687b      	ldr	r3, [r7, #4]
    1b78:	429a      	cmp	r2, r3
    1b7a:	dbdf      	blt.n	1b3c <step_motor+0x20>
    1b7c:	e025      	b.n	1bca <step_motor+0xae>
			}
		}
	}
	else if(steps < 0)
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	2b00      	cmp	r3, #0
    1b82:	da22      	bge.n	1bca <step_motor+0xae>
	{
		for(i = 0; i > steps; i--)
    1b84:	2300      	movs	r3, #0
    1b86:	60fb      	str	r3, [r7, #12]
    1b88:	e01b      	b.n	1bc2 <step_motor+0xa6>
		{
			// Number of steps
			drive_phase(current_step_stage);
    1b8a:	4b1b      	ldr	r3, [pc, #108]	; (1bf8 <step_motor+0xdc>)
    1b8c:	681b      	ldr	r3, [r3, #0]
    1b8e:	b2db      	uxtb	r3, r3
    1b90:	0018      	movs	r0, r3
    1b92:	4b1a      	ldr	r3, [pc, #104]	; (1bfc <step_motor+0xe0>)
    1b94:	4798      	blx	r3
			current_step_stage--;
    1b96:	4b18      	ldr	r3, [pc, #96]	; (1bf8 <step_motor+0xdc>)
    1b98:	681b      	ldr	r3, [r3, #0]
    1b9a:	1e5a      	subs	r2, r3, #1
    1b9c:	4b16      	ldr	r3, [pc, #88]	; (1bf8 <step_motor+0xdc>)
    1b9e:	601a      	str	r2, [r3, #0]
			if(current_step_stage >= NUMBER_STEPS)
    1ba0:	4b15      	ldr	r3, [pc, #84]	; (1bf8 <step_motor+0xdc>)
    1ba2:	681b      	ldr	r3, [r3, #0]
    1ba4:	2b03      	cmp	r3, #3
    1ba6:	dd02      	ble.n	1bae <step_motor+0x92>
			{
				current_step_stage = 0;
    1ba8:	4b13      	ldr	r3, [pc, #76]	; (1bf8 <step_motor+0xdc>)
    1baa:	2200      	movs	r2, #0
    1bac:	601a      	str	r2, [r3, #0]
			}
			if(current_step_stage < 0)
    1bae:	4b12      	ldr	r3, [pc, #72]	; (1bf8 <step_motor+0xdc>)
    1bb0:	681b      	ldr	r3, [r3, #0]
    1bb2:	2b00      	cmp	r3, #0
    1bb4:	da02      	bge.n	1bbc <step_motor+0xa0>
			{
				current_step_stage = (NUMBER_STEPS-1);
    1bb6:	4b10      	ldr	r3, [pc, #64]	; (1bf8 <step_motor+0xdc>)
    1bb8:	2203      	movs	r2, #3
    1bba:	601a      	str	r2, [r3, #0]
		for(i = 0; i > steps; i--)
    1bbc:	68fb      	ldr	r3, [r7, #12]
    1bbe:	3b01      	subs	r3, #1
    1bc0:	60fb      	str	r3, [r7, #12]
    1bc2:	68fa      	ldr	r2, [r7, #12]
    1bc4:	687b      	ldr	r3, [r7, #4]
    1bc6:	429a      	cmp	r2, r3
    1bc8:	dcdf      	bgt.n	1b8a <step_motor+0x6e>
			}
		}
	}

	// Turn off all coils
	for (i = 0; i < NUMBER_COILS; i++)
    1bca:	2300      	movs	r3, #0
    1bcc:	60fb      	str	r3, [r7, #12]
    1bce:	e00a      	b.n	1be6 <step_motor+0xca>
	{
		ioport_set_pin_level(coil_pins[i], !COIL_ACTIVE_LEVEL);
    1bd0:	4b0b      	ldr	r3, [pc, #44]	; (1c00 <step_motor+0xe4>)
    1bd2:	68fa      	ldr	r2, [r7, #12]
    1bd4:	0092      	lsls	r2, r2, #2
    1bd6:	58d3      	ldr	r3, [r2, r3]
    1bd8:	2100      	movs	r1, #0
    1bda:	0018      	movs	r0, r3
    1bdc:	4b09      	ldr	r3, [pc, #36]	; (1c04 <step_motor+0xe8>)
    1bde:	4798      	blx	r3
	for (i = 0; i < NUMBER_COILS; i++)
    1be0:	68fb      	ldr	r3, [r7, #12]
    1be2:	3301      	adds	r3, #1
    1be4:	60fb      	str	r3, [r7, #12]
    1be6:	68fb      	ldr	r3, [r7, #12]
    1be8:	2b03      	cmp	r3, #3
    1bea:	ddf1      	ble.n	1bd0 <step_motor+0xb4>
	}
}
    1bec:	46c0      	nop			; (mov r8, r8)
    1bee:	46bd      	mov	sp, r7
    1bf0:	b004      	add	sp, #16
    1bf2:	bd80      	pop	{r7, pc}
    1bf4:	200000ac 	.word	0x200000ac
    1bf8:	200000c0 	.word	0x200000c0
    1bfc:	00001a25 	.word	0x00001a25
    1c00:	00004a70 	.word	0x00004a70
    1c04:	00001949 	.word	0x00001949

00001c08 <calculate_current_angle_deg>:

static float calculate_current_angle_deg(void)
{
    1c08:	b590      	push	{r4, r7, lr}
    1c0a:	b085      	sub	sp, #20
    1c0c:	af00      	add	r7, sp, #0
	float position_mm = MM_PER_STEP * current_step;
    1c0e:	4b27      	ldr	r3, [pc, #156]	; (1cac <calculate_current_angle_deg+0xa4>)
    1c10:	681a      	ldr	r2, [r3, #0]
    1c12:	4b27      	ldr	r3, [pc, #156]	; (1cb0 <calculate_current_angle_deg+0xa8>)
    1c14:	0010      	movs	r0, r2
    1c16:	4798      	blx	r3
    1c18:	4c26      	ldr	r4, [pc, #152]	; (1cb4 <calculate_current_angle_deg+0xac>)
    1c1a:	4a27      	ldr	r2, [pc, #156]	; (1cb8 <calculate_current_angle_deg+0xb0>)
    1c1c:	4b27      	ldr	r3, [pc, #156]	; (1cbc <calculate_current_angle_deg+0xb4>)
    1c1e:	47a0      	blx	r4
    1c20:	0003      	movs	r3, r0
    1c22:	000c      	movs	r4, r1
    1c24:	0019      	movs	r1, r3
    1c26:	0022      	movs	r2, r4
    1c28:	4b25      	ldr	r3, [pc, #148]	; (1cc0 <calculate_current_angle_deg+0xb8>)
    1c2a:	0008      	movs	r0, r1
    1c2c:	0011      	movs	r1, r2
    1c2e:	4798      	blx	r3
    1c30:	1c03      	adds	r3, r0, #0
    1c32:	60fb      	str	r3, [r7, #12]
	float this_arg = 1.0 - ((position_mm * position_mm)/(2.0 * L_MM * L_MM));
    1c34:	4b23      	ldr	r3, [pc, #140]	; (1cc4 <calculate_current_angle_deg+0xbc>)
    1c36:	68f9      	ldr	r1, [r7, #12]
    1c38:	68f8      	ldr	r0, [r7, #12]
    1c3a:	4798      	blx	r3
    1c3c:	1c03      	adds	r3, r0, #0
    1c3e:	1c1a      	adds	r2, r3, #0
    1c40:	4b21      	ldr	r3, [pc, #132]	; (1cc8 <calculate_current_angle_deg+0xc0>)
    1c42:	1c10      	adds	r0, r2, #0
    1c44:	4798      	blx	r3
    1c46:	4c21      	ldr	r4, [pc, #132]	; (1ccc <calculate_current_angle_deg+0xc4>)
    1c48:	2200      	movs	r2, #0
    1c4a:	4b21      	ldr	r3, [pc, #132]	; (1cd0 <calculate_current_angle_deg+0xc8>)
    1c4c:	47a0      	blx	r4
    1c4e:	0003      	movs	r3, r0
    1c50:	000c      	movs	r4, r1
    1c52:	001a      	movs	r2, r3
    1c54:	0023      	movs	r3, r4
    1c56:	4c1f      	ldr	r4, [pc, #124]	; (1cd4 <calculate_current_angle_deg+0xcc>)
    1c58:	2000      	movs	r0, #0
    1c5a:	491f      	ldr	r1, [pc, #124]	; (1cd8 <calculate_current_angle_deg+0xd0>)
    1c5c:	47a0      	blx	r4
    1c5e:	0003      	movs	r3, r0
    1c60:	000c      	movs	r4, r1
    1c62:	0019      	movs	r1, r3
    1c64:	0022      	movs	r2, r4
    1c66:	4b16      	ldr	r3, [pc, #88]	; (1cc0 <calculate_current_angle_deg+0xb8>)
    1c68:	0008      	movs	r0, r1
    1c6a:	0011      	movs	r1, r2
    1c6c:	4798      	blx	r3
    1c6e:	1c03      	adds	r3, r0, #0
    1c70:	60bb      	str	r3, [r7, #8]
	float theta = RAD_TO_DEG * acos( this_arg );
    1c72:	4b15      	ldr	r3, [pc, #84]	; (1cc8 <calculate_current_angle_deg+0xc0>)
    1c74:	68b8      	ldr	r0, [r7, #8]
    1c76:	4798      	blx	r3
    1c78:	0003      	movs	r3, r0
    1c7a:	000c      	movs	r4, r1
    1c7c:	0018      	movs	r0, r3
    1c7e:	0021      	movs	r1, r4
    1c80:	4b16      	ldr	r3, [pc, #88]	; (1cdc <calculate_current_angle_deg+0xd4>)
    1c82:	4798      	blx	r3
    1c84:	4c0b      	ldr	r4, [pc, #44]	; (1cb4 <calculate_current_angle_deg+0xac>)
    1c86:	4a16      	ldr	r2, [pc, #88]	; (1ce0 <calculate_current_angle_deg+0xd8>)
    1c88:	4b16      	ldr	r3, [pc, #88]	; (1ce4 <calculate_current_angle_deg+0xdc>)
    1c8a:	47a0      	blx	r4
    1c8c:	0003      	movs	r3, r0
    1c8e:	000c      	movs	r4, r1
    1c90:	0019      	movs	r1, r3
    1c92:	0022      	movs	r2, r4
    1c94:	4b0a      	ldr	r3, [pc, #40]	; (1cc0 <calculate_current_angle_deg+0xb8>)
    1c96:	0008      	movs	r0, r1
    1c98:	0011      	movs	r1, r2
    1c9a:	4798      	blx	r3
    1c9c:	1c03      	adds	r3, r0, #0
    1c9e:	607b      	str	r3, [r7, #4]
	return theta;
    1ca0:	687b      	ldr	r3, [r7, #4]
}
    1ca2:	1c18      	adds	r0, r3, #0
    1ca4:	46bd      	mov	sp, r7
    1ca6:	b005      	add	sp, #20
    1ca8:	bd90      	pop	{r4, r7, pc}
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	200000ac 	.word	0x200000ac
    1cb0:	000046ed 	.word	0x000046ed
    1cb4:	00003b81 	.word	0x00003b81
    1cb8:	c7337c05 	.word	0xc7337c05
    1cbc:	3f39ba1f 	.word	0x3f39ba1f
    1cc0:	00004885 	.word	0x00004885
    1cc4:	00002741 	.word	0x00002741
    1cc8:	000047e1 	.word	0x000047e1
    1ccc:	00003319 	.word	0x00003319
    1cd0:	40cef100 	.word	0x40cef100
    1cd4:	00004081 	.word	0x00004081
    1cd8:	3ff00000 	.word	0x3ff00000
    1cdc:	00001f29 	.word	0x00001f29
    1ce0:	c63f1412 	.word	0xc63f1412
    1ce4:	404ca5dc 	.word	0x404ca5dc

00001ce8 <main>:

int main (void)
{
    1ce8:	b590      	push	{r4, r7, lr}
    1cea:	b08b      	sub	sp, #44	; 0x2c
    1cec:	af00      	add	r7, sp, #0
	system_init();
    1cee:	4b6f      	ldr	r3, [pc, #444]	; (1eac <main+0x1c4>)
    1cf0:	4798      	blx	r3
	delay_init();
    1cf2:	4b6f      	ldr	r3, [pc, #444]	; (1eb0 <main+0x1c8>)
    1cf4:	4798      	blx	r3

	// Set up RTC for timing
	struct rtc_count_config rtc_config;
	rtc_count_get_config_defaults(&rtc_config);
    1cf6:	1d3b      	adds	r3, r7, #4
    1cf8:	0018      	movs	r0, r3
    1cfa:	4b6e      	ldr	r3, [pc, #440]	; (1eb4 <main+0x1cc>)
    1cfc:	4798      	blx	r3
	rtc_config.mode = RTC_COUNT_MODE_32BIT;
    1cfe:	1d3b      	adds	r3, r7, #4
    1d00:	2201      	movs	r2, #1
    1d02:	709a      	strb	r2, [r3, #2]
	rtc_config.prescaler = RTC_COUNT_PRESCALER_DIV_32; // Already 1.024Hz
    1d04:	1d3b      	adds	r3, r7, #4
    1d06:	22a0      	movs	r2, #160	; 0xa0
    1d08:	00d2      	lsls	r2, r2, #3
    1d0a:	801a      	strh	r2, [r3, #0]

	rtc_count_init(&module, RTC, &rtc_config);
    1d0c:	1d3a      	adds	r2, r7, #4
    1d0e:	496a      	ldr	r1, [pc, #424]	; (1eb8 <main+0x1d0>)
    1d10:	4b6a      	ldr	r3, [pc, #424]	; (1ebc <main+0x1d4>)
    1d12:	0018      	movs	r0, r3
    1d14:	4b6a      	ldr	r3, [pc, #424]	; (1ec0 <main+0x1d8>)
    1d16:	4798      	blx	r3
	rtc_count_reset(&module);
    1d18:	4b68      	ldr	r3, [pc, #416]	; (1ebc <main+0x1d4>)
    1d1a:	0018      	movs	r0, r3
    1d1c:	4b69      	ldr	r3, [pc, #420]	; (1ec4 <main+0x1dc>)
    1d1e:	4798      	blx	r3
	rtc_count_set_count(&module, 0);
    1d20:	4b66      	ldr	r3, [pc, #408]	; (1ebc <main+0x1d4>)
    1d22:	2100      	movs	r1, #0
    1d24:	0018      	movs	r0, r3
    1d26:	4b68      	ldr	r3, [pc, #416]	; (1ec8 <main+0x1e0>)
    1d28:	4798      	blx	r3
	rtc_count_enable(&module);
    1d2a:	4b64      	ldr	r3, [pc, #400]	; (1ebc <main+0x1d4>)
    1d2c:	0018      	movs	r0, r3
    1d2e:	4b67      	ldr	r3, [pc, #412]	; (1ecc <main+0x1e4>)
    1d30:	4798      	blx	r3


	delay_ms(100);
    1d32:	2064      	movs	r0, #100	; 0x64
    1d34:	4b66      	ldr	r3, [pc, #408]	; (1ed0 <main+0x1e8>)
    1d36:	4798      	blx	r3

	while(1)
	{
		
		delay_ms(2);
    1d38:	2002      	movs	r0, #2
    1d3a:	4b65      	ldr	r3, [pc, #404]	; (1ed0 <main+0x1e8>)
    1d3c:	4798      	blx	r3
		if(!controlled_movement)
    1d3e:	4b65      	ldr	r3, [pc, #404]	; (1ed4 <main+0x1ec>)
    1d40:	781b      	ldrb	r3, [r3, #0]
    1d42:	2201      	movs	r2, #1
    1d44:	4053      	eors	r3, r2
    1d46:	b2db      	uxtb	r3, r3
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d002      	beq.n	1d52 <main+0x6a>
		{
			delay_ms(200);
    1d4c:	20c8      	movs	r0, #200	; 0xc8
    1d4e:	4b60      	ldr	r3, [pc, #384]	; (1ed0 <main+0x1e8>)
    1d50:	4798      	blx	r3
		}
		if(ioport_get_pin_level(BUTTON_1_PIN) == IOPORT_PIN_LEVEL_LOW && ioport_get_pin_level(BUTTON_2_PIN) == IOPORT_PIN_LEVEL_HIGH)
    1d52:	2036      	movs	r0, #54	; 0x36
    1d54:	4b60      	ldr	r3, [pc, #384]	; (1ed8 <main+0x1f0>)
    1d56:	4798      	blx	r3
    1d58:	0003      	movs	r3, r0
    1d5a:	001a      	movs	r2, r3
    1d5c:	2301      	movs	r3, #1
    1d5e:	4053      	eors	r3, r2
    1d60:	b2db      	uxtb	r3, r3
    1d62:	2b00      	cmp	r3, #0
    1d64:	d00e      	beq.n	1d84 <main+0x9c>
    1d66:	200f      	movs	r0, #15
    1d68:	4b5b      	ldr	r3, [pc, #364]	; (1ed8 <main+0x1f0>)
    1d6a:	4798      	blx	r3
    1d6c:	1e03      	subs	r3, r0, #0
    1d6e:	d009      	beq.n	1d84 <main+0x9c>
		{
			step_motor(200);
    1d70:	20c8      	movs	r0, #200	; 0xc8
    1d72:	4b5a      	ldr	r3, [pc, #360]	; (1edc <main+0x1f4>)
    1d74:	4798      	blx	r3
			controlled_movement = false;
    1d76:	4b57      	ldr	r3, [pc, #348]	; (1ed4 <main+0x1ec>)
    1d78:	2200      	movs	r2, #0
    1d7a:	701a      	strb	r2, [r3, #0]
			delay_ms(50);
    1d7c:	2032      	movs	r0, #50	; 0x32
    1d7e:	4b54      	ldr	r3, [pc, #336]	; (1ed0 <main+0x1e8>)
    1d80:	4798      	blx	r3
    1d82:	e019      	b.n	1db8 <main+0xd0>
		}
		else if(ioport_get_pin_level(BUTTON_2_PIN) == IOPORT_PIN_LEVEL_LOW && ioport_get_pin_level(BUTTON_1_PIN) == IOPORT_PIN_LEVEL_HIGH)
    1d84:	200f      	movs	r0, #15
    1d86:	4b54      	ldr	r3, [pc, #336]	; (1ed8 <main+0x1f0>)
    1d88:	4798      	blx	r3
    1d8a:	0003      	movs	r3, r0
    1d8c:	001a      	movs	r2, r3
    1d8e:	2301      	movs	r3, #1
    1d90:	4053      	eors	r3, r2
    1d92:	b2db      	uxtb	r3, r3
    1d94:	2b00      	cmp	r3, #0
    1d96:	d00f      	beq.n	1db8 <main+0xd0>
    1d98:	2036      	movs	r0, #54	; 0x36
    1d9a:	4b4f      	ldr	r3, [pc, #316]	; (1ed8 <main+0x1f0>)
    1d9c:	4798      	blx	r3
    1d9e:	1e03      	subs	r3, r0, #0
    1da0:	d00a      	beq.n	1db8 <main+0xd0>
		{
			step_motor(-200);
    1da2:	23c8      	movs	r3, #200	; 0xc8
    1da4:	425b      	negs	r3, r3
    1da6:	0018      	movs	r0, r3
    1da8:	4b4c      	ldr	r3, [pc, #304]	; (1edc <main+0x1f4>)
    1daa:	4798      	blx	r3
			controlled_movement = false;
    1dac:	4b49      	ldr	r3, [pc, #292]	; (1ed4 <main+0x1ec>)
    1dae:	2200      	movs	r2, #0
    1db0:	701a      	strb	r2, [r3, #0]
			delay_ms(50);
    1db2:	2032      	movs	r0, #50	; 0x32
    1db4:	4b46      	ldr	r3, [pc, #280]	; (1ed0 <main+0x1e8>)
    1db6:	4798      	blx	r3
		}
		
		if(ioport_get_pin_level(BUTTON_1_PIN) == IOPORT_PIN_LEVEL_LOW && ioport_get_pin_level(BUTTON_2_PIN) == IOPORT_PIN_LEVEL_LOW)
    1db8:	2036      	movs	r0, #54	; 0x36
    1dba:	4b47      	ldr	r3, [pc, #284]	; (1ed8 <main+0x1f0>)
    1dbc:	4798      	blx	r3
    1dbe:	0003      	movs	r3, r0
    1dc0:	001a      	movs	r2, r3
    1dc2:	2301      	movs	r3, #1
    1dc4:	4053      	eors	r3, r2
    1dc6:	b2db      	uxtb	r3, r3
    1dc8:	2b00      	cmp	r3, #0
    1dca:	d019      	beq.n	1e00 <main+0x118>
    1dcc:	200f      	movs	r0, #15
    1dce:	4b42      	ldr	r3, [pc, #264]	; (1ed8 <main+0x1f0>)
    1dd0:	4798      	blx	r3
    1dd2:	0003      	movs	r3, r0
    1dd4:	001a      	movs	r2, r3
    1dd6:	2301      	movs	r3, #1
    1dd8:	4053      	eors	r3, r2
    1dda:	b2db      	uxtb	r3, r3
    1ddc:	2b00      	cmp	r3, #0
    1dde:	d00f      	beq.n	1e00 <main+0x118>
		{
			delay_ms(1000); // debounce
    1de0:	23fa      	movs	r3, #250	; 0xfa
    1de2:	009b      	lsls	r3, r3, #2
    1de4:	0018      	movs	r0, r3
    1de6:	4b3a      	ldr	r3, [pc, #232]	; (1ed0 <main+0x1e8>)
    1de8:	4798      	blx	r3
			start_movement_time = get_current_time_ms();
    1dea:	4b3d      	ldr	r3, [pc, #244]	; (1ee0 <main+0x1f8>)
    1dec:	4798      	blx	r3
    1dee:	0002      	movs	r2, r0
    1df0:	4b3c      	ldr	r3, [pc, #240]	; (1ee4 <main+0x1fc>)
    1df2:	601a      	str	r2, [r3, #0]
			current_step = 0;
    1df4:	4b3c      	ldr	r3, [pc, #240]	; (1ee8 <main+0x200>)
    1df6:	2200      	movs	r2, #0
    1df8:	601a      	str	r2, [r3, #0]
			controlled_movement = true;
    1dfa:	4b36      	ldr	r3, [pc, #216]	; (1ed4 <main+0x1ec>)
    1dfc:	2201      	movs	r2, #1
    1dfe:	701a      	strb	r2, [r3, #0]
		}

		if(controlled_movement)
    1e00:	4b34      	ldr	r3, [pc, #208]	; (1ed4 <main+0x1ec>)
    1e02:	781b      	ldrb	r3, [r3, #0]
    1e04:	2b00      	cmp	r3, #0
    1e06:	d097      	beq.n	1d38 <main+0x50>
		{
			uint32_t time_into_control_ms = get_current_time_ms() - start_movement_time;
    1e08:	4b35      	ldr	r3, [pc, #212]	; (1ee0 <main+0x1f8>)
    1e0a:	4798      	blx	r3
    1e0c:	0002      	movs	r2, r0
    1e0e:	4b35      	ldr	r3, [pc, #212]	; (1ee4 <main+0x1fc>)
    1e10:	681b      	ldr	r3, [r3, #0]
    1e12:	1ad3      	subs	r3, r2, r3
    1e14:	627b      	str	r3, [r7, #36]	; 0x24
			float time_into_control_s = (time_into_control_ms * 0.001);
    1e16:	4b35      	ldr	r3, [pc, #212]	; (1eec <main+0x204>)
    1e18:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1e1a:	4798      	blx	r3
    1e1c:	4c34      	ldr	r4, [pc, #208]	; (1ef0 <main+0x208>)
    1e1e:	4a35      	ldr	r2, [pc, #212]	; (1ef4 <main+0x20c>)
    1e20:	4b35      	ldr	r3, [pc, #212]	; (1ef8 <main+0x210>)
    1e22:	47a0      	blx	r4
    1e24:	0003      	movs	r3, r0
    1e26:	000c      	movs	r4, r1
    1e28:	0019      	movs	r1, r3
    1e2a:	0022      	movs	r2, r4
    1e2c:	4b33      	ldr	r3, [pc, #204]	; (1efc <main+0x214>)
    1e2e:	0008      	movs	r0, r1
    1e30:	0011      	movs	r1, r2
    1e32:	4798      	blx	r3
    1e34:	1c03      	adds	r3, r0, #0
    1e36:	623b      	str	r3, [r7, #32]
			float desired_angle_deg = time_into_control_s * DEG_PER_SECOND;
    1e38:	4b31      	ldr	r3, [pc, #196]	; (1f00 <main+0x218>)
    1e3a:	6a38      	ldr	r0, [r7, #32]
    1e3c:	4798      	blx	r3
    1e3e:	4c2c      	ldr	r4, [pc, #176]	; (1ef0 <main+0x208>)
    1e40:	4a30      	ldr	r2, [pc, #192]	; (1f04 <main+0x21c>)
    1e42:	4b31      	ldr	r3, [pc, #196]	; (1f08 <main+0x220>)
    1e44:	47a0      	blx	r4
    1e46:	0003      	movs	r3, r0
    1e48:	000c      	movs	r4, r1
    1e4a:	0019      	movs	r1, r3
    1e4c:	0022      	movs	r2, r4
    1e4e:	4b2b      	ldr	r3, [pc, #172]	; (1efc <main+0x214>)
    1e50:	0008      	movs	r0, r1
    1e52:	0011      	movs	r1, r2
    1e54:	4798      	blx	r3
    1e56:	1c03      	adds	r3, r0, #0
    1e58:	61fb      	str	r3, [r7, #28]

			// Simple P controller
			float current_angle_deg = calculate_current_angle_deg();
    1e5a:	4b2c      	ldr	r3, [pc, #176]	; (1f0c <main+0x224>)
    1e5c:	4798      	blx	r3
    1e5e:	1c03      	adds	r3, r0, #0
    1e60:	61bb      	str	r3, [r7, #24]
			int32_t steps_to_move = (int32_t) 50.0 * (desired_angle_deg - current_angle_deg); // move out is positive steps
    1e62:	4b2b      	ldr	r3, [pc, #172]	; (1f10 <main+0x228>)
    1e64:	69b9      	ldr	r1, [r7, #24]
    1e66:	69f8      	ldr	r0, [r7, #28]
    1e68:	4798      	blx	r3
    1e6a:	1c03      	adds	r3, r0, #0
    1e6c:	1c1a      	adds	r2, r3, #0
    1e6e:	4b29      	ldr	r3, [pc, #164]	; (1f14 <main+0x22c>)
    1e70:	4929      	ldr	r1, [pc, #164]	; (1f18 <main+0x230>)
    1e72:	1c10      	adds	r0, r2, #0
    1e74:	4798      	blx	r3
    1e76:	1c03      	adds	r3, r0, #0
    1e78:	1c1a      	adds	r2, r3, #0
    1e7a:	4b28      	ldr	r3, [pc, #160]	; (1f1c <main+0x234>)
    1e7c:	1c10      	adds	r0, r2, #0
    1e7e:	4798      	blx	r3
    1e80:	0003      	movs	r3, r0
    1e82:	617b      	str	r3, [r7, #20]
			step_motor(steps_to_move);
    1e84:	697b      	ldr	r3, [r7, #20]
    1e86:	0018      	movs	r0, r3
    1e88:	4b14      	ldr	r3, [pc, #80]	; (1edc <main+0x1f4>)
    1e8a:	4798      	blx	r3

			static uint32_t last_cycle_t = 0;
			if((get_current_time_ms() - last_cycle_t) > 5000)
    1e8c:	4b14      	ldr	r3, [pc, #80]	; (1ee0 <main+0x1f8>)
    1e8e:	4798      	blx	r3
    1e90:	0002      	movs	r2, r0
    1e92:	4b23      	ldr	r3, [pc, #140]	; (1f20 <main+0x238>)
    1e94:	681b      	ldr	r3, [r3, #0]
    1e96:	1ad3      	subs	r3, r2, r3
    1e98:	4a22      	ldr	r2, [pc, #136]	; (1f24 <main+0x23c>)
    1e9a:	4293      	cmp	r3, r2
    1e9c:	d800      	bhi.n	1ea0 <main+0x1b8>
    1e9e:	e74b      	b.n	1d38 <main+0x50>
			{
				last_cycle_t = get_current_time_ms();
    1ea0:	4b0f      	ldr	r3, [pc, #60]	; (1ee0 <main+0x1f8>)
    1ea2:	4798      	blx	r3
    1ea4:	0002      	movs	r2, r0
    1ea6:	4b1e      	ldr	r3, [pc, #120]	; (1f20 <main+0x238>)
    1ea8:	601a      	str	r2, [r3, #0]
		delay_ms(2);
    1eaa:	e745      	b.n	1d38 <main+0x50>
    1eac:	0000170d 	.word	0x0000170d
    1eb0:	00000149 	.word	0x00000149
    1eb4:	00001991 	.word	0x00001991
    1eb8:	40001400 	.word	0x40001400
    1ebc:	200000b8 	.word	0x200000b8
    1ec0:	00000bbd 	.word	0x00000bbd
    1ec4:	00000a49 	.word	0x00000a49
    1ec8:	00000c4d 	.word	0x00000c4d
    1ecc:	000009cd 	.word	0x000009cd
    1ed0:	000001d1 	.word	0x000001d1
    1ed4:	200000b0 	.word	0x200000b0
    1ed8:	00001971 	.word	0x00001971
    1edc:	00001b1d 	.word	0x00001b1d
    1ee0:	000019ed 	.word	0x000019ed
    1ee4:	200000b4 	.word	0x200000b4
    1ee8:	200000ac 	.word	0x200000ac
    1eec:	00004771 	.word	0x00004771
    1ef0:	00003b81 	.word	0x00003b81
    1ef4:	d2f1a9fc 	.word	0xd2f1a9fc
    1ef8:	3f50624d 	.word	0x3f50624d
    1efc:	00004885 	.word	0x00004885
    1f00:	000047e1 	.word	0x000047e1
    1f04:	2bc4a9e9 	.word	0x2bc4a9e9
    1f08:	3f7110ff 	.word	0x3f7110ff
    1f0c:	00001c09 	.word	0x00001c09
    1f10:	00002981 	.word	0x00002981
    1f14:	00002741 	.word	0x00002741
    1f18:	42480000 	.word	0x42480000
    1f1c:	00002cb9 	.word	0x00002cb9
    1f20:	200000c4 	.word	0x200000c4
    1f24:	00001388 	.word	0x00001388

00001f28 <acos>:
    1f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f2a:	4647      	mov	r7, r8
    1f2c:	46ce      	mov	lr, r9
    1f2e:	b580      	push	{r7, lr}
    1f30:	b08d      	sub	sp, #52	; 0x34
    1f32:	0004      	movs	r4, r0
    1f34:	000d      	movs	r5, r1
    1f36:	f000 f857 	bl	1fe8 <__ieee754_acos>
    1f3a:	4b27      	ldr	r3, [pc, #156]	; (1fd8 <acos+0xb0>)
    1f3c:	0006      	movs	r6, r0
    1f3e:	4698      	mov	r8, r3
    1f40:	781b      	ldrb	r3, [r3, #0]
    1f42:	000f      	movs	r7, r1
    1f44:	b25b      	sxtb	r3, r3
    1f46:	3301      	adds	r3, #1
    1f48:	d031      	beq.n	1fae <acos+0x86>
    1f4a:	0022      	movs	r2, r4
    1f4c:	002b      	movs	r3, r5
    1f4e:	0020      	movs	r0, r4
    1f50:	0029      	movs	r1, r5
    1f52:	f002 fbab 	bl	46ac <__aeabi_dcmpun>
    1f56:	4681      	mov	r9, r0
    1f58:	2800      	cmp	r0, #0
    1f5a:	d128      	bne.n	1fae <acos+0x86>
    1f5c:	0020      	movs	r0, r4
    1f5e:	0029      	movs	r1, r5
    1f60:	f000 fb18 	bl	2594 <fabs>
    1f64:	2200      	movs	r2, #0
    1f66:	4b1d      	ldr	r3, [pc, #116]	; (1fdc <acos+0xb4>)
    1f68:	f000 fbd6 	bl	2718 <__aeabi_dcmpgt>
    1f6c:	2800      	cmp	r0, #0
    1f6e:	d01e      	beq.n	1fae <acos+0x86>
    1f70:	2301      	movs	r3, #1
    1f72:	9302      	str	r3, [sp, #8]
    1f74:	4b1a      	ldr	r3, [pc, #104]	; (1fe0 <acos+0xb8>)
    1f76:	481b      	ldr	r0, [pc, #108]	; (1fe4 <acos+0xbc>)
    1f78:	9303      	str	r3, [sp, #12]
    1f7a:	464b      	mov	r3, r9
    1f7c:	9406      	str	r4, [sp, #24]
    1f7e:	9507      	str	r5, [sp, #28]
    1f80:	930a      	str	r3, [sp, #40]	; 0x28
    1f82:	9404      	str	r4, [sp, #16]
    1f84:	9505      	str	r5, [sp, #20]
    1f86:	f000 fb0b 	bl	25a0 <nan>
    1f8a:	4643      	mov	r3, r8
    1f8c:	781b      	ldrb	r3, [r3, #0]
    1f8e:	9008      	str	r0, [sp, #32]
    1f90:	9109      	str	r1, [sp, #36]	; 0x24
    1f92:	b25b      	sxtb	r3, r3
    1f94:	2b02      	cmp	r3, #2
    1f96:	d011      	beq.n	1fbc <acos+0x94>
    1f98:	a802      	add	r0, sp, #8
    1f9a:	f000 faff 	bl	259c <matherr>
    1f9e:	2800      	cmp	r0, #0
    1fa0:	d00c      	beq.n	1fbc <acos+0x94>
    1fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1fa4:	9301      	str	r3, [sp, #4]
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	d110      	bne.n	1fcc <acos+0xa4>
    1faa:	9e08      	ldr	r6, [sp, #32]
    1fac:	9f09      	ldr	r7, [sp, #36]	; 0x24
    1fae:	0030      	movs	r0, r6
    1fb0:	0039      	movs	r1, r7
    1fb2:	b00d      	add	sp, #52	; 0x34
    1fb4:	bc0c      	pop	{r2, r3}
    1fb6:	4690      	mov	r8, r2
    1fb8:	4699      	mov	r9, r3
    1fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fbc:	f002 fd0a 	bl	49d4 <__errno>
    1fc0:	2321      	movs	r3, #33	; 0x21
    1fc2:	6003      	str	r3, [r0, #0]
    1fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1fc6:	9301      	str	r3, [sp, #4]
    1fc8:	2b00      	cmp	r3, #0
    1fca:	d0ee      	beq.n	1faa <acos+0x82>
    1fcc:	f002 fd02 	bl	49d4 <__errno>
    1fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1fd2:	9301      	str	r3, [sp, #4]
    1fd4:	6003      	str	r3, [r0, #0]
    1fd6:	e7e8      	b.n	1faa <acos+0x82>
    1fd8:	20000009 	.word	0x20000009
    1fdc:	3ff00000 	.word	0x3ff00000
    1fe0:	00004a80 	.word	0x00004a80
    1fe4:	00004a84 	.word	0x00004a84

00001fe8 <__ieee754_acos>:
    1fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fea:	4adb      	ldr	r2, [pc, #876]	; (2358 <STACK_SIZE+0x358>)
    1fec:	004b      	lsls	r3, r1, #1
    1fee:	b085      	sub	sp, #20
    1ff0:	0007      	movs	r7, r0
    1ff2:	000e      	movs	r6, r1
    1ff4:	085b      	lsrs	r3, r3, #1
    1ff6:	4293      	cmp	r3, r2
    1ff8:	dd0c      	ble.n	2014 <STACK_SIZE+0x14>
    1ffa:	4ad8      	ldr	r2, [pc, #864]	; (235c <STACK_SIZE+0x35c>)
    1ffc:	4694      	mov	ip, r2
    1ffe:	4463      	add	r3, ip
    2000:	4303      	orrs	r3, r0
    2002:	d000      	beq.n	2006 <STACK_SIZE+0x6>
    2004:	e0ac      	b.n	2160 <STACK_SIZE+0x160>
    2006:	2900      	cmp	r1, #0
    2008:	dc00      	bgt.n	200c <STACK_SIZE+0xc>
    200a:	e125      	b.n	2258 <STACK_SIZE+0x258>
    200c:	2000      	movs	r0, #0
    200e:	2100      	movs	r1, #0
    2010:	b005      	add	sp, #20
    2012:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2014:	4ad2      	ldr	r2, [pc, #840]	; (2360 <STACK_SIZE+0x360>)
    2016:	4293      	cmp	r3, r2
    2018:	dc00      	bgt.n	201c <STACK_SIZE+0x1c>
    201a:	e09b      	b.n	2154 <STACK_SIZE+0x154>
    201c:	2900      	cmp	r1, #0
    201e:	da00      	bge.n	2022 <STACK_SIZE+0x22>
    2020:	e11d      	b.n	225e <STACK_SIZE+0x25e>
    2022:	0002      	movs	r2, r0
    2024:	000b      	movs	r3, r1
    2026:	2000      	movs	r0, #0
    2028:	49ce      	ldr	r1, [pc, #824]	; (2364 <STACK_SIZE+0x364>)
    202a:	f002 f829 	bl	4080 <__aeabi_dsub>
    202e:	2200      	movs	r2, #0
    2030:	4bcd      	ldr	r3, [pc, #820]	; (2368 <STACK_SIZE+0x368>)
    2032:	f001 fda5 	bl	3b80 <__aeabi_dmul>
    2036:	0004      	movs	r4, r0
    2038:	000d      	movs	r5, r1
    203a:	f000 f9cb 	bl	23d4 <__ieee754_sqrt>
    203e:	4acb      	ldr	r2, [pc, #812]	; (236c <STACK_SIZE+0x36c>)
    2040:	000f      	movs	r7, r1
    2042:	9000      	str	r0, [sp, #0]
    2044:	9101      	str	r1, [sp, #4]
    2046:	4bca      	ldr	r3, [pc, #808]	; (2370 <STACK_SIZE+0x370>)
    2048:	0020      	movs	r0, r4
    204a:	0029      	movs	r1, r5
    204c:	f001 fd98 	bl	3b80 <__aeabi_dmul>
    2050:	4ac8      	ldr	r2, [pc, #800]	; (2374 <STACK_SIZE+0x374>)
    2052:	4bc9      	ldr	r3, [pc, #804]	; (2378 <STACK_SIZE+0x378>)
    2054:	f000 fe50 	bl	2cf8 <__aeabi_dadd>
    2058:	0022      	movs	r2, r4
    205a:	002b      	movs	r3, r5
    205c:	f001 fd90 	bl	3b80 <__aeabi_dmul>
    2060:	4ac6      	ldr	r2, [pc, #792]	; (237c <STACK_SIZE+0x37c>)
    2062:	4bc7      	ldr	r3, [pc, #796]	; (2380 <STACK_SIZE+0x380>)
    2064:	f002 f80c 	bl	4080 <__aeabi_dsub>
    2068:	0022      	movs	r2, r4
    206a:	002b      	movs	r3, r5
    206c:	f001 fd88 	bl	3b80 <__aeabi_dmul>
    2070:	4ac4      	ldr	r2, [pc, #784]	; (2384 <STACK_SIZE+0x384>)
    2072:	4bc5      	ldr	r3, [pc, #788]	; (2388 <STACK_SIZE+0x388>)
    2074:	f000 fe40 	bl	2cf8 <__aeabi_dadd>
    2078:	0022      	movs	r2, r4
    207a:	002b      	movs	r3, r5
    207c:	f001 fd80 	bl	3b80 <__aeabi_dmul>
    2080:	4ac2      	ldr	r2, [pc, #776]	; (238c <STACK_SIZE+0x38c>)
    2082:	4bc3      	ldr	r3, [pc, #780]	; (2390 <STACK_SIZE+0x390>)
    2084:	f001 fffc 	bl	4080 <__aeabi_dsub>
    2088:	0022      	movs	r2, r4
    208a:	002b      	movs	r3, r5
    208c:	f001 fd78 	bl	3b80 <__aeabi_dmul>
    2090:	4ac0      	ldr	r2, [pc, #768]	; (2394 <STACK_SIZE+0x394>)
    2092:	4bc1      	ldr	r3, [pc, #772]	; (2398 <STACK_SIZE+0x398>)
    2094:	f000 fe30 	bl	2cf8 <__aeabi_dadd>
    2098:	0022      	movs	r2, r4
    209a:	002b      	movs	r3, r5
    209c:	f001 fd70 	bl	3b80 <__aeabi_dmul>
    20a0:	4abe      	ldr	r2, [pc, #760]	; (239c <STACK_SIZE+0x39c>)
    20a2:	9002      	str	r0, [sp, #8]
    20a4:	9103      	str	r1, [sp, #12]
    20a6:	4bbe      	ldr	r3, [pc, #760]	; (23a0 <STACK_SIZE+0x3a0>)
    20a8:	0020      	movs	r0, r4
    20aa:	0029      	movs	r1, r5
    20ac:	f001 fd68 	bl	3b80 <__aeabi_dmul>
    20b0:	4abc      	ldr	r2, [pc, #752]	; (23a4 <STACK_SIZE+0x3a4>)
    20b2:	4bbd      	ldr	r3, [pc, #756]	; (23a8 <STACK_SIZE+0x3a8>)
    20b4:	f001 ffe4 	bl	4080 <__aeabi_dsub>
    20b8:	0022      	movs	r2, r4
    20ba:	002b      	movs	r3, r5
    20bc:	f001 fd60 	bl	3b80 <__aeabi_dmul>
    20c0:	4aba      	ldr	r2, [pc, #744]	; (23ac <STACK_SIZE+0x3ac>)
    20c2:	4bbb      	ldr	r3, [pc, #748]	; (23b0 <STACK_SIZE+0x3b0>)
    20c4:	f000 fe18 	bl	2cf8 <__aeabi_dadd>
    20c8:	0022      	movs	r2, r4
    20ca:	002b      	movs	r3, r5
    20cc:	f001 fd58 	bl	3b80 <__aeabi_dmul>
    20d0:	4ab8      	ldr	r2, [pc, #736]	; (23b4 <STACK_SIZE+0x3b4>)
    20d2:	4bb9      	ldr	r3, [pc, #740]	; (23b8 <STACK_SIZE+0x3b8>)
    20d4:	f001 ffd4 	bl	4080 <__aeabi_dsub>
    20d8:	0022      	movs	r2, r4
    20da:	002b      	movs	r3, r5
    20dc:	f001 fd50 	bl	3b80 <__aeabi_dmul>
    20e0:	2200      	movs	r2, #0
    20e2:	4ba0      	ldr	r3, [pc, #640]	; (2364 <STACK_SIZE+0x364>)
    20e4:	f000 fe08 	bl	2cf8 <__aeabi_dadd>
    20e8:	0002      	movs	r2, r0
    20ea:	000b      	movs	r3, r1
    20ec:	9802      	ldr	r0, [sp, #8]
    20ee:	9903      	ldr	r1, [sp, #12]
    20f0:	f001 f912 	bl	3318 <__aeabi_ddiv>
    20f4:	9a00      	ldr	r2, [sp, #0]
    20f6:	9b01      	ldr	r3, [sp, #4]
    20f8:	f001 fd42 	bl	3b80 <__aeabi_dmul>
    20fc:	2600      	movs	r6, #0
    20fe:	9002      	str	r0, [sp, #8]
    2100:	9103      	str	r1, [sp, #12]
    2102:	0032      	movs	r2, r6
    2104:	003b      	movs	r3, r7
    2106:	0030      	movs	r0, r6
    2108:	0039      	movs	r1, r7
    210a:	f001 fd39 	bl	3b80 <__aeabi_dmul>
    210e:	0002      	movs	r2, r0
    2110:	000b      	movs	r3, r1
    2112:	0020      	movs	r0, r4
    2114:	0029      	movs	r1, r5
    2116:	f001 ffb3 	bl	4080 <__aeabi_dsub>
    211a:	0032      	movs	r2, r6
    211c:	0004      	movs	r4, r0
    211e:	000d      	movs	r5, r1
    2120:	9800      	ldr	r0, [sp, #0]
    2122:	9901      	ldr	r1, [sp, #4]
    2124:	003b      	movs	r3, r7
    2126:	f000 fde7 	bl	2cf8 <__aeabi_dadd>
    212a:	0002      	movs	r2, r0
    212c:	000b      	movs	r3, r1
    212e:	0020      	movs	r0, r4
    2130:	0029      	movs	r1, r5
    2132:	f001 f8f1 	bl	3318 <__aeabi_ddiv>
    2136:	0002      	movs	r2, r0
    2138:	000b      	movs	r3, r1
    213a:	9802      	ldr	r0, [sp, #8]
    213c:	9903      	ldr	r1, [sp, #12]
    213e:	f000 fddb 	bl	2cf8 <__aeabi_dadd>
    2142:	0032      	movs	r2, r6
    2144:	003b      	movs	r3, r7
    2146:	f000 fdd7 	bl	2cf8 <__aeabi_dadd>
    214a:	0002      	movs	r2, r0
    214c:	000b      	movs	r3, r1
    214e:	f000 fdd3 	bl	2cf8 <__aeabi_dadd>
    2152:	e75d      	b.n	2010 <STACK_SIZE+0x10>
    2154:	4a99      	ldr	r2, [pc, #612]	; (23bc <STACK_SIZE+0x3bc>)
    2156:	4293      	cmp	r3, r2
    2158:	dc0b      	bgt.n	2172 <STACK_SIZE+0x172>
    215a:	4899      	ldr	r0, [pc, #612]	; (23c0 <STACK_SIZE+0x3c0>)
    215c:	4999      	ldr	r1, [pc, #612]	; (23c4 <STACK_SIZE+0x3c4>)
    215e:	e757      	b.n	2010 <STACK_SIZE+0x10>
    2160:	0002      	movs	r2, r0
    2162:	000b      	movs	r3, r1
    2164:	f001 ff8c 	bl	4080 <__aeabi_dsub>
    2168:	0002      	movs	r2, r0
    216a:	000b      	movs	r3, r1
    216c:	f001 f8d4 	bl	3318 <__aeabi_ddiv>
    2170:	e74e      	b.n	2010 <STACK_SIZE+0x10>
    2172:	0002      	movs	r2, r0
    2174:	000b      	movs	r3, r1
    2176:	f001 fd03 	bl	3b80 <__aeabi_dmul>
    217a:	0004      	movs	r4, r0
    217c:	000d      	movs	r5, r1
    217e:	4a7b      	ldr	r2, [pc, #492]	; (236c <STACK_SIZE+0x36c>)
    2180:	4b7b      	ldr	r3, [pc, #492]	; (2370 <STACK_SIZE+0x370>)
    2182:	f001 fcfd 	bl	3b80 <__aeabi_dmul>
    2186:	4a7b      	ldr	r2, [pc, #492]	; (2374 <STACK_SIZE+0x374>)
    2188:	4b7b      	ldr	r3, [pc, #492]	; (2378 <STACK_SIZE+0x378>)
    218a:	f000 fdb5 	bl	2cf8 <__aeabi_dadd>
    218e:	0022      	movs	r2, r4
    2190:	002b      	movs	r3, r5
    2192:	f001 fcf5 	bl	3b80 <__aeabi_dmul>
    2196:	4a79      	ldr	r2, [pc, #484]	; (237c <STACK_SIZE+0x37c>)
    2198:	4b79      	ldr	r3, [pc, #484]	; (2380 <STACK_SIZE+0x380>)
    219a:	f001 ff71 	bl	4080 <__aeabi_dsub>
    219e:	0022      	movs	r2, r4
    21a0:	002b      	movs	r3, r5
    21a2:	f001 fced 	bl	3b80 <__aeabi_dmul>
    21a6:	4a77      	ldr	r2, [pc, #476]	; (2384 <STACK_SIZE+0x384>)
    21a8:	4b77      	ldr	r3, [pc, #476]	; (2388 <STACK_SIZE+0x388>)
    21aa:	f000 fda5 	bl	2cf8 <__aeabi_dadd>
    21ae:	0022      	movs	r2, r4
    21b0:	002b      	movs	r3, r5
    21b2:	f001 fce5 	bl	3b80 <__aeabi_dmul>
    21b6:	4a75      	ldr	r2, [pc, #468]	; (238c <STACK_SIZE+0x38c>)
    21b8:	4b75      	ldr	r3, [pc, #468]	; (2390 <STACK_SIZE+0x390>)
    21ba:	f001 ff61 	bl	4080 <__aeabi_dsub>
    21be:	0022      	movs	r2, r4
    21c0:	002b      	movs	r3, r5
    21c2:	f001 fcdd 	bl	3b80 <__aeabi_dmul>
    21c6:	4a73      	ldr	r2, [pc, #460]	; (2394 <STACK_SIZE+0x394>)
    21c8:	4b73      	ldr	r3, [pc, #460]	; (2398 <STACK_SIZE+0x398>)
    21ca:	f000 fd95 	bl	2cf8 <__aeabi_dadd>
    21ce:	0022      	movs	r2, r4
    21d0:	002b      	movs	r3, r5
    21d2:	f001 fcd5 	bl	3b80 <__aeabi_dmul>
    21d6:	4a71      	ldr	r2, [pc, #452]	; (239c <STACK_SIZE+0x39c>)
    21d8:	9000      	str	r0, [sp, #0]
    21da:	9101      	str	r1, [sp, #4]
    21dc:	4b70      	ldr	r3, [pc, #448]	; (23a0 <STACK_SIZE+0x3a0>)
    21de:	0020      	movs	r0, r4
    21e0:	0029      	movs	r1, r5
    21e2:	f001 fccd 	bl	3b80 <__aeabi_dmul>
    21e6:	4a6f      	ldr	r2, [pc, #444]	; (23a4 <STACK_SIZE+0x3a4>)
    21e8:	4b6f      	ldr	r3, [pc, #444]	; (23a8 <STACK_SIZE+0x3a8>)
    21ea:	f001 ff49 	bl	4080 <__aeabi_dsub>
    21ee:	0022      	movs	r2, r4
    21f0:	002b      	movs	r3, r5
    21f2:	f001 fcc5 	bl	3b80 <__aeabi_dmul>
    21f6:	4a6d      	ldr	r2, [pc, #436]	; (23ac <STACK_SIZE+0x3ac>)
    21f8:	4b6d      	ldr	r3, [pc, #436]	; (23b0 <STACK_SIZE+0x3b0>)
    21fa:	f000 fd7d 	bl	2cf8 <__aeabi_dadd>
    21fe:	0022      	movs	r2, r4
    2200:	002b      	movs	r3, r5
    2202:	f001 fcbd 	bl	3b80 <__aeabi_dmul>
    2206:	4a6b      	ldr	r2, [pc, #428]	; (23b4 <STACK_SIZE+0x3b4>)
    2208:	4b6b      	ldr	r3, [pc, #428]	; (23b8 <STACK_SIZE+0x3b8>)
    220a:	f001 ff39 	bl	4080 <__aeabi_dsub>
    220e:	0022      	movs	r2, r4
    2210:	002b      	movs	r3, r5
    2212:	f001 fcb5 	bl	3b80 <__aeabi_dmul>
    2216:	2200      	movs	r2, #0
    2218:	4b52      	ldr	r3, [pc, #328]	; (2364 <STACK_SIZE+0x364>)
    221a:	f000 fd6d 	bl	2cf8 <__aeabi_dadd>
    221e:	0002      	movs	r2, r0
    2220:	000b      	movs	r3, r1
    2222:	9800      	ldr	r0, [sp, #0]
    2224:	9901      	ldr	r1, [sp, #4]
    2226:	f001 f877 	bl	3318 <__aeabi_ddiv>
    222a:	003a      	movs	r2, r7
    222c:	0033      	movs	r3, r6
    222e:	f001 fca7 	bl	3b80 <__aeabi_dmul>
    2232:	0002      	movs	r2, r0
    2234:	000b      	movs	r3, r1
    2236:	4864      	ldr	r0, [pc, #400]	; (23c8 <STACK_SIZE+0x3c8>)
    2238:	4964      	ldr	r1, [pc, #400]	; (23cc <STACK_SIZE+0x3cc>)
    223a:	f001 ff21 	bl	4080 <__aeabi_dsub>
    223e:	0002      	movs	r2, r0
    2240:	000b      	movs	r3, r1
    2242:	0038      	movs	r0, r7
    2244:	0031      	movs	r1, r6
    2246:	f001 ff1b 	bl	4080 <__aeabi_dsub>
    224a:	0002      	movs	r2, r0
    224c:	000b      	movs	r3, r1
    224e:	485c      	ldr	r0, [pc, #368]	; (23c0 <STACK_SIZE+0x3c0>)
    2250:	495c      	ldr	r1, [pc, #368]	; (23c4 <STACK_SIZE+0x3c4>)
    2252:	f001 ff15 	bl	4080 <__aeabi_dsub>
    2256:	e6db      	b.n	2010 <STACK_SIZE+0x10>
    2258:	4859      	ldr	r0, [pc, #356]	; (23c0 <STACK_SIZE+0x3c0>)
    225a:	495d      	ldr	r1, [pc, #372]	; (23d0 <STACK_SIZE+0x3d0>)
    225c:	e6d8      	b.n	2010 <STACK_SIZE+0x10>
    225e:	2200      	movs	r2, #0
    2260:	4b40      	ldr	r3, [pc, #256]	; (2364 <STACK_SIZE+0x364>)
    2262:	f000 fd49 	bl	2cf8 <__aeabi_dadd>
    2266:	2200      	movs	r2, #0
    2268:	4b3f      	ldr	r3, [pc, #252]	; (2368 <STACK_SIZE+0x368>)
    226a:	f001 fc89 	bl	3b80 <__aeabi_dmul>
    226e:	0004      	movs	r4, r0
    2270:	000d      	movs	r5, r1
    2272:	4a3e      	ldr	r2, [pc, #248]	; (236c <STACK_SIZE+0x36c>)
    2274:	4b3e      	ldr	r3, [pc, #248]	; (2370 <STACK_SIZE+0x370>)
    2276:	f001 fc83 	bl	3b80 <__aeabi_dmul>
    227a:	4a3e      	ldr	r2, [pc, #248]	; (2374 <STACK_SIZE+0x374>)
    227c:	4b3e      	ldr	r3, [pc, #248]	; (2378 <STACK_SIZE+0x378>)
    227e:	f000 fd3b 	bl	2cf8 <__aeabi_dadd>
    2282:	0022      	movs	r2, r4
    2284:	002b      	movs	r3, r5
    2286:	f001 fc7b 	bl	3b80 <__aeabi_dmul>
    228a:	4a3c      	ldr	r2, [pc, #240]	; (237c <STACK_SIZE+0x37c>)
    228c:	4b3c      	ldr	r3, [pc, #240]	; (2380 <STACK_SIZE+0x380>)
    228e:	f001 fef7 	bl	4080 <__aeabi_dsub>
    2292:	0022      	movs	r2, r4
    2294:	002b      	movs	r3, r5
    2296:	f001 fc73 	bl	3b80 <__aeabi_dmul>
    229a:	4a3a      	ldr	r2, [pc, #232]	; (2384 <STACK_SIZE+0x384>)
    229c:	4b3a      	ldr	r3, [pc, #232]	; (2388 <STACK_SIZE+0x388>)
    229e:	f000 fd2b 	bl	2cf8 <__aeabi_dadd>
    22a2:	0022      	movs	r2, r4
    22a4:	002b      	movs	r3, r5
    22a6:	f001 fc6b 	bl	3b80 <__aeabi_dmul>
    22aa:	4a38      	ldr	r2, [pc, #224]	; (238c <STACK_SIZE+0x38c>)
    22ac:	4b38      	ldr	r3, [pc, #224]	; (2390 <STACK_SIZE+0x390>)
    22ae:	f001 fee7 	bl	4080 <__aeabi_dsub>
    22b2:	0022      	movs	r2, r4
    22b4:	002b      	movs	r3, r5
    22b6:	f001 fc63 	bl	3b80 <__aeabi_dmul>
    22ba:	4a36      	ldr	r2, [pc, #216]	; (2394 <STACK_SIZE+0x394>)
    22bc:	4b36      	ldr	r3, [pc, #216]	; (2398 <STACK_SIZE+0x398>)
    22be:	f000 fd1b 	bl	2cf8 <__aeabi_dadd>
    22c2:	0022      	movs	r2, r4
    22c4:	002b      	movs	r3, r5
    22c6:	f001 fc5b 	bl	3b80 <__aeabi_dmul>
    22ca:	9000      	str	r0, [sp, #0]
    22cc:	9101      	str	r1, [sp, #4]
    22ce:	0020      	movs	r0, r4
    22d0:	0029      	movs	r1, r5
    22d2:	f000 f87f 	bl	23d4 <__ieee754_sqrt>
    22d6:	4a31      	ldr	r2, [pc, #196]	; (239c <STACK_SIZE+0x39c>)
    22d8:	0006      	movs	r6, r0
    22da:	000f      	movs	r7, r1
    22dc:	4b30      	ldr	r3, [pc, #192]	; (23a0 <STACK_SIZE+0x3a0>)
    22de:	0020      	movs	r0, r4
    22e0:	0029      	movs	r1, r5
    22e2:	f001 fc4d 	bl	3b80 <__aeabi_dmul>
    22e6:	4a2f      	ldr	r2, [pc, #188]	; (23a4 <STACK_SIZE+0x3a4>)
    22e8:	4b2f      	ldr	r3, [pc, #188]	; (23a8 <STACK_SIZE+0x3a8>)
    22ea:	f001 fec9 	bl	4080 <__aeabi_dsub>
    22ee:	0022      	movs	r2, r4
    22f0:	002b      	movs	r3, r5
    22f2:	f001 fc45 	bl	3b80 <__aeabi_dmul>
    22f6:	4a2d      	ldr	r2, [pc, #180]	; (23ac <STACK_SIZE+0x3ac>)
    22f8:	4b2d      	ldr	r3, [pc, #180]	; (23b0 <STACK_SIZE+0x3b0>)
    22fa:	f000 fcfd 	bl	2cf8 <__aeabi_dadd>
    22fe:	0022      	movs	r2, r4
    2300:	002b      	movs	r3, r5
    2302:	f001 fc3d 	bl	3b80 <__aeabi_dmul>
    2306:	4a2b      	ldr	r2, [pc, #172]	; (23b4 <STACK_SIZE+0x3b4>)
    2308:	4b2b      	ldr	r3, [pc, #172]	; (23b8 <STACK_SIZE+0x3b8>)
    230a:	f001 feb9 	bl	4080 <__aeabi_dsub>
    230e:	0022      	movs	r2, r4
    2310:	002b      	movs	r3, r5
    2312:	f001 fc35 	bl	3b80 <__aeabi_dmul>
    2316:	2200      	movs	r2, #0
    2318:	4b12      	ldr	r3, [pc, #72]	; (2364 <STACK_SIZE+0x364>)
    231a:	f000 fced 	bl	2cf8 <__aeabi_dadd>
    231e:	0002      	movs	r2, r0
    2320:	000b      	movs	r3, r1
    2322:	9800      	ldr	r0, [sp, #0]
    2324:	9901      	ldr	r1, [sp, #4]
    2326:	f000 fff7 	bl	3318 <__aeabi_ddiv>
    232a:	0032      	movs	r2, r6
    232c:	003b      	movs	r3, r7
    232e:	f001 fc27 	bl	3b80 <__aeabi_dmul>
    2332:	4a25      	ldr	r2, [pc, #148]	; (23c8 <STACK_SIZE+0x3c8>)
    2334:	4b25      	ldr	r3, [pc, #148]	; (23cc <STACK_SIZE+0x3cc>)
    2336:	f001 fea3 	bl	4080 <__aeabi_dsub>
    233a:	0032      	movs	r2, r6
    233c:	003b      	movs	r3, r7
    233e:	f000 fcdb 	bl	2cf8 <__aeabi_dadd>
    2342:	0002      	movs	r2, r0
    2344:	000b      	movs	r3, r1
    2346:	f000 fcd7 	bl	2cf8 <__aeabi_dadd>
    234a:	0002      	movs	r2, r0
    234c:	000b      	movs	r3, r1
    234e:	481c      	ldr	r0, [pc, #112]	; (23c0 <STACK_SIZE+0x3c0>)
    2350:	491f      	ldr	r1, [pc, #124]	; (23d0 <STACK_SIZE+0x3d0>)
    2352:	f001 fe95 	bl	4080 <__aeabi_dsub>
    2356:	e65b      	b.n	2010 <STACK_SIZE+0x10>
    2358:	3fefffff 	.word	0x3fefffff
    235c:	c0100000 	.word	0xc0100000
    2360:	3fdfffff 	.word	0x3fdfffff
    2364:	3ff00000 	.word	0x3ff00000
    2368:	3fe00000 	.word	0x3fe00000
    236c:	0dfdf709 	.word	0x0dfdf709
    2370:	3f023de1 	.word	0x3f023de1
    2374:	7501b288 	.word	0x7501b288
    2378:	3f49efe0 	.word	0x3f49efe0
    237c:	b5688f3b 	.word	0xb5688f3b
    2380:	3fa48228 	.word	0x3fa48228
    2384:	0e884455 	.word	0x0e884455
    2388:	3fc9c155 	.word	0x3fc9c155
    238c:	03eb6f7d 	.word	0x03eb6f7d
    2390:	3fd4d612 	.word	0x3fd4d612
    2394:	55555555 	.word	0x55555555
    2398:	3fc55555 	.word	0x3fc55555
    239c:	b12e9282 	.word	0xb12e9282
    23a0:	3fb3b8c5 	.word	0x3fb3b8c5
    23a4:	1b8d0159 	.word	0x1b8d0159
    23a8:	3fe6066c 	.word	0x3fe6066c
    23ac:	9c598ac8 	.word	0x9c598ac8
    23b0:	40002ae5 	.word	0x40002ae5
    23b4:	1c8a2d4b 	.word	0x1c8a2d4b
    23b8:	40033a27 	.word	0x40033a27
    23bc:	3c600000 	.word	0x3c600000
    23c0:	54442d18 	.word	0x54442d18
    23c4:	3ff921fb 	.word	0x3ff921fb
    23c8:	33145c07 	.word	0x33145c07
    23cc:	3c91a626 	.word	0x3c91a626
    23d0:	400921fb 	.word	0x400921fb

000023d4 <__ieee754_sqrt>:
    23d4:	4b6c      	ldr	r3, [pc, #432]	; (2588 <__ieee754_sqrt+0x1b4>)
    23d6:	b5f0      	push	{r4, r5, r6, r7, lr}
    23d8:	000a      	movs	r2, r1
    23da:	4646      	mov	r6, r8
    23dc:	000d      	movs	r5, r1
    23de:	46d6      	mov	lr, sl
    23e0:	464f      	mov	r7, r9
    23e2:	0019      	movs	r1, r3
    23e4:	b5c0      	push	{r6, r7, lr}
    23e6:	0004      	movs	r4, r0
    23e8:	0006      	movs	r6, r0
    23ea:	4029      	ands	r1, r5
    23ec:	4299      	cmp	r1, r3
    23ee:	d100      	bne.n	23f2 <__ieee754_sqrt+0x1e>
    23f0:	e0a7      	b.n	2542 <__ieee754_sqrt+0x16e>
    23f2:	2d00      	cmp	r5, #0
    23f4:	dc00      	bgt.n	23f8 <__ieee754_sqrt+0x24>
    23f6:	e081      	b.n	24fc <__ieee754_sqrt+0x128>
    23f8:	152f      	asrs	r7, r5, #20
    23fa:	d100      	bne.n	23fe <__ieee754_sqrt+0x2a>
    23fc:	e08e      	b.n	251c <__ieee754_sqrt+0x148>
    23fe:	4b63      	ldr	r3, [pc, #396]	; (258c <__ieee754_sqrt+0x1b8>)
    2400:	0312      	lsls	r2, r2, #12
    2402:	469c      	mov	ip, r3
    2404:	2380      	movs	r3, #128	; 0x80
    2406:	0b12      	lsrs	r2, r2, #12
    2408:	035b      	lsls	r3, r3, #13
    240a:	4467      	add	r7, ip
    240c:	431a      	orrs	r2, r3
    240e:	07fb      	lsls	r3, r7, #31
    2410:	d468      	bmi.n	24e4 <__ieee754_sqrt+0x110>
    2412:	107b      	asrs	r3, r7, #1
    2414:	469c      	mov	ip, r3
    2416:	0fe3      	lsrs	r3, r4, #31
    2418:	189b      	adds	r3, r3, r2
    241a:	189b      	adds	r3, r3, r2
    241c:	2280      	movs	r2, #128	; 0x80
    241e:	2116      	movs	r1, #22
    2420:	2600      	movs	r6, #0
    2422:	2500      	movs	r5, #0
    2424:	0064      	lsls	r4, r4, #1
    2426:	0392      	lsls	r2, r2, #14
    2428:	18a8      	adds	r0, r5, r2
    242a:	4298      	cmp	r0, r3
    242c:	dc02      	bgt.n	2434 <__ieee754_sqrt+0x60>
    242e:	1885      	adds	r5, r0, r2
    2430:	1a1b      	subs	r3, r3, r0
    2432:	18b6      	adds	r6, r6, r2
    2434:	0fe0      	lsrs	r0, r4, #31
    2436:	005b      	lsls	r3, r3, #1
    2438:	3901      	subs	r1, #1
    243a:	181b      	adds	r3, r3, r0
    243c:	0064      	lsls	r4, r4, #1
    243e:	0852      	lsrs	r2, r2, #1
    2440:	2900      	cmp	r1, #0
    2442:	d1f1      	bne.n	2428 <__ieee754_sqrt+0x54>
    2444:	2200      	movs	r2, #0
    2446:	4692      	mov	sl, r2
    2448:	4690      	mov	r8, r2
    244a:	2280      	movs	r2, #128	; 0x80
    244c:	2020      	movs	r0, #32
    244e:	0612      	lsls	r2, r2, #24
    2450:	e009      	b.n	2466 <__ieee754_sqrt+0x92>
    2452:	42ab      	cmp	r3, r5
    2454:	d038      	beq.n	24c8 <__ieee754_sqrt+0xf4>
    2456:	0fe1      	lsrs	r1, r4, #31
    2458:	18c9      	adds	r1, r1, r3
    245a:	3801      	subs	r0, #1
    245c:	18cb      	adds	r3, r1, r3
    245e:	0064      	lsls	r4, r4, #1
    2460:	0852      	lsrs	r2, r2, #1
    2462:	2800      	cmp	r0, #0
    2464:	d018      	beq.n	2498 <__ieee754_sqrt+0xc4>
    2466:	4641      	mov	r1, r8
    2468:	1851      	adds	r1, r2, r1
    246a:	42ab      	cmp	r3, r5
    246c:	ddf1      	ble.n	2452 <__ieee754_sqrt+0x7e>
    246e:	188f      	adds	r7, r1, r2
    2470:	46b8      	mov	r8, r7
    2472:	46a9      	mov	r9, r5
    2474:	2900      	cmp	r1, #0
    2476:	db30      	blt.n	24da <__ieee754_sqrt+0x106>
    2478:	1b5b      	subs	r3, r3, r5
    247a:	428c      	cmp	r4, r1
    247c:	41ad      	sbcs	r5, r5
    247e:	426d      	negs	r5, r5
    2480:	1b5b      	subs	r3, r3, r5
    2482:	1a64      	subs	r4, r4, r1
    2484:	0fe1      	lsrs	r1, r4, #31
    2486:	18c9      	adds	r1, r1, r3
    2488:	3801      	subs	r0, #1
    248a:	4492      	add	sl, r2
    248c:	464d      	mov	r5, r9
    248e:	18cb      	adds	r3, r1, r3
    2490:	0064      	lsls	r4, r4, #1
    2492:	0852      	lsrs	r2, r2, #1
    2494:	2800      	cmp	r0, #0
    2496:	d1e6      	bne.n	2466 <__ieee754_sqrt+0x92>
    2498:	4323      	orrs	r3, r4
    249a:	d128      	bne.n	24ee <__ieee754_sqrt+0x11a>
    249c:	4653      	mov	r3, sl
    249e:	085b      	lsrs	r3, r3, #1
    24a0:	493b      	ldr	r1, [pc, #236]	; (2590 <__ieee754_sqrt+0x1bc>)
    24a2:	1072      	asrs	r2, r6, #1
    24a4:	4688      	mov	r8, r1
    24a6:	4442      	add	r2, r8
    24a8:	07f1      	lsls	r1, r6, #31
    24aa:	d502      	bpl.n	24b2 <__ieee754_sqrt+0xde>
    24ac:	2180      	movs	r1, #128	; 0x80
    24ae:	0609      	lsls	r1, r1, #24
    24b0:	430b      	orrs	r3, r1
    24b2:	4661      	mov	r1, ip
    24b4:	001e      	movs	r6, r3
    24b6:	050f      	lsls	r7, r1, #20
    24b8:	18bd      	adds	r5, r7, r2
    24ba:	0030      	movs	r0, r6
    24bc:	0029      	movs	r1, r5
    24be:	bc1c      	pop	{r2, r3, r4}
    24c0:	4690      	mov	r8, r2
    24c2:	4699      	mov	r9, r3
    24c4:	46a2      	mov	sl, r4
    24c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24c8:	42a1      	cmp	r1, r4
    24ca:	d8c4      	bhi.n	2456 <__ieee754_sqrt+0x82>
    24cc:	188f      	adds	r7, r1, r2
    24ce:	46b8      	mov	r8, r7
    24d0:	2900      	cmp	r1, #0
    24d2:	db42      	blt.n	255a <__ieee754_sqrt+0x186>
    24d4:	4699      	mov	r9, r3
    24d6:	2300      	movs	r3, #0
    24d8:	e7d3      	b.n	2482 <__ieee754_sqrt+0xae>
    24da:	2f00      	cmp	r7, #0
    24dc:	db2f      	blt.n	253e <__ieee754_sqrt+0x16a>
    24de:	1c6f      	adds	r7, r5, #1
    24e0:	46b9      	mov	r9, r7
    24e2:	e7c9      	b.n	2478 <__ieee754_sqrt+0xa4>
    24e4:	0fe1      	lsrs	r1, r4, #31
    24e6:	0052      	lsls	r2, r2, #1
    24e8:	188a      	adds	r2, r1, r2
    24ea:	0064      	lsls	r4, r4, #1
    24ec:	e791      	b.n	2412 <__ieee754_sqrt+0x3e>
    24ee:	4653      	mov	r3, sl
    24f0:	3301      	adds	r3, #1
    24f2:	d035      	beq.n	2560 <__ieee754_sqrt+0x18c>
    24f4:	4653      	mov	r3, sl
    24f6:	3301      	adds	r3, #1
    24f8:	085b      	lsrs	r3, r3, #1
    24fa:	e7d1      	b.n	24a0 <__ieee754_sqrt+0xcc>
    24fc:	006b      	lsls	r3, r5, #1
    24fe:	085b      	lsrs	r3, r3, #1
    2500:	4303      	orrs	r3, r0
    2502:	d0da      	beq.n	24ba <__ieee754_sqrt+0xe6>
    2504:	2700      	movs	r7, #0
    2506:	2d00      	cmp	r5, #0
    2508:	d132      	bne.n	2570 <__ieee754_sqrt+0x19c>
    250a:	0ae2      	lsrs	r2, r4, #11
    250c:	3f15      	subs	r7, #21
    250e:	0564      	lsls	r4, r4, #21
    2510:	2a00      	cmp	r2, #0
    2512:	d0fa      	beq.n	250a <__ieee754_sqrt+0x136>
    2514:	2380      	movs	r3, #128	; 0x80
    2516:	035b      	lsls	r3, r3, #13
    2518:	421a      	tst	r2, r3
    251a:	d124      	bne.n	2566 <__ieee754_sqrt+0x192>
    251c:	2080      	movs	r0, #128	; 0x80
    251e:	2300      	movs	r3, #0
    2520:	0340      	lsls	r0, r0, #13
    2522:	e000      	b.n	2526 <__ieee754_sqrt+0x152>
    2524:	000b      	movs	r3, r1
    2526:	0052      	lsls	r2, r2, #1
    2528:	1c59      	adds	r1, r3, #1
    252a:	4202      	tst	r2, r0
    252c:	d0fa      	beq.n	2524 <__ieee754_sqrt+0x150>
    252e:	2020      	movs	r0, #32
    2530:	1a40      	subs	r0, r0, r1
    2532:	1aff      	subs	r7, r7, r3
    2534:	0023      	movs	r3, r4
    2536:	40c3      	lsrs	r3, r0
    2538:	408c      	lsls	r4, r1
    253a:	431a      	orrs	r2, r3
    253c:	e75f      	b.n	23fe <__ieee754_sqrt+0x2a>
    253e:	46a9      	mov	r9, r5
    2540:	e79a      	b.n	2478 <__ieee754_sqrt+0xa4>
    2542:	002b      	movs	r3, r5
    2544:	0002      	movs	r2, r0
    2546:	0029      	movs	r1, r5
    2548:	f001 fb1a 	bl	3b80 <__aeabi_dmul>
    254c:	0032      	movs	r2, r6
    254e:	002b      	movs	r3, r5
    2550:	f000 fbd2 	bl	2cf8 <__aeabi_dadd>
    2554:	0006      	movs	r6, r0
    2556:	000d      	movs	r5, r1
    2558:	e7af      	b.n	24ba <__ieee754_sqrt+0xe6>
    255a:	2f00      	cmp	r7, #0
    255c:	dabf      	bge.n	24de <__ieee754_sqrt+0x10a>
    255e:	e7b9      	b.n	24d4 <__ieee754_sqrt+0x100>
    2560:	3601      	adds	r6, #1
    2562:	2300      	movs	r3, #0
    2564:	e79c      	b.n	24a0 <__ieee754_sqrt+0xcc>
    2566:	2301      	movs	r3, #1
    2568:	2100      	movs	r1, #0
    256a:	2020      	movs	r0, #32
    256c:	425b      	negs	r3, r3
    256e:	e7e0      	b.n	2532 <__ieee754_sqrt+0x15e>
    2570:	002b      	movs	r3, r5
    2572:	0002      	movs	r2, r0
    2574:	0029      	movs	r1, r5
    2576:	f001 fd83 	bl	4080 <__aeabi_dsub>
    257a:	0002      	movs	r2, r0
    257c:	000b      	movs	r3, r1
    257e:	f000 fecb 	bl	3318 <__aeabi_ddiv>
    2582:	0006      	movs	r6, r0
    2584:	000d      	movs	r5, r1
    2586:	e798      	b.n	24ba <__ieee754_sqrt+0xe6>
    2588:	7ff00000 	.word	0x7ff00000
    258c:	fffffc01 	.word	0xfffffc01
    2590:	3fe00000 	.word	0x3fe00000

00002594 <fabs>:
    2594:	0049      	lsls	r1, r1, #1
    2596:	084b      	lsrs	r3, r1, #1
    2598:	0019      	movs	r1, r3
    259a:	4770      	bx	lr

0000259c <matherr>:
    259c:	2000      	movs	r0, #0
    259e:	4770      	bx	lr

000025a0 <nan>:
    25a0:	2000      	movs	r0, #0
    25a2:	4901      	ldr	r1, [pc, #4]	; (25a8 <nan+0x8>)
    25a4:	4770      	bx	lr
    25a6:	46c0      	nop			; (mov r8, r8)
    25a8:	7ff80000 	.word	0x7ff80000

000025ac <__udivsi3>:
    25ac:	2200      	movs	r2, #0
    25ae:	0843      	lsrs	r3, r0, #1
    25b0:	428b      	cmp	r3, r1
    25b2:	d374      	bcc.n	269e <__udivsi3+0xf2>
    25b4:	0903      	lsrs	r3, r0, #4
    25b6:	428b      	cmp	r3, r1
    25b8:	d35f      	bcc.n	267a <__udivsi3+0xce>
    25ba:	0a03      	lsrs	r3, r0, #8
    25bc:	428b      	cmp	r3, r1
    25be:	d344      	bcc.n	264a <__udivsi3+0x9e>
    25c0:	0b03      	lsrs	r3, r0, #12
    25c2:	428b      	cmp	r3, r1
    25c4:	d328      	bcc.n	2618 <__udivsi3+0x6c>
    25c6:	0c03      	lsrs	r3, r0, #16
    25c8:	428b      	cmp	r3, r1
    25ca:	d30d      	bcc.n	25e8 <__udivsi3+0x3c>
    25cc:	22ff      	movs	r2, #255	; 0xff
    25ce:	0209      	lsls	r1, r1, #8
    25d0:	ba12      	rev	r2, r2
    25d2:	0c03      	lsrs	r3, r0, #16
    25d4:	428b      	cmp	r3, r1
    25d6:	d302      	bcc.n	25de <__udivsi3+0x32>
    25d8:	1212      	asrs	r2, r2, #8
    25da:	0209      	lsls	r1, r1, #8
    25dc:	d065      	beq.n	26aa <__udivsi3+0xfe>
    25de:	0b03      	lsrs	r3, r0, #12
    25e0:	428b      	cmp	r3, r1
    25e2:	d319      	bcc.n	2618 <__udivsi3+0x6c>
    25e4:	e000      	b.n	25e8 <__udivsi3+0x3c>
    25e6:	0a09      	lsrs	r1, r1, #8
    25e8:	0bc3      	lsrs	r3, r0, #15
    25ea:	428b      	cmp	r3, r1
    25ec:	d301      	bcc.n	25f2 <__udivsi3+0x46>
    25ee:	03cb      	lsls	r3, r1, #15
    25f0:	1ac0      	subs	r0, r0, r3
    25f2:	4152      	adcs	r2, r2
    25f4:	0b83      	lsrs	r3, r0, #14
    25f6:	428b      	cmp	r3, r1
    25f8:	d301      	bcc.n	25fe <__udivsi3+0x52>
    25fa:	038b      	lsls	r3, r1, #14
    25fc:	1ac0      	subs	r0, r0, r3
    25fe:	4152      	adcs	r2, r2
    2600:	0b43      	lsrs	r3, r0, #13
    2602:	428b      	cmp	r3, r1
    2604:	d301      	bcc.n	260a <__udivsi3+0x5e>
    2606:	034b      	lsls	r3, r1, #13
    2608:	1ac0      	subs	r0, r0, r3
    260a:	4152      	adcs	r2, r2
    260c:	0b03      	lsrs	r3, r0, #12
    260e:	428b      	cmp	r3, r1
    2610:	d301      	bcc.n	2616 <__udivsi3+0x6a>
    2612:	030b      	lsls	r3, r1, #12
    2614:	1ac0      	subs	r0, r0, r3
    2616:	4152      	adcs	r2, r2
    2618:	0ac3      	lsrs	r3, r0, #11
    261a:	428b      	cmp	r3, r1
    261c:	d301      	bcc.n	2622 <__udivsi3+0x76>
    261e:	02cb      	lsls	r3, r1, #11
    2620:	1ac0      	subs	r0, r0, r3
    2622:	4152      	adcs	r2, r2
    2624:	0a83      	lsrs	r3, r0, #10
    2626:	428b      	cmp	r3, r1
    2628:	d301      	bcc.n	262e <__udivsi3+0x82>
    262a:	028b      	lsls	r3, r1, #10
    262c:	1ac0      	subs	r0, r0, r3
    262e:	4152      	adcs	r2, r2
    2630:	0a43      	lsrs	r3, r0, #9
    2632:	428b      	cmp	r3, r1
    2634:	d301      	bcc.n	263a <__udivsi3+0x8e>
    2636:	024b      	lsls	r3, r1, #9
    2638:	1ac0      	subs	r0, r0, r3
    263a:	4152      	adcs	r2, r2
    263c:	0a03      	lsrs	r3, r0, #8
    263e:	428b      	cmp	r3, r1
    2640:	d301      	bcc.n	2646 <__udivsi3+0x9a>
    2642:	020b      	lsls	r3, r1, #8
    2644:	1ac0      	subs	r0, r0, r3
    2646:	4152      	adcs	r2, r2
    2648:	d2cd      	bcs.n	25e6 <__udivsi3+0x3a>
    264a:	09c3      	lsrs	r3, r0, #7
    264c:	428b      	cmp	r3, r1
    264e:	d301      	bcc.n	2654 <__udivsi3+0xa8>
    2650:	01cb      	lsls	r3, r1, #7
    2652:	1ac0      	subs	r0, r0, r3
    2654:	4152      	adcs	r2, r2
    2656:	0983      	lsrs	r3, r0, #6
    2658:	428b      	cmp	r3, r1
    265a:	d301      	bcc.n	2660 <__udivsi3+0xb4>
    265c:	018b      	lsls	r3, r1, #6
    265e:	1ac0      	subs	r0, r0, r3
    2660:	4152      	adcs	r2, r2
    2662:	0943      	lsrs	r3, r0, #5
    2664:	428b      	cmp	r3, r1
    2666:	d301      	bcc.n	266c <__udivsi3+0xc0>
    2668:	014b      	lsls	r3, r1, #5
    266a:	1ac0      	subs	r0, r0, r3
    266c:	4152      	adcs	r2, r2
    266e:	0903      	lsrs	r3, r0, #4
    2670:	428b      	cmp	r3, r1
    2672:	d301      	bcc.n	2678 <__udivsi3+0xcc>
    2674:	010b      	lsls	r3, r1, #4
    2676:	1ac0      	subs	r0, r0, r3
    2678:	4152      	adcs	r2, r2
    267a:	08c3      	lsrs	r3, r0, #3
    267c:	428b      	cmp	r3, r1
    267e:	d301      	bcc.n	2684 <__udivsi3+0xd8>
    2680:	00cb      	lsls	r3, r1, #3
    2682:	1ac0      	subs	r0, r0, r3
    2684:	4152      	adcs	r2, r2
    2686:	0883      	lsrs	r3, r0, #2
    2688:	428b      	cmp	r3, r1
    268a:	d301      	bcc.n	2690 <__udivsi3+0xe4>
    268c:	008b      	lsls	r3, r1, #2
    268e:	1ac0      	subs	r0, r0, r3
    2690:	4152      	adcs	r2, r2
    2692:	0843      	lsrs	r3, r0, #1
    2694:	428b      	cmp	r3, r1
    2696:	d301      	bcc.n	269c <__udivsi3+0xf0>
    2698:	004b      	lsls	r3, r1, #1
    269a:	1ac0      	subs	r0, r0, r3
    269c:	4152      	adcs	r2, r2
    269e:	1a41      	subs	r1, r0, r1
    26a0:	d200      	bcs.n	26a4 <__udivsi3+0xf8>
    26a2:	4601      	mov	r1, r0
    26a4:	4152      	adcs	r2, r2
    26a6:	4610      	mov	r0, r2
    26a8:	4770      	bx	lr
    26aa:	e7ff      	b.n	26ac <__udivsi3+0x100>
    26ac:	b501      	push	{r0, lr}
    26ae:	2000      	movs	r0, #0
    26b0:	f000 f806 	bl	26c0 <__aeabi_idiv0>
    26b4:	bd02      	pop	{r1, pc}
    26b6:	46c0      	nop			; (mov r8, r8)

000026b8 <__aeabi_uidivmod>:
    26b8:	2900      	cmp	r1, #0
    26ba:	d0f7      	beq.n	26ac <__udivsi3+0x100>
    26bc:	e776      	b.n	25ac <__udivsi3>
    26be:	4770      	bx	lr

000026c0 <__aeabi_idiv0>:
    26c0:	4770      	bx	lr
    26c2:	46c0      	nop			; (mov r8, r8)

000026c4 <__aeabi_cdrcmple>:
    26c4:	4684      	mov	ip, r0
    26c6:	1c10      	adds	r0, r2, #0
    26c8:	4662      	mov	r2, ip
    26ca:	468c      	mov	ip, r1
    26cc:	1c19      	adds	r1, r3, #0
    26ce:	4663      	mov	r3, ip
    26d0:	e000      	b.n	26d4 <__aeabi_cdcmpeq>
    26d2:	46c0      	nop			; (mov r8, r8)

000026d4 <__aeabi_cdcmpeq>:
    26d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    26d6:	f001 f9f1 	bl	3abc <__ledf2>
    26da:	2800      	cmp	r0, #0
    26dc:	d401      	bmi.n	26e2 <__aeabi_cdcmpeq+0xe>
    26de:	2100      	movs	r1, #0
    26e0:	42c8      	cmn	r0, r1
    26e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000026e4 <__aeabi_dcmpeq>:
    26e4:	b510      	push	{r4, lr}
    26e6:	f001 f94b 	bl	3980 <__eqdf2>
    26ea:	4240      	negs	r0, r0
    26ec:	3001      	adds	r0, #1
    26ee:	bd10      	pop	{r4, pc}

000026f0 <__aeabi_dcmplt>:
    26f0:	b510      	push	{r4, lr}
    26f2:	f001 f9e3 	bl	3abc <__ledf2>
    26f6:	2800      	cmp	r0, #0
    26f8:	db01      	blt.n	26fe <__aeabi_dcmplt+0xe>
    26fa:	2000      	movs	r0, #0
    26fc:	bd10      	pop	{r4, pc}
    26fe:	2001      	movs	r0, #1
    2700:	bd10      	pop	{r4, pc}
    2702:	46c0      	nop			; (mov r8, r8)

00002704 <__aeabi_dcmple>:
    2704:	b510      	push	{r4, lr}
    2706:	f001 f9d9 	bl	3abc <__ledf2>
    270a:	2800      	cmp	r0, #0
    270c:	dd01      	ble.n	2712 <__aeabi_dcmple+0xe>
    270e:	2000      	movs	r0, #0
    2710:	bd10      	pop	{r4, pc}
    2712:	2001      	movs	r0, #1
    2714:	bd10      	pop	{r4, pc}
    2716:	46c0      	nop			; (mov r8, r8)

00002718 <__aeabi_dcmpgt>:
    2718:	b510      	push	{r4, lr}
    271a:	f001 f96b 	bl	39f4 <__gedf2>
    271e:	2800      	cmp	r0, #0
    2720:	dc01      	bgt.n	2726 <__aeabi_dcmpgt+0xe>
    2722:	2000      	movs	r0, #0
    2724:	bd10      	pop	{r4, pc}
    2726:	2001      	movs	r0, #1
    2728:	bd10      	pop	{r4, pc}
    272a:	46c0      	nop			; (mov r8, r8)

0000272c <__aeabi_dcmpge>:
    272c:	b510      	push	{r4, lr}
    272e:	f001 f961 	bl	39f4 <__gedf2>
    2732:	2800      	cmp	r0, #0
    2734:	da01      	bge.n	273a <__aeabi_dcmpge+0xe>
    2736:	2000      	movs	r0, #0
    2738:	bd10      	pop	{r4, pc}
    273a:	2001      	movs	r0, #1
    273c:	bd10      	pop	{r4, pc}
    273e:	46c0      	nop			; (mov r8, r8)

00002740 <__aeabi_fmul>:
    2740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2742:	4657      	mov	r7, sl
    2744:	464e      	mov	r6, r9
    2746:	4645      	mov	r5, r8
    2748:	46de      	mov	lr, fp
    274a:	b5e0      	push	{r5, r6, r7, lr}
    274c:	0247      	lsls	r7, r0, #9
    274e:	0046      	lsls	r6, r0, #1
    2750:	4688      	mov	r8, r1
    2752:	0a7f      	lsrs	r7, r7, #9
    2754:	0e36      	lsrs	r6, r6, #24
    2756:	0fc4      	lsrs	r4, r0, #31
    2758:	2e00      	cmp	r6, #0
    275a:	d047      	beq.n	27ec <__aeabi_fmul+0xac>
    275c:	2eff      	cmp	r6, #255	; 0xff
    275e:	d024      	beq.n	27aa <__aeabi_fmul+0x6a>
    2760:	00fb      	lsls	r3, r7, #3
    2762:	2780      	movs	r7, #128	; 0x80
    2764:	04ff      	lsls	r7, r7, #19
    2766:	431f      	orrs	r7, r3
    2768:	2300      	movs	r3, #0
    276a:	4699      	mov	r9, r3
    276c:	469a      	mov	sl, r3
    276e:	3e7f      	subs	r6, #127	; 0x7f
    2770:	4643      	mov	r3, r8
    2772:	025d      	lsls	r5, r3, #9
    2774:	0058      	lsls	r0, r3, #1
    2776:	0fdb      	lsrs	r3, r3, #31
    2778:	0a6d      	lsrs	r5, r5, #9
    277a:	0e00      	lsrs	r0, r0, #24
    277c:	4698      	mov	r8, r3
    277e:	d043      	beq.n	2808 <__aeabi_fmul+0xc8>
    2780:	28ff      	cmp	r0, #255	; 0xff
    2782:	d03b      	beq.n	27fc <__aeabi_fmul+0xbc>
    2784:	00eb      	lsls	r3, r5, #3
    2786:	2580      	movs	r5, #128	; 0x80
    2788:	2200      	movs	r2, #0
    278a:	04ed      	lsls	r5, r5, #19
    278c:	431d      	orrs	r5, r3
    278e:	387f      	subs	r0, #127	; 0x7f
    2790:	1836      	adds	r6, r6, r0
    2792:	1c73      	adds	r3, r6, #1
    2794:	4641      	mov	r1, r8
    2796:	469b      	mov	fp, r3
    2798:	464b      	mov	r3, r9
    279a:	4061      	eors	r1, r4
    279c:	4313      	orrs	r3, r2
    279e:	2b0f      	cmp	r3, #15
    27a0:	d864      	bhi.n	286c <__aeabi_fmul+0x12c>
    27a2:	4875      	ldr	r0, [pc, #468]	; (2978 <__aeabi_fmul+0x238>)
    27a4:	009b      	lsls	r3, r3, #2
    27a6:	58c3      	ldr	r3, [r0, r3]
    27a8:	469f      	mov	pc, r3
    27aa:	2f00      	cmp	r7, #0
    27ac:	d142      	bne.n	2834 <__aeabi_fmul+0xf4>
    27ae:	2308      	movs	r3, #8
    27b0:	4699      	mov	r9, r3
    27b2:	3b06      	subs	r3, #6
    27b4:	26ff      	movs	r6, #255	; 0xff
    27b6:	469a      	mov	sl, r3
    27b8:	e7da      	b.n	2770 <__aeabi_fmul+0x30>
    27ba:	4641      	mov	r1, r8
    27bc:	2a02      	cmp	r2, #2
    27be:	d028      	beq.n	2812 <__aeabi_fmul+0xd2>
    27c0:	2a03      	cmp	r2, #3
    27c2:	d100      	bne.n	27c6 <__aeabi_fmul+0x86>
    27c4:	e0ce      	b.n	2964 <__aeabi_fmul+0x224>
    27c6:	2a01      	cmp	r2, #1
    27c8:	d000      	beq.n	27cc <__aeabi_fmul+0x8c>
    27ca:	e0ac      	b.n	2926 <__aeabi_fmul+0x1e6>
    27cc:	4011      	ands	r1, r2
    27ce:	2000      	movs	r0, #0
    27d0:	2200      	movs	r2, #0
    27d2:	b2cc      	uxtb	r4, r1
    27d4:	0240      	lsls	r0, r0, #9
    27d6:	05d2      	lsls	r2, r2, #23
    27d8:	0a40      	lsrs	r0, r0, #9
    27da:	07e4      	lsls	r4, r4, #31
    27dc:	4310      	orrs	r0, r2
    27de:	4320      	orrs	r0, r4
    27e0:	bc3c      	pop	{r2, r3, r4, r5}
    27e2:	4690      	mov	r8, r2
    27e4:	4699      	mov	r9, r3
    27e6:	46a2      	mov	sl, r4
    27e8:	46ab      	mov	fp, r5
    27ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27ec:	2f00      	cmp	r7, #0
    27ee:	d115      	bne.n	281c <__aeabi_fmul+0xdc>
    27f0:	2304      	movs	r3, #4
    27f2:	4699      	mov	r9, r3
    27f4:	3b03      	subs	r3, #3
    27f6:	2600      	movs	r6, #0
    27f8:	469a      	mov	sl, r3
    27fa:	e7b9      	b.n	2770 <__aeabi_fmul+0x30>
    27fc:	20ff      	movs	r0, #255	; 0xff
    27fe:	2202      	movs	r2, #2
    2800:	2d00      	cmp	r5, #0
    2802:	d0c5      	beq.n	2790 <__aeabi_fmul+0x50>
    2804:	2203      	movs	r2, #3
    2806:	e7c3      	b.n	2790 <__aeabi_fmul+0x50>
    2808:	2d00      	cmp	r5, #0
    280a:	d119      	bne.n	2840 <__aeabi_fmul+0x100>
    280c:	2000      	movs	r0, #0
    280e:	2201      	movs	r2, #1
    2810:	e7be      	b.n	2790 <__aeabi_fmul+0x50>
    2812:	2401      	movs	r4, #1
    2814:	22ff      	movs	r2, #255	; 0xff
    2816:	400c      	ands	r4, r1
    2818:	2000      	movs	r0, #0
    281a:	e7db      	b.n	27d4 <__aeabi_fmul+0x94>
    281c:	0038      	movs	r0, r7
    281e:	f002 f8bb 	bl	4998 <__clzsi2>
    2822:	2676      	movs	r6, #118	; 0x76
    2824:	1f43      	subs	r3, r0, #5
    2826:	409f      	lsls	r7, r3
    2828:	2300      	movs	r3, #0
    282a:	4276      	negs	r6, r6
    282c:	1a36      	subs	r6, r6, r0
    282e:	4699      	mov	r9, r3
    2830:	469a      	mov	sl, r3
    2832:	e79d      	b.n	2770 <__aeabi_fmul+0x30>
    2834:	230c      	movs	r3, #12
    2836:	4699      	mov	r9, r3
    2838:	3b09      	subs	r3, #9
    283a:	26ff      	movs	r6, #255	; 0xff
    283c:	469a      	mov	sl, r3
    283e:	e797      	b.n	2770 <__aeabi_fmul+0x30>
    2840:	0028      	movs	r0, r5
    2842:	f002 f8a9 	bl	4998 <__clzsi2>
    2846:	1f43      	subs	r3, r0, #5
    2848:	409d      	lsls	r5, r3
    284a:	2376      	movs	r3, #118	; 0x76
    284c:	425b      	negs	r3, r3
    284e:	1a18      	subs	r0, r3, r0
    2850:	2200      	movs	r2, #0
    2852:	e79d      	b.n	2790 <__aeabi_fmul+0x50>
    2854:	2080      	movs	r0, #128	; 0x80
    2856:	2400      	movs	r4, #0
    2858:	03c0      	lsls	r0, r0, #15
    285a:	22ff      	movs	r2, #255	; 0xff
    285c:	e7ba      	b.n	27d4 <__aeabi_fmul+0x94>
    285e:	003d      	movs	r5, r7
    2860:	4652      	mov	r2, sl
    2862:	e7ab      	b.n	27bc <__aeabi_fmul+0x7c>
    2864:	003d      	movs	r5, r7
    2866:	0021      	movs	r1, r4
    2868:	4652      	mov	r2, sl
    286a:	e7a7      	b.n	27bc <__aeabi_fmul+0x7c>
    286c:	0c3b      	lsrs	r3, r7, #16
    286e:	469c      	mov	ip, r3
    2870:	042a      	lsls	r2, r5, #16
    2872:	0c12      	lsrs	r2, r2, #16
    2874:	0c2b      	lsrs	r3, r5, #16
    2876:	0014      	movs	r4, r2
    2878:	4660      	mov	r0, ip
    287a:	4665      	mov	r5, ip
    287c:	043f      	lsls	r7, r7, #16
    287e:	0c3f      	lsrs	r7, r7, #16
    2880:	437c      	muls	r4, r7
    2882:	4342      	muls	r2, r0
    2884:	435d      	muls	r5, r3
    2886:	437b      	muls	r3, r7
    2888:	0c27      	lsrs	r7, r4, #16
    288a:	189b      	adds	r3, r3, r2
    288c:	18ff      	adds	r7, r7, r3
    288e:	42ba      	cmp	r2, r7
    2890:	d903      	bls.n	289a <__aeabi_fmul+0x15a>
    2892:	2380      	movs	r3, #128	; 0x80
    2894:	025b      	lsls	r3, r3, #9
    2896:	469c      	mov	ip, r3
    2898:	4465      	add	r5, ip
    289a:	0424      	lsls	r4, r4, #16
    289c:	043a      	lsls	r2, r7, #16
    289e:	0c24      	lsrs	r4, r4, #16
    28a0:	1912      	adds	r2, r2, r4
    28a2:	0193      	lsls	r3, r2, #6
    28a4:	1e5c      	subs	r4, r3, #1
    28a6:	41a3      	sbcs	r3, r4
    28a8:	0c3f      	lsrs	r7, r7, #16
    28aa:	0e92      	lsrs	r2, r2, #26
    28ac:	197d      	adds	r5, r7, r5
    28ae:	431a      	orrs	r2, r3
    28b0:	01ad      	lsls	r5, r5, #6
    28b2:	4315      	orrs	r5, r2
    28b4:	012b      	lsls	r3, r5, #4
    28b6:	d504      	bpl.n	28c2 <__aeabi_fmul+0x182>
    28b8:	2301      	movs	r3, #1
    28ba:	465e      	mov	r6, fp
    28bc:	086a      	lsrs	r2, r5, #1
    28be:	401d      	ands	r5, r3
    28c0:	4315      	orrs	r5, r2
    28c2:	0032      	movs	r2, r6
    28c4:	327f      	adds	r2, #127	; 0x7f
    28c6:	2a00      	cmp	r2, #0
    28c8:	dd25      	ble.n	2916 <__aeabi_fmul+0x1d6>
    28ca:	076b      	lsls	r3, r5, #29
    28cc:	d004      	beq.n	28d8 <__aeabi_fmul+0x198>
    28ce:	230f      	movs	r3, #15
    28d0:	402b      	ands	r3, r5
    28d2:	2b04      	cmp	r3, #4
    28d4:	d000      	beq.n	28d8 <__aeabi_fmul+0x198>
    28d6:	3504      	adds	r5, #4
    28d8:	012b      	lsls	r3, r5, #4
    28da:	d503      	bpl.n	28e4 <__aeabi_fmul+0x1a4>
    28dc:	0032      	movs	r2, r6
    28de:	4b27      	ldr	r3, [pc, #156]	; (297c <__aeabi_fmul+0x23c>)
    28e0:	3280      	adds	r2, #128	; 0x80
    28e2:	401d      	ands	r5, r3
    28e4:	2afe      	cmp	r2, #254	; 0xfe
    28e6:	dc94      	bgt.n	2812 <__aeabi_fmul+0xd2>
    28e8:	2401      	movs	r4, #1
    28ea:	01a8      	lsls	r0, r5, #6
    28ec:	0a40      	lsrs	r0, r0, #9
    28ee:	b2d2      	uxtb	r2, r2
    28f0:	400c      	ands	r4, r1
    28f2:	e76f      	b.n	27d4 <__aeabi_fmul+0x94>
    28f4:	2080      	movs	r0, #128	; 0x80
    28f6:	03c0      	lsls	r0, r0, #15
    28f8:	4207      	tst	r7, r0
    28fa:	d007      	beq.n	290c <__aeabi_fmul+0x1cc>
    28fc:	4205      	tst	r5, r0
    28fe:	d105      	bne.n	290c <__aeabi_fmul+0x1cc>
    2900:	4328      	orrs	r0, r5
    2902:	0240      	lsls	r0, r0, #9
    2904:	0a40      	lsrs	r0, r0, #9
    2906:	4644      	mov	r4, r8
    2908:	22ff      	movs	r2, #255	; 0xff
    290a:	e763      	b.n	27d4 <__aeabi_fmul+0x94>
    290c:	4338      	orrs	r0, r7
    290e:	0240      	lsls	r0, r0, #9
    2910:	0a40      	lsrs	r0, r0, #9
    2912:	22ff      	movs	r2, #255	; 0xff
    2914:	e75e      	b.n	27d4 <__aeabi_fmul+0x94>
    2916:	2401      	movs	r4, #1
    2918:	1aa3      	subs	r3, r4, r2
    291a:	2b1b      	cmp	r3, #27
    291c:	dd05      	ble.n	292a <__aeabi_fmul+0x1ea>
    291e:	400c      	ands	r4, r1
    2920:	2200      	movs	r2, #0
    2922:	2000      	movs	r0, #0
    2924:	e756      	b.n	27d4 <__aeabi_fmul+0x94>
    2926:	465e      	mov	r6, fp
    2928:	e7cb      	b.n	28c2 <__aeabi_fmul+0x182>
    292a:	002a      	movs	r2, r5
    292c:	2020      	movs	r0, #32
    292e:	40da      	lsrs	r2, r3
    2930:	1ac3      	subs	r3, r0, r3
    2932:	409d      	lsls	r5, r3
    2934:	002b      	movs	r3, r5
    2936:	1e5d      	subs	r5, r3, #1
    2938:	41ab      	sbcs	r3, r5
    293a:	4313      	orrs	r3, r2
    293c:	075a      	lsls	r2, r3, #29
    293e:	d004      	beq.n	294a <__aeabi_fmul+0x20a>
    2940:	220f      	movs	r2, #15
    2942:	401a      	ands	r2, r3
    2944:	2a04      	cmp	r2, #4
    2946:	d000      	beq.n	294a <__aeabi_fmul+0x20a>
    2948:	3304      	adds	r3, #4
    294a:	015a      	lsls	r2, r3, #5
    294c:	d504      	bpl.n	2958 <__aeabi_fmul+0x218>
    294e:	2401      	movs	r4, #1
    2950:	2201      	movs	r2, #1
    2952:	400c      	ands	r4, r1
    2954:	2000      	movs	r0, #0
    2956:	e73d      	b.n	27d4 <__aeabi_fmul+0x94>
    2958:	2401      	movs	r4, #1
    295a:	019b      	lsls	r3, r3, #6
    295c:	0a58      	lsrs	r0, r3, #9
    295e:	400c      	ands	r4, r1
    2960:	2200      	movs	r2, #0
    2962:	e737      	b.n	27d4 <__aeabi_fmul+0x94>
    2964:	2080      	movs	r0, #128	; 0x80
    2966:	2401      	movs	r4, #1
    2968:	03c0      	lsls	r0, r0, #15
    296a:	4328      	orrs	r0, r5
    296c:	0240      	lsls	r0, r0, #9
    296e:	0a40      	lsrs	r0, r0, #9
    2970:	400c      	ands	r4, r1
    2972:	22ff      	movs	r2, #255	; 0xff
    2974:	e72e      	b.n	27d4 <__aeabi_fmul+0x94>
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	00004a88 	.word	0x00004a88
    297c:	f7ffffff 	.word	0xf7ffffff

00002980 <__aeabi_fsub>:
    2980:	b5f0      	push	{r4, r5, r6, r7, lr}
    2982:	464f      	mov	r7, r9
    2984:	46d6      	mov	lr, sl
    2986:	4646      	mov	r6, r8
    2988:	0044      	lsls	r4, r0, #1
    298a:	b5c0      	push	{r6, r7, lr}
    298c:	0fc2      	lsrs	r2, r0, #31
    298e:	0247      	lsls	r7, r0, #9
    2990:	0248      	lsls	r0, r1, #9
    2992:	0a40      	lsrs	r0, r0, #9
    2994:	4684      	mov	ip, r0
    2996:	4666      	mov	r6, ip
    2998:	0a7b      	lsrs	r3, r7, #9
    299a:	0048      	lsls	r0, r1, #1
    299c:	0fc9      	lsrs	r1, r1, #31
    299e:	469a      	mov	sl, r3
    29a0:	0e24      	lsrs	r4, r4, #24
    29a2:	0015      	movs	r5, r2
    29a4:	00db      	lsls	r3, r3, #3
    29a6:	0e00      	lsrs	r0, r0, #24
    29a8:	4689      	mov	r9, r1
    29aa:	00f6      	lsls	r6, r6, #3
    29ac:	28ff      	cmp	r0, #255	; 0xff
    29ae:	d100      	bne.n	29b2 <__aeabi_fsub+0x32>
    29b0:	e08f      	b.n	2ad2 <__aeabi_fsub+0x152>
    29b2:	2101      	movs	r1, #1
    29b4:	464f      	mov	r7, r9
    29b6:	404f      	eors	r7, r1
    29b8:	0039      	movs	r1, r7
    29ba:	4291      	cmp	r1, r2
    29bc:	d066      	beq.n	2a8c <__aeabi_fsub+0x10c>
    29be:	1a22      	subs	r2, r4, r0
    29c0:	2a00      	cmp	r2, #0
    29c2:	dc00      	bgt.n	29c6 <__aeabi_fsub+0x46>
    29c4:	e09d      	b.n	2b02 <__aeabi_fsub+0x182>
    29c6:	2800      	cmp	r0, #0
    29c8:	d13d      	bne.n	2a46 <__aeabi_fsub+0xc6>
    29ca:	2e00      	cmp	r6, #0
    29cc:	d100      	bne.n	29d0 <__aeabi_fsub+0x50>
    29ce:	e08b      	b.n	2ae8 <__aeabi_fsub+0x168>
    29d0:	1e51      	subs	r1, r2, #1
    29d2:	2900      	cmp	r1, #0
    29d4:	d000      	beq.n	29d8 <__aeabi_fsub+0x58>
    29d6:	e0b5      	b.n	2b44 <__aeabi_fsub+0x1c4>
    29d8:	2401      	movs	r4, #1
    29da:	1b9b      	subs	r3, r3, r6
    29dc:	015a      	lsls	r2, r3, #5
    29de:	d544      	bpl.n	2a6a <__aeabi_fsub+0xea>
    29e0:	019b      	lsls	r3, r3, #6
    29e2:	099f      	lsrs	r7, r3, #6
    29e4:	0038      	movs	r0, r7
    29e6:	f001 ffd7 	bl	4998 <__clzsi2>
    29ea:	3805      	subs	r0, #5
    29ec:	4087      	lsls	r7, r0
    29ee:	4284      	cmp	r4, r0
    29f0:	dd00      	ble.n	29f4 <__aeabi_fsub+0x74>
    29f2:	e096      	b.n	2b22 <__aeabi_fsub+0x1a2>
    29f4:	1b04      	subs	r4, r0, r4
    29f6:	003a      	movs	r2, r7
    29f8:	2020      	movs	r0, #32
    29fa:	3401      	adds	r4, #1
    29fc:	40e2      	lsrs	r2, r4
    29fe:	1b04      	subs	r4, r0, r4
    2a00:	40a7      	lsls	r7, r4
    2a02:	003b      	movs	r3, r7
    2a04:	1e5f      	subs	r7, r3, #1
    2a06:	41bb      	sbcs	r3, r7
    2a08:	2400      	movs	r4, #0
    2a0a:	4313      	orrs	r3, r2
    2a0c:	075a      	lsls	r2, r3, #29
    2a0e:	d004      	beq.n	2a1a <__aeabi_fsub+0x9a>
    2a10:	220f      	movs	r2, #15
    2a12:	401a      	ands	r2, r3
    2a14:	2a04      	cmp	r2, #4
    2a16:	d000      	beq.n	2a1a <__aeabi_fsub+0x9a>
    2a18:	3304      	adds	r3, #4
    2a1a:	015a      	lsls	r2, r3, #5
    2a1c:	d527      	bpl.n	2a6e <__aeabi_fsub+0xee>
    2a1e:	3401      	adds	r4, #1
    2a20:	2cff      	cmp	r4, #255	; 0xff
    2a22:	d100      	bne.n	2a26 <__aeabi_fsub+0xa6>
    2a24:	e079      	b.n	2b1a <__aeabi_fsub+0x19a>
    2a26:	2201      	movs	r2, #1
    2a28:	019b      	lsls	r3, r3, #6
    2a2a:	0a5b      	lsrs	r3, r3, #9
    2a2c:	b2e4      	uxtb	r4, r4
    2a2e:	402a      	ands	r2, r5
    2a30:	025b      	lsls	r3, r3, #9
    2a32:	05e4      	lsls	r4, r4, #23
    2a34:	0a58      	lsrs	r0, r3, #9
    2a36:	07d2      	lsls	r2, r2, #31
    2a38:	4320      	orrs	r0, r4
    2a3a:	4310      	orrs	r0, r2
    2a3c:	bc1c      	pop	{r2, r3, r4}
    2a3e:	4690      	mov	r8, r2
    2a40:	4699      	mov	r9, r3
    2a42:	46a2      	mov	sl, r4
    2a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a46:	2cff      	cmp	r4, #255	; 0xff
    2a48:	d0e0      	beq.n	2a0c <__aeabi_fsub+0x8c>
    2a4a:	2180      	movs	r1, #128	; 0x80
    2a4c:	04c9      	lsls	r1, r1, #19
    2a4e:	430e      	orrs	r6, r1
    2a50:	2a1b      	cmp	r2, #27
    2a52:	dc7b      	bgt.n	2b4c <__aeabi_fsub+0x1cc>
    2a54:	0031      	movs	r1, r6
    2a56:	2020      	movs	r0, #32
    2a58:	40d1      	lsrs	r1, r2
    2a5a:	1a82      	subs	r2, r0, r2
    2a5c:	4096      	lsls	r6, r2
    2a5e:	1e72      	subs	r2, r6, #1
    2a60:	4196      	sbcs	r6, r2
    2a62:	430e      	orrs	r6, r1
    2a64:	1b9b      	subs	r3, r3, r6
    2a66:	015a      	lsls	r2, r3, #5
    2a68:	d4ba      	bmi.n	29e0 <__aeabi_fsub+0x60>
    2a6a:	075a      	lsls	r2, r3, #29
    2a6c:	d1d0      	bne.n	2a10 <__aeabi_fsub+0x90>
    2a6e:	2201      	movs	r2, #1
    2a70:	08df      	lsrs	r7, r3, #3
    2a72:	402a      	ands	r2, r5
    2a74:	2cff      	cmp	r4, #255	; 0xff
    2a76:	d133      	bne.n	2ae0 <__aeabi_fsub+0x160>
    2a78:	2f00      	cmp	r7, #0
    2a7a:	d100      	bne.n	2a7e <__aeabi_fsub+0xfe>
    2a7c:	e0a8      	b.n	2bd0 <__aeabi_fsub+0x250>
    2a7e:	2380      	movs	r3, #128	; 0x80
    2a80:	03db      	lsls	r3, r3, #15
    2a82:	433b      	orrs	r3, r7
    2a84:	025b      	lsls	r3, r3, #9
    2a86:	0a5b      	lsrs	r3, r3, #9
    2a88:	24ff      	movs	r4, #255	; 0xff
    2a8a:	e7d1      	b.n	2a30 <__aeabi_fsub+0xb0>
    2a8c:	1a21      	subs	r1, r4, r0
    2a8e:	2900      	cmp	r1, #0
    2a90:	dd4c      	ble.n	2b2c <__aeabi_fsub+0x1ac>
    2a92:	2800      	cmp	r0, #0
    2a94:	d02a      	beq.n	2aec <__aeabi_fsub+0x16c>
    2a96:	2cff      	cmp	r4, #255	; 0xff
    2a98:	d0b8      	beq.n	2a0c <__aeabi_fsub+0x8c>
    2a9a:	2080      	movs	r0, #128	; 0x80
    2a9c:	04c0      	lsls	r0, r0, #19
    2a9e:	4306      	orrs	r6, r0
    2aa0:	291b      	cmp	r1, #27
    2aa2:	dd00      	ble.n	2aa6 <__aeabi_fsub+0x126>
    2aa4:	e0af      	b.n	2c06 <__aeabi_fsub+0x286>
    2aa6:	0030      	movs	r0, r6
    2aa8:	2720      	movs	r7, #32
    2aaa:	40c8      	lsrs	r0, r1
    2aac:	1a79      	subs	r1, r7, r1
    2aae:	408e      	lsls	r6, r1
    2ab0:	1e71      	subs	r1, r6, #1
    2ab2:	418e      	sbcs	r6, r1
    2ab4:	4306      	orrs	r6, r0
    2ab6:	199b      	adds	r3, r3, r6
    2ab8:	0159      	lsls	r1, r3, #5
    2aba:	d5d6      	bpl.n	2a6a <__aeabi_fsub+0xea>
    2abc:	3401      	adds	r4, #1
    2abe:	2cff      	cmp	r4, #255	; 0xff
    2ac0:	d100      	bne.n	2ac4 <__aeabi_fsub+0x144>
    2ac2:	e085      	b.n	2bd0 <__aeabi_fsub+0x250>
    2ac4:	2201      	movs	r2, #1
    2ac6:	497a      	ldr	r1, [pc, #488]	; (2cb0 <__aeabi_fsub+0x330>)
    2ac8:	401a      	ands	r2, r3
    2aca:	085b      	lsrs	r3, r3, #1
    2acc:	400b      	ands	r3, r1
    2ace:	4313      	orrs	r3, r2
    2ad0:	e79c      	b.n	2a0c <__aeabi_fsub+0x8c>
    2ad2:	2e00      	cmp	r6, #0
    2ad4:	d000      	beq.n	2ad8 <__aeabi_fsub+0x158>
    2ad6:	e770      	b.n	29ba <__aeabi_fsub+0x3a>
    2ad8:	e76b      	b.n	29b2 <__aeabi_fsub+0x32>
    2ada:	1e3b      	subs	r3, r7, #0
    2adc:	d1c5      	bne.n	2a6a <__aeabi_fsub+0xea>
    2ade:	2200      	movs	r2, #0
    2ae0:	027b      	lsls	r3, r7, #9
    2ae2:	0a5b      	lsrs	r3, r3, #9
    2ae4:	b2e4      	uxtb	r4, r4
    2ae6:	e7a3      	b.n	2a30 <__aeabi_fsub+0xb0>
    2ae8:	0014      	movs	r4, r2
    2aea:	e78f      	b.n	2a0c <__aeabi_fsub+0x8c>
    2aec:	2e00      	cmp	r6, #0
    2aee:	d04d      	beq.n	2b8c <__aeabi_fsub+0x20c>
    2af0:	1e48      	subs	r0, r1, #1
    2af2:	2800      	cmp	r0, #0
    2af4:	d157      	bne.n	2ba6 <__aeabi_fsub+0x226>
    2af6:	199b      	adds	r3, r3, r6
    2af8:	2401      	movs	r4, #1
    2afa:	015a      	lsls	r2, r3, #5
    2afc:	d5b5      	bpl.n	2a6a <__aeabi_fsub+0xea>
    2afe:	2402      	movs	r4, #2
    2b00:	e7e0      	b.n	2ac4 <__aeabi_fsub+0x144>
    2b02:	2a00      	cmp	r2, #0
    2b04:	d125      	bne.n	2b52 <__aeabi_fsub+0x1d2>
    2b06:	1c62      	adds	r2, r4, #1
    2b08:	b2d2      	uxtb	r2, r2
    2b0a:	2a01      	cmp	r2, #1
    2b0c:	dd72      	ble.n	2bf4 <__aeabi_fsub+0x274>
    2b0e:	1b9f      	subs	r7, r3, r6
    2b10:	017a      	lsls	r2, r7, #5
    2b12:	d535      	bpl.n	2b80 <__aeabi_fsub+0x200>
    2b14:	1af7      	subs	r7, r6, r3
    2b16:	000d      	movs	r5, r1
    2b18:	e764      	b.n	29e4 <__aeabi_fsub+0x64>
    2b1a:	2201      	movs	r2, #1
    2b1c:	2300      	movs	r3, #0
    2b1e:	402a      	ands	r2, r5
    2b20:	e786      	b.n	2a30 <__aeabi_fsub+0xb0>
    2b22:	003b      	movs	r3, r7
    2b24:	4a63      	ldr	r2, [pc, #396]	; (2cb4 <__aeabi_fsub+0x334>)
    2b26:	1a24      	subs	r4, r4, r0
    2b28:	4013      	ands	r3, r2
    2b2a:	e76f      	b.n	2a0c <__aeabi_fsub+0x8c>
    2b2c:	2900      	cmp	r1, #0
    2b2e:	d16c      	bne.n	2c0a <__aeabi_fsub+0x28a>
    2b30:	1c61      	adds	r1, r4, #1
    2b32:	b2c8      	uxtb	r0, r1
    2b34:	2801      	cmp	r0, #1
    2b36:	dd4e      	ble.n	2bd6 <__aeabi_fsub+0x256>
    2b38:	29ff      	cmp	r1, #255	; 0xff
    2b3a:	d049      	beq.n	2bd0 <__aeabi_fsub+0x250>
    2b3c:	199b      	adds	r3, r3, r6
    2b3e:	085b      	lsrs	r3, r3, #1
    2b40:	000c      	movs	r4, r1
    2b42:	e763      	b.n	2a0c <__aeabi_fsub+0x8c>
    2b44:	2aff      	cmp	r2, #255	; 0xff
    2b46:	d041      	beq.n	2bcc <__aeabi_fsub+0x24c>
    2b48:	000a      	movs	r2, r1
    2b4a:	e781      	b.n	2a50 <__aeabi_fsub+0xd0>
    2b4c:	2601      	movs	r6, #1
    2b4e:	1b9b      	subs	r3, r3, r6
    2b50:	e789      	b.n	2a66 <__aeabi_fsub+0xe6>
    2b52:	2c00      	cmp	r4, #0
    2b54:	d01c      	beq.n	2b90 <__aeabi_fsub+0x210>
    2b56:	28ff      	cmp	r0, #255	; 0xff
    2b58:	d021      	beq.n	2b9e <__aeabi_fsub+0x21e>
    2b5a:	2480      	movs	r4, #128	; 0x80
    2b5c:	04e4      	lsls	r4, r4, #19
    2b5e:	4252      	negs	r2, r2
    2b60:	4323      	orrs	r3, r4
    2b62:	2a1b      	cmp	r2, #27
    2b64:	dd00      	ble.n	2b68 <__aeabi_fsub+0x1e8>
    2b66:	e096      	b.n	2c96 <__aeabi_fsub+0x316>
    2b68:	001c      	movs	r4, r3
    2b6a:	2520      	movs	r5, #32
    2b6c:	40d4      	lsrs	r4, r2
    2b6e:	1aaa      	subs	r2, r5, r2
    2b70:	4093      	lsls	r3, r2
    2b72:	1e5a      	subs	r2, r3, #1
    2b74:	4193      	sbcs	r3, r2
    2b76:	4323      	orrs	r3, r4
    2b78:	1af3      	subs	r3, r6, r3
    2b7a:	0004      	movs	r4, r0
    2b7c:	000d      	movs	r5, r1
    2b7e:	e72d      	b.n	29dc <__aeabi_fsub+0x5c>
    2b80:	2f00      	cmp	r7, #0
    2b82:	d000      	beq.n	2b86 <__aeabi_fsub+0x206>
    2b84:	e72e      	b.n	29e4 <__aeabi_fsub+0x64>
    2b86:	2200      	movs	r2, #0
    2b88:	2400      	movs	r4, #0
    2b8a:	e7a9      	b.n	2ae0 <__aeabi_fsub+0x160>
    2b8c:	000c      	movs	r4, r1
    2b8e:	e73d      	b.n	2a0c <__aeabi_fsub+0x8c>
    2b90:	2b00      	cmp	r3, #0
    2b92:	d058      	beq.n	2c46 <__aeabi_fsub+0x2c6>
    2b94:	43d2      	mvns	r2, r2
    2b96:	2a00      	cmp	r2, #0
    2b98:	d0ee      	beq.n	2b78 <__aeabi_fsub+0x1f8>
    2b9a:	28ff      	cmp	r0, #255	; 0xff
    2b9c:	d1e1      	bne.n	2b62 <__aeabi_fsub+0x1e2>
    2b9e:	0033      	movs	r3, r6
    2ba0:	24ff      	movs	r4, #255	; 0xff
    2ba2:	000d      	movs	r5, r1
    2ba4:	e732      	b.n	2a0c <__aeabi_fsub+0x8c>
    2ba6:	29ff      	cmp	r1, #255	; 0xff
    2ba8:	d010      	beq.n	2bcc <__aeabi_fsub+0x24c>
    2baa:	0001      	movs	r1, r0
    2bac:	e778      	b.n	2aa0 <__aeabi_fsub+0x120>
    2bae:	2b00      	cmp	r3, #0
    2bb0:	d06e      	beq.n	2c90 <__aeabi_fsub+0x310>
    2bb2:	24ff      	movs	r4, #255	; 0xff
    2bb4:	2e00      	cmp	r6, #0
    2bb6:	d100      	bne.n	2bba <__aeabi_fsub+0x23a>
    2bb8:	e728      	b.n	2a0c <__aeabi_fsub+0x8c>
    2bba:	2280      	movs	r2, #128	; 0x80
    2bbc:	4651      	mov	r1, sl
    2bbe:	03d2      	lsls	r2, r2, #15
    2bc0:	4211      	tst	r1, r2
    2bc2:	d003      	beq.n	2bcc <__aeabi_fsub+0x24c>
    2bc4:	4661      	mov	r1, ip
    2bc6:	4211      	tst	r1, r2
    2bc8:	d100      	bne.n	2bcc <__aeabi_fsub+0x24c>
    2bca:	0033      	movs	r3, r6
    2bcc:	24ff      	movs	r4, #255	; 0xff
    2bce:	e71d      	b.n	2a0c <__aeabi_fsub+0x8c>
    2bd0:	24ff      	movs	r4, #255	; 0xff
    2bd2:	2300      	movs	r3, #0
    2bd4:	e72c      	b.n	2a30 <__aeabi_fsub+0xb0>
    2bd6:	2c00      	cmp	r4, #0
    2bd8:	d1e9      	bne.n	2bae <__aeabi_fsub+0x22e>
    2bda:	2b00      	cmp	r3, #0
    2bdc:	d063      	beq.n	2ca6 <__aeabi_fsub+0x326>
    2bde:	2e00      	cmp	r6, #0
    2be0:	d100      	bne.n	2be4 <__aeabi_fsub+0x264>
    2be2:	e713      	b.n	2a0c <__aeabi_fsub+0x8c>
    2be4:	199b      	adds	r3, r3, r6
    2be6:	015a      	lsls	r2, r3, #5
    2be8:	d400      	bmi.n	2bec <__aeabi_fsub+0x26c>
    2bea:	e73e      	b.n	2a6a <__aeabi_fsub+0xea>
    2bec:	4a31      	ldr	r2, [pc, #196]	; (2cb4 <__aeabi_fsub+0x334>)
    2bee:	000c      	movs	r4, r1
    2bf0:	4013      	ands	r3, r2
    2bf2:	e70b      	b.n	2a0c <__aeabi_fsub+0x8c>
    2bf4:	2c00      	cmp	r4, #0
    2bf6:	d11e      	bne.n	2c36 <__aeabi_fsub+0x2b6>
    2bf8:	2b00      	cmp	r3, #0
    2bfa:	d12f      	bne.n	2c5c <__aeabi_fsub+0x2dc>
    2bfc:	2e00      	cmp	r6, #0
    2bfe:	d04f      	beq.n	2ca0 <__aeabi_fsub+0x320>
    2c00:	0033      	movs	r3, r6
    2c02:	000d      	movs	r5, r1
    2c04:	e702      	b.n	2a0c <__aeabi_fsub+0x8c>
    2c06:	2601      	movs	r6, #1
    2c08:	e755      	b.n	2ab6 <__aeabi_fsub+0x136>
    2c0a:	2c00      	cmp	r4, #0
    2c0c:	d11f      	bne.n	2c4e <__aeabi_fsub+0x2ce>
    2c0e:	2b00      	cmp	r3, #0
    2c10:	d043      	beq.n	2c9a <__aeabi_fsub+0x31a>
    2c12:	43c9      	mvns	r1, r1
    2c14:	2900      	cmp	r1, #0
    2c16:	d00b      	beq.n	2c30 <__aeabi_fsub+0x2b0>
    2c18:	28ff      	cmp	r0, #255	; 0xff
    2c1a:	d039      	beq.n	2c90 <__aeabi_fsub+0x310>
    2c1c:	291b      	cmp	r1, #27
    2c1e:	dc44      	bgt.n	2caa <__aeabi_fsub+0x32a>
    2c20:	001c      	movs	r4, r3
    2c22:	2720      	movs	r7, #32
    2c24:	40cc      	lsrs	r4, r1
    2c26:	1a79      	subs	r1, r7, r1
    2c28:	408b      	lsls	r3, r1
    2c2a:	1e59      	subs	r1, r3, #1
    2c2c:	418b      	sbcs	r3, r1
    2c2e:	4323      	orrs	r3, r4
    2c30:	199b      	adds	r3, r3, r6
    2c32:	0004      	movs	r4, r0
    2c34:	e740      	b.n	2ab8 <__aeabi_fsub+0x138>
    2c36:	2b00      	cmp	r3, #0
    2c38:	d11a      	bne.n	2c70 <__aeabi_fsub+0x2f0>
    2c3a:	2e00      	cmp	r6, #0
    2c3c:	d124      	bne.n	2c88 <__aeabi_fsub+0x308>
    2c3e:	2780      	movs	r7, #128	; 0x80
    2c40:	2200      	movs	r2, #0
    2c42:	03ff      	lsls	r7, r7, #15
    2c44:	e71b      	b.n	2a7e <__aeabi_fsub+0xfe>
    2c46:	0033      	movs	r3, r6
    2c48:	0004      	movs	r4, r0
    2c4a:	000d      	movs	r5, r1
    2c4c:	e6de      	b.n	2a0c <__aeabi_fsub+0x8c>
    2c4e:	28ff      	cmp	r0, #255	; 0xff
    2c50:	d01e      	beq.n	2c90 <__aeabi_fsub+0x310>
    2c52:	2480      	movs	r4, #128	; 0x80
    2c54:	04e4      	lsls	r4, r4, #19
    2c56:	4249      	negs	r1, r1
    2c58:	4323      	orrs	r3, r4
    2c5a:	e7df      	b.n	2c1c <__aeabi_fsub+0x29c>
    2c5c:	2e00      	cmp	r6, #0
    2c5e:	d100      	bne.n	2c62 <__aeabi_fsub+0x2e2>
    2c60:	e6d4      	b.n	2a0c <__aeabi_fsub+0x8c>
    2c62:	1b9f      	subs	r7, r3, r6
    2c64:	017a      	lsls	r2, r7, #5
    2c66:	d400      	bmi.n	2c6a <__aeabi_fsub+0x2ea>
    2c68:	e737      	b.n	2ada <__aeabi_fsub+0x15a>
    2c6a:	1af3      	subs	r3, r6, r3
    2c6c:	000d      	movs	r5, r1
    2c6e:	e6cd      	b.n	2a0c <__aeabi_fsub+0x8c>
    2c70:	24ff      	movs	r4, #255	; 0xff
    2c72:	2e00      	cmp	r6, #0
    2c74:	d100      	bne.n	2c78 <__aeabi_fsub+0x2f8>
    2c76:	e6c9      	b.n	2a0c <__aeabi_fsub+0x8c>
    2c78:	2280      	movs	r2, #128	; 0x80
    2c7a:	4650      	mov	r0, sl
    2c7c:	03d2      	lsls	r2, r2, #15
    2c7e:	4210      	tst	r0, r2
    2c80:	d0a4      	beq.n	2bcc <__aeabi_fsub+0x24c>
    2c82:	4660      	mov	r0, ip
    2c84:	4210      	tst	r0, r2
    2c86:	d1a1      	bne.n	2bcc <__aeabi_fsub+0x24c>
    2c88:	0033      	movs	r3, r6
    2c8a:	000d      	movs	r5, r1
    2c8c:	24ff      	movs	r4, #255	; 0xff
    2c8e:	e6bd      	b.n	2a0c <__aeabi_fsub+0x8c>
    2c90:	0033      	movs	r3, r6
    2c92:	24ff      	movs	r4, #255	; 0xff
    2c94:	e6ba      	b.n	2a0c <__aeabi_fsub+0x8c>
    2c96:	2301      	movs	r3, #1
    2c98:	e76e      	b.n	2b78 <__aeabi_fsub+0x1f8>
    2c9a:	0033      	movs	r3, r6
    2c9c:	0004      	movs	r4, r0
    2c9e:	e6b5      	b.n	2a0c <__aeabi_fsub+0x8c>
    2ca0:	2700      	movs	r7, #0
    2ca2:	2200      	movs	r2, #0
    2ca4:	e71c      	b.n	2ae0 <__aeabi_fsub+0x160>
    2ca6:	0033      	movs	r3, r6
    2ca8:	e6b0      	b.n	2a0c <__aeabi_fsub+0x8c>
    2caa:	2301      	movs	r3, #1
    2cac:	e7c0      	b.n	2c30 <__aeabi_fsub+0x2b0>
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	7dffffff 	.word	0x7dffffff
    2cb4:	fbffffff 	.word	0xfbffffff

00002cb8 <__aeabi_f2iz>:
    2cb8:	0241      	lsls	r1, r0, #9
    2cba:	0043      	lsls	r3, r0, #1
    2cbc:	0fc2      	lsrs	r2, r0, #31
    2cbe:	0a49      	lsrs	r1, r1, #9
    2cc0:	0e1b      	lsrs	r3, r3, #24
    2cc2:	2000      	movs	r0, #0
    2cc4:	2b7e      	cmp	r3, #126	; 0x7e
    2cc6:	dd0d      	ble.n	2ce4 <__aeabi_f2iz+0x2c>
    2cc8:	2b9d      	cmp	r3, #157	; 0x9d
    2cca:	dc0c      	bgt.n	2ce6 <__aeabi_f2iz+0x2e>
    2ccc:	2080      	movs	r0, #128	; 0x80
    2cce:	0400      	lsls	r0, r0, #16
    2cd0:	4301      	orrs	r1, r0
    2cd2:	2b95      	cmp	r3, #149	; 0x95
    2cd4:	dc0a      	bgt.n	2cec <__aeabi_f2iz+0x34>
    2cd6:	2096      	movs	r0, #150	; 0x96
    2cd8:	1ac3      	subs	r3, r0, r3
    2cda:	40d9      	lsrs	r1, r3
    2cdc:	4248      	negs	r0, r1
    2cde:	2a00      	cmp	r2, #0
    2ce0:	d100      	bne.n	2ce4 <__aeabi_f2iz+0x2c>
    2ce2:	0008      	movs	r0, r1
    2ce4:	4770      	bx	lr
    2ce6:	4b03      	ldr	r3, [pc, #12]	; (2cf4 <__aeabi_f2iz+0x3c>)
    2ce8:	18d0      	adds	r0, r2, r3
    2cea:	e7fb      	b.n	2ce4 <__aeabi_f2iz+0x2c>
    2cec:	3b96      	subs	r3, #150	; 0x96
    2cee:	4099      	lsls	r1, r3
    2cf0:	e7f4      	b.n	2cdc <__aeabi_f2iz+0x24>
    2cf2:	46c0      	nop			; (mov r8, r8)
    2cf4:	7fffffff 	.word	0x7fffffff

00002cf8 <__aeabi_dadd>:
    2cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cfa:	4645      	mov	r5, r8
    2cfc:	46de      	mov	lr, fp
    2cfe:	4657      	mov	r7, sl
    2d00:	464e      	mov	r6, r9
    2d02:	030c      	lsls	r4, r1, #12
    2d04:	b5e0      	push	{r5, r6, r7, lr}
    2d06:	004e      	lsls	r6, r1, #1
    2d08:	0fc9      	lsrs	r1, r1, #31
    2d0a:	4688      	mov	r8, r1
    2d0c:	000d      	movs	r5, r1
    2d0e:	0a61      	lsrs	r1, r4, #9
    2d10:	0f44      	lsrs	r4, r0, #29
    2d12:	430c      	orrs	r4, r1
    2d14:	00c7      	lsls	r7, r0, #3
    2d16:	0319      	lsls	r1, r3, #12
    2d18:	0058      	lsls	r0, r3, #1
    2d1a:	0fdb      	lsrs	r3, r3, #31
    2d1c:	469b      	mov	fp, r3
    2d1e:	0a4b      	lsrs	r3, r1, #9
    2d20:	0f51      	lsrs	r1, r2, #29
    2d22:	430b      	orrs	r3, r1
    2d24:	0d76      	lsrs	r6, r6, #21
    2d26:	0d40      	lsrs	r0, r0, #21
    2d28:	0019      	movs	r1, r3
    2d2a:	00d2      	lsls	r2, r2, #3
    2d2c:	45d8      	cmp	r8, fp
    2d2e:	d100      	bne.n	2d32 <__aeabi_dadd+0x3a>
    2d30:	e0ae      	b.n	2e90 <__aeabi_dadd+0x198>
    2d32:	1a35      	subs	r5, r6, r0
    2d34:	2d00      	cmp	r5, #0
    2d36:	dc00      	bgt.n	2d3a <__aeabi_dadd+0x42>
    2d38:	e0f6      	b.n	2f28 <__aeabi_dadd+0x230>
    2d3a:	2800      	cmp	r0, #0
    2d3c:	d10f      	bne.n	2d5e <__aeabi_dadd+0x66>
    2d3e:	4313      	orrs	r3, r2
    2d40:	d100      	bne.n	2d44 <__aeabi_dadd+0x4c>
    2d42:	e0db      	b.n	2efc <__aeabi_dadd+0x204>
    2d44:	1e6b      	subs	r3, r5, #1
    2d46:	2b00      	cmp	r3, #0
    2d48:	d000      	beq.n	2d4c <__aeabi_dadd+0x54>
    2d4a:	e137      	b.n	2fbc <__aeabi_dadd+0x2c4>
    2d4c:	1aba      	subs	r2, r7, r2
    2d4e:	4297      	cmp	r7, r2
    2d50:	41bf      	sbcs	r7, r7
    2d52:	1a64      	subs	r4, r4, r1
    2d54:	427f      	negs	r7, r7
    2d56:	1be4      	subs	r4, r4, r7
    2d58:	2601      	movs	r6, #1
    2d5a:	0017      	movs	r7, r2
    2d5c:	e024      	b.n	2da8 <__aeabi_dadd+0xb0>
    2d5e:	4bc6      	ldr	r3, [pc, #792]	; (3078 <__aeabi_dadd+0x380>)
    2d60:	429e      	cmp	r6, r3
    2d62:	d04d      	beq.n	2e00 <__aeabi_dadd+0x108>
    2d64:	2380      	movs	r3, #128	; 0x80
    2d66:	041b      	lsls	r3, r3, #16
    2d68:	4319      	orrs	r1, r3
    2d6a:	2d38      	cmp	r5, #56	; 0x38
    2d6c:	dd00      	ble.n	2d70 <__aeabi_dadd+0x78>
    2d6e:	e107      	b.n	2f80 <__aeabi_dadd+0x288>
    2d70:	2d1f      	cmp	r5, #31
    2d72:	dd00      	ble.n	2d76 <__aeabi_dadd+0x7e>
    2d74:	e138      	b.n	2fe8 <__aeabi_dadd+0x2f0>
    2d76:	2020      	movs	r0, #32
    2d78:	1b43      	subs	r3, r0, r5
    2d7a:	469a      	mov	sl, r3
    2d7c:	000b      	movs	r3, r1
    2d7e:	4650      	mov	r0, sl
    2d80:	4083      	lsls	r3, r0
    2d82:	4699      	mov	r9, r3
    2d84:	0013      	movs	r3, r2
    2d86:	4648      	mov	r0, r9
    2d88:	40eb      	lsrs	r3, r5
    2d8a:	4318      	orrs	r0, r3
    2d8c:	0003      	movs	r3, r0
    2d8e:	4650      	mov	r0, sl
    2d90:	4082      	lsls	r2, r0
    2d92:	1e50      	subs	r0, r2, #1
    2d94:	4182      	sbcs	r2, r0
    2d96:	40e9      	lsrs	r1, r5
    2d98:	431a      	orrs	r2, r3
    2d9a:	1aba      	subs	r2, r7, r2
    2d9c:	1a61      	subs	r1, r4, r1
    2d9e:	4297      	cmp	r7, r2
    2da0:	41a4      	sbcs	r4, r4
    2da2:	0017      	movs	r7, r2
    2da4:	4264      	negs	r4, r4
    2da6:	1b0c      	subs	r4, r1, r4
    2da8:	0223      	lsls	r3, r4, #8
    2daa:	d562      	bpl.n	2e72 <__aeabi_dadd+0x17a>
    2dac:	0264      	lsls	r4, r4, #9
    2dae:	0a65      	lsrs	r5, r4, #9
    2db0:	2d00      	cmp	r5, #0
    2db2:	d100      	bne.n	2db6 <__aeabi_dadd+0xbe>
    2db4:	e0df      	b.n	2f76 <__aeabi_dadd+0x27e>
    2db6:	0028      	movs	r0, r5
    2db8:	f001 fdee 	bl	4998 <__clzsi2>
    2dbc:	0003      	movs	r3, r0
    2dbe:	3b08      	subs	r3, #8
    2dc0:	2b1f      	cmp	r3, #31
    2dc2:	dd00      	ble.n	2dc6 <__aeabi_dadd+0xce>
    2dc4:	e0d2      	b.n	2f6c <__aeabi_dadd+0x274>
    2dc6:	2220      	movs	r2, #32
    2dc8:	003c      	movs	r4, r7
    2dca:	1ad2      	subs	r2, r2, r3
    2dcc:	409d      	lsls	r5, r3
    2dce:	40d4      	lsrs	r4, r2
    2dd0:	409f      	lsls	r7, r3
    2dd2:	4325      	orrs	r5, r4
    2dd4:	429e      	cmp	r6, r3
    2dd6:	dd00      	ble.n	2dda <__aeabi_dadd+0xe2>
    2dd8:	e0c4      	b.n	2f64 <__aeabi_dadd+0x26c>
    2dda:	1b9e      	subs	r6, r3, r6
    2ddc:	1c73      	adds	r3, r6, #1
    2dde:	2b1f      	cmp	r3, #31
    2de0:	dd00      	ble.n	2de4 <__aeabi_dadd+0xec>
    2de2:	e0f1      	b.n	2fc8 <__aeabi_dadd+0x2d0>
    2de4:	2220      	movs	r2, #32
    2de6:	0038      	movs	r0, r7
    2de8:	0029      	movs	r1, r5
    2dea:	1ad2      	subs	r2, r2, r3
    2dec:	40d8      	lsrs	r0, r3
    2dee:	4091      	lsls	r1, r2
    2df0:	4097      	lsls	r7, r2
    2df2:	002c      	movs	r4, r5
    2df4:	4301      	orrs	r1, r0
    2df6:	1e78      	subs	r0, r7, #1
    2df8:	4187      	sbcs	r7, r0
    2dfa:	40dc      	lsrs	r4, r3
    2dfc:	2600      	movs	r6, #0
    2dfe:	430f      	orrs	r7, r1
    2e00:	077b      	lsls	r3, r7, #29
    2e02:	d009      	beq.n	2e18 <__aeabi_dadd+0x120>
    2e04:	230f      	movs	r3, #15
    2e06:	403b      	ands	r3, r7
    2e08:	2b04      	cmp	r3, #4
    2e0a:	d005      	beq.n	2e18 <__aeabi_dadd+0x120>
    2e0c:	1d3b      	adds	r3, r7, #4
    2e0e:	42bb      	cmp	r3, r7
    2e10:	41bf      	sbcs	r7, r7
    2e12:	427f      	negs	r7, r7
    2e14:	19e4      	adds	r4, r4, r7
    2e16:	001f      	movs	r7, r3
    2e18:	0223      	lsls	r3, r4, #8
    2e1a:	d52c      	bpl.n	2e76 <__aeabi_dadd+0x17e>
    2e1c:	4b96      	ldr	r3, [pc, #600]	; (3078 <__aeabi_dadd+0x380>)
    2e1e:	3601      	adds	r6, #1
    2e20:	429e      	cmp	r6, r3
    2e22:	d100      	bne.n	2e26 <__aeabi_dadd+0x12e>
    2e24:	e09a      	b.n	2f5c <__aeabi_dadd+0x264>
    2e26:	4645      	mov	r5, r8
    2e28:	4b94      	ldr	r3, [pc, #592]	; (307c <__aeabi_dadd+0x384>)
    2e2a:	08ff      	lsrs	r7, r7, #3
    2e2c:	401c      	ands	r4, r3
    2e2e:	0760      	lsls	r0, r4, #29
    2e30:	0576      	lsls	r6, r6, #21
    2e32:	0264      	lsls	r4, r4, #9
    2e34:	4307      	orrs	r7, r0
    2e36:	0b24      	lsrs	r4, r4, #12
    2e38:	0d76      	lsrs	r6, r6, #21
    2e3a:	2100      	movs	r1, #0
    2e3c:	0324      	lsls	r4, r4, #12
    2e3e:	0b23      	lsrs	r3, r4, #12
    2e40:	0d0c      	lsrs	r4, r1, #20
    2e42:	4a8f      	ldr	r2, [pc, #572]	; (3080 <__aeabi_dadd+0x388>)
    2e44:	0524      	lsls	r4, r4, #20
    2e46:	431c      	orrs	r4, r3
    2e48:	4014      	ands	r4, r2
    2e4a:	0533      	lsls	r3, r6, #20
    2e4c:	4323      	orrs	r3, r4
    2e4e:	005b      	lsls	r3, r3, #1
    2e50:	07ed      	lsls	r5, r5, #31
    2e52:	085b      	lsrs	r3, r3, #1
    2e54:	432b      	orrs	r3, r5
    2e56:	0038      	movs	r0, r7
    2e58:	0019      	movs	r1, r3
    2e5a:	bc3c      	pop	{r2, r3, r4, r5}
    2e5c:	4690      	mov	r8, r2
    2e5e:	4699      	mov	r9, r3
    2e60:	46a2      	mov	sl, r4
    2e62:	46ab      	mov	fp, r5
    2e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e66:	4664      	mov	r4, ip
    2e68:	4304      	orrs	r4, r0
    2e6a:	d100      	bne.n	2e6e <__aeabi_dadd+0x176>
    2e6c:	e211      	b.n	3292 <__aeabi_dadd+0x59a>
    2e6e:	0004      	movs	r4, r0
    2e70:	4667      	mov	r7, ip
    2e72:	077b      	lsls	r3, r7, #29
    2e74:	d1c6      	bne.n	2e04 <__aeabi_dadd+0x10c>
    2e76:	4645      	mov	r5, r8
    2e78:	0760      	lsls	r0, r4, #29
    2e7a:	08ff      	lsrs	r7, r7, #3
    2e7c:	4307      	orrs	r7, r0
    2e7e:	08e4      	lsrs	r4, r4, #3
    2e80:	4b7d      	ldr	r3, [pc, #500]	; (3078 <__aeabi_dadd+0x380>)
    2e82:	429e      	cmp	r6, r3
    2e84:	d030      	beq.n	2ee8 <__aeabi_dadd+0x1f0>
    2e86:	0324      	lsls	r4, r4, #12
    2e88:	0576      	lsls	r6, r6, #21
    2e8a:	0b24      	lsrs	r4, r4, #12
    2e8c:	0d76      	lsrs	r6, r6, #21
    2e8e:	e7d4      	b.n	2e3a <__aeabi_dadd+0x142>
    2e90:	1a33      	subs	r3, r6, r0
    2e92:	469a      	mov	sl, r3
    2e94:	2b00      	cmp	r3, #0
    2e96:	dd78      	ble.n	2f8a <__aeabi_dadd+0x292>
    2e98:	2800      	cmp	r0, #0
    2e9a:	d031      	beq.n	2f00 <__aeabi_dadd+0x208>
    2e9c:	4876      	ldr	r0, [pc, #472]	; (3078 <__aeabi_dadd+0x380>)
    2e9e:	4286      	cmp	r6, r0
    2ea0:	d0ae      	beq.n	2e00 <__aeabi_dadd+0x108>
    2ea2:	2080      	movs	r0, #128	; 0x80
    2ea4:	0400      	lsls	r0, r0, #16
    2ea6:	4301      	orrs	r1, r0
    2ea8:	4653      	mov	r3, sl
    2eaa:	2b38      	cmp	r3, #56	; 0x38
    2eac:	dc00      	bgt.n	2eb0 <__aeabi_dadd+0x1b8>
    2eae:	e0e9      	b.n	3084 <__aeabi_dadd+0x38c>
    2eb0:	430a      	orrs	r2, r1
    2eb2:	1e51      	subs	r1, r2, #1
    2eb4:	418a      	sbcs	r2, r1
    2eb6:	2100      	movs	r1, #0
    2eb8:	19d2      	adds	r2, r2, r7
    2eba:	42ba      	cmp	r2, r7
    2ebc:	41bf      	sbcs	r7, r7
    2ebe:	1909      	adds	r1, r1, r4
    2ec0:	427c      	negs	r4, r7
    2ec2:	0017      	movs	r7, r2
    2ec4:	190c      	adds	r4, r1, r4
    2ec6:	0223      	lsls	r3, r4, #8
    2ec8:	d5d3      	bpl.n	2e72 <__aeabi_dadd+0x17a>
    2eca:	4b6b      	ldr	r3, [pc, #428]	; (3078 <__aeabi_dadd+0x380>)
    2ecc:	3601      	adds	r6, #1
    2ece:	429e      	cmp	r6, r3
    2ed0:	d100      	bne.n	2ed4 <__aeabi_dadd+0x1dc>
    2ed2:	e13a      	b.n	314a <__aeabi_dadd+0x452>
    2ed4:	2001      	movs	r0, #1
    2ed6:	4b69      	ldr	r3, [pc, #420]	; (307c <__aeabi_dadd+0x384>)
    2ed8:	401c      	ands	r4, r3
    2eda:	087b      	lsrs	r3, r7, #1
    2edc:	4007      	ands	r7, r0
    2ede:	431f      	orrs	r7, r3
    2ee0:	07e0      	lsls	r0, r4, #31
    2ee2:	4307      	orrs	r7, r0
    2ee4:	0864      	lsrs	r4, r4, #1
    2ee6:	e78b      	b.n	2e00 <__aeabi_dadd+0x108>
    2ee8:	0023      	movs	r3, r4
    2eea:	433b      	orrs	r3, r7
    2eec:	d100      	bne.n	2ef0 <__aeabi_dadd+0x1f8>
    2eee:	e1cb      	b.n	3288 <__aeabi_dadd+0x590>
    2ef0:	2280      	movs	r2, #128	; 0x80
    2ef2:	0312      	lsls	r2, r2, #12
    2ef4:	4314      	orrs	r4, r2
    2ef6:	0324      	lsls	r4, r4, #12
    2ef8:	0b24      	lsrs	r4, r4, #12
    2efa:	e79e      	b.n	2e3a <__aeabi_dadd+0x142>
    2efc:	002e      	movs	r6, r5
    2efe:	e77f      	b.n	2e00 <__aeabi_dadd+0x108>
    2f00:	0008      	movs	r0, r1
    2f02:	4310      	orrs	r0, r2
    2f04:	d100      	bne.n	2f08 <__aeabi_dadd+0x210>
    2f06:	e0b4      	b.n	3072 <__aeabi_dadd+0x37a>
    2f08:	1e58      	subs	r0, r3, #1
    2f0a:	2800      	cmp	r0, #0
    2f0c:	d000      	beq.n	2f10 <__aeabi_dadd+0x218>
    2f0e:	e0de      	b.n	30ce <__aeabi_dadd+0x3d6>
    2f10:	18ba      	adds	r2, r7, r2
    2f12:	42ba      	cmp	r2, r7
    2f14:	419b      	sbcs	r3, r3
    2f16:	1864      	adds	r4, r4, r1
    2f18:	425b      	negs	r3, r3
    2f1a:	18e4      	adds	r4, r4, r3
    2f1c:	0017      	movs	r7, r2
    2f1e:	2601      	movs	r6, #1
    2f20:	0223      	lsls	r3, r4, #8
    2f22:	d5a6      	bpl.n	2e72 <__aeabi_dadd+0x17a>
    2f24:	2602      	movs	r6, #2
    2f26:	e7d5      	b.n	2ed4 <__aeabi_dadd+0x1dc>
    2f28:	2d00      	cmp	r5, #0
    2f2a:	d16e      	bne.n	300a <__aeabi_dadd+0x312>
    2f2c:	1c70      	adds	r0, r6, #1
    2f2e:	0540      	lsls	r0, r0, #21
    2f30:	0d40      	lsrs	r0, r0, #21
    2f32:	2801      	cmp	r0, #1
    2f34:	dc00      	bgt.n	2f38 <__aeabi_dadd+0x240>
    2f36:	e0f9      	b.n	312c <__aeabi_dadd+0x434>
    2f38:	1ab8      	subs	r0, r7, r2
    2f3a:	4684      	mov	ip, r0
    2f3c:	4287      	cmp	r7, r0
    2f3e:	4180      	sbcs	r0, r0
    2f40:	1ae5      	subs	r5, r4, r3
    2f42:	4240      	negs	r0, r0
    2f44:	1a2d      	subs	r5, r5, r0
    2f46:	0228      	lsls	r0, r5, #8
    2f48:	d400      	bmi.n	2f4c <__aeabi_dadd+0x254>
    2f4a:	e089      	b.n	3060 <__aeabi_dadd+0x368>
    2f4c:	1bd7      	subs	r7, r2, r7
    2f4e:	42ba      	cmp	r2, r7
    2f50:	4192      	sbcs	r2, r2
    2f52:	1b1c      	subs	r4, r3, r4
    2f54:	4252      	negs	r2, r2
    2f56:	1aa5      	subs	r5, r4, r2
    2f58:	46d8      	mov	r8, fp
    2f5a:	e729      	b.n	2db0 <__aeabi_dadd+0xb8>
    2f5c:	4645      	mov	r5, r8
    2f5e:	2400      	movs	r4, #0
    2f60:	2700      	movs	r7, #0
    2f62:	e76a      	b.n	2e3a <__aeabi_dadd+0x142>
    2f64:	4c45      	ldr	r4, [pc, #276]	; (307c <__aeabi_dadd+0x384>)
    2f66:	1af6      	subs	r6, r6, r3
    2f68:	402c      	ands	r4, r5
    2f6a:	e749      	b.n	2e00 <__aeabi_dadd+0x108>
    2f6c:	003d      	movs	r5, r7
    2f6e:	3828      	subs	r0, #40	; 0x28
    2f70:	4085      	lsls	r5, r0
    2f72:	2700      	movs	r7, #0
    2f74:	e72e      	b.n	2dd4 <__aeabi_dadd+0xdc>
    2f76:	0038      	movs	r0, r7
    2f78:	f001 fd0e 	bl	4998 <__clzsi2>
    2f7c:	3020      	adds	r0, #32
    2f7e:	e71d      	b.n	2dbc <__aeabi_dadd+0xc4>
    2f80:	430a      	orrs	r2, r1
    2f82:	1e51      	subs	r1, r2, #1
    2f84:	418a      	sbcs	r2, r1
    2f86:	2100      	movs	r1, #0
    2f88:	e707      	b.n	2d9a <__aeabi_dadd+0xa2>
    2f8a:	2b00      	cmp	r3, #0
    2f8c:	d000      	beq.n	2f90 <__aeabi_dadd+0x298>
    2f8e:	e0f3      	b.n	3178 <__aeabi_dadd+0x480>
    2f90:	1c70      	adds	r0, r6, #1
    2f92:	0543      	lsls	r3, r0, #21
    2f94:	0d5b      	lsrs	r3, r3, #21
    2f96:	2b01      	cmp	r3, #1
    2f98:	dc00      	bgt.n	2f9c <__aeabi_dadd+0x2a4>
    2f9a:	e0ad      	b.n	30f8 <__aeabi_dadd+0x400>
    2f9c:	4b36      	ldr	r3, [pc, #216]	; (3078 <__aeabi_dadd+0x380>)
    2f9e:	4298      	cmp	r0, r3
    2fa0:	d100      	bne.n	2fa4 <__aeabi_dadd+0x2ac>
    2fa2:	e0d1      	b.n	3148 <__aeabi_dadd+0x450>
    2fa4:	18ba      	adds	r2, r7, r2
    2fa6:	42ba      	cmp	r2, r7
    2fa8:	41bf      	sbcs	r7, r7
    2faa:	1864      	adds	r4, r4, r1
    2fac:	427f      	negs	r7, r7
    2fae:	19e4      	adds	r4, r4, r7
    2fb0:	07e7      	lsls	r7, r4, #31
    2fb2:	0852      	lsrs	r2, r2, #1
    2fb4:	4317      	orrs	r7, r2
    2fb6:	0864      	lsrs	r4, r4, #1
    2fb8:	0006      	movs	r6, r0
    2fba:	e721      	b.n	2e00 <__aeabi_dadd+0x108>
    2fbc:	482e      	ldr	r0, [pc, #184]	; (3078 <__aeabi_dadd+0x380>)
    2fbe:	4285      	cmp	r5, r0
    2fc0:	d100      	bne.n	2fc4 <__aeabi_dadd+0x2cc>
    2fc2:	e093      	b.n	30ec <__aeabi_dadd+0x3f4>
    2fc4:	001d      	movs	r5, r3
    2fc6:	e6d0      	b.n	2d6a <__aeabi_dadd+0x72>
    2fc8:	0029      	movs	r1, r5
    2fca:	3e1f      	subs	r6, #31
    2fcc:	40f1      	lsrs	r1, r6
    2fce:	2b20      	cmp	r3, #32
    2fd0:	d100      	bne.n	2fd4 <__aeabi_dadd+0x2dc>
    2fd2:	e08d      	b.n	30f0 <__aeabi_dadd+0x3f8>
    2fd4:	2240      	movs	r2, #64	; 0x40
    2fd6:	1ad3      	subs	r3, r2, r3
    2fd8:	409d      	lsls	r5, r3
    2fda:	432f      	orrs	r7, r5
    2fdc:	1e7d      	subs	r5, r7, #1
    2fde:	41af      	sbcs	r7, r5
    2fe0:	2400      	movs	r4, #0
    2fe2:	430f      	orrs	r7, r1
    2fe4:	2600      	movs	r6, #0
    2fe6:	e744      	b.n	2e72 <__aeabi_dadd+0x17a>
    2fe8:	002b      	movs	r3, r5
    2fea:	0008      	movs	r0, r1
    2fec:	3b20      	subs	r3, #32
    2fee:	40d8      	lsrs	r0, r3
    2ff0:	0003      	movs	r3, r0
    2ff2:	2d20      	cmp	r5, #32
    2ff4:	d100      	bne.n	2ff8 <__aeabi_dadd+0x300>
    2ff6:	e07d      	b.n	30f4 <__aeabi_dadd+0x3fc>
    2ff8:	2040      	movs	r0, #64	; 0x40
    2ffa:	1b45      	subs	r5, r0, r5
    2ffc:	40a9      	lsls	r1, r5
    2ffe:	430a      	orrs	r2, r1
    3000:	1e51      	subs	r1, r2, #1
    3002:	418a      	sbcs	r2, r1
    3004:	2100      	movs	r1, #0
    3006:	431a      	orrs	r2, r3
    3008:	e6c7      	b.n	2d9a <__aeabi_dadd+0xa2>
    300a:	2e00      	cmp	r6, #0
    300c:	d050      	beq.n	30b0 <__aeabi_dadd+0x3b8>
    300e:	4e1a      	ldr	r6, [pc, #104]	; (3078 <__aeabi_dadd+0x380>)
    3010:	42b0      	cmp	r0, r6
    3012:	d057      	beq.n	30c4 <__aeabi_dadd+0x3cc>
    3014:	2680      	movs	r6, #128	; 0x80
    3016:	426b      	negs	r3, r5
    3018:	4699      	mov	r9, r3
    301a:	0436      	lsls	r6, r6, #16
    301c:	4334      	orrs	r4, r6
    301e:	464b      	mov	r3, r9
    3020:	2b38      	cmp	r3, #56	; 0x38
    3022:	dd00      	ble.n	3026 <__aeabi_dadd+0x32e>
    3024:	e0d6      	b.n	31d4 <__aeabi_dadd+0x4dc>
    3026:	2b1f      	cmp	r3, #31
    3028:	dd00      	ble.n	302c <__aeabi_dadd+0x334>
    302a:	e135      	b.n	3298 <__aeabi_dadd+0x5a0>
    302c:	2620      	movs	r6, #32
    302e:	1af5      	subs	r5, r6, r3
    3030:	0026      	movs	r6, r4
    3032:	40ae      	lsls	r6, r5
    3034:	46b2      	mov	sl, r6
    3036:	003e      	movs	r6, r7
    3038:	40de      	lsrs	r6, r3
    303a:	46ac      	mov	ip, r5
    303c:	0035      	movs	r5, r6
    303e:	4656      	mov	r6, sl
    3040:	432e      	orrs	r6, r5
    3042:	4665      	mov	r5, ip
    3044:	40af      	lsls	r7, r5
    3046:	1e7d      	subs	r5, r7, #1
    3048:	41af      	sbcs	r7, r5
    304a:	40dc      	lsrs	r4, r3
    304c:	4337      	orrs	r7, r6
    304e:	1bd7      	subs	r7, r2, r7
    3050:	42ba      	cmp	r2, r7
    3052:	4192      	sbcs	r2, r2
    3054:	1b0c      	subs	r4, r1, r4
    3056:	4252      	negs	r2, r2
    3058:	1aa4      	subs	r4, r4, r2
    305a:	0006      	movs	r6, r0
    305c:	46d8      	mov	r8, fp
    305e:	e6a3      	b.n	2da8 <__aeabi_dadd+0xb0>
    3060:	4664      	mov	r4, ip
    3062:	4667      	mov	r7, ip
    3064:	432c      	orrs	r4, r5
    3066:	d000      	beq.n	306a <__aeabi_dadd+0x372>
    3068:	e6a2      	b.n	2db0 <__aeabi_dadd+0xb8>
    306a:	2500      	movs	r5, #0
    306c:	2600      	movs	r6, #0
    306e:	2700      	movs	r7, #0
    3070:	e706      	b.n	2e80 <__aeabi_dadd+0x188>
    3072:	001e      	movs	r6, r3
    3074:	e6c4      	b.n	2e00 <__aeabi_dadd+0x108>
    3076:	46c0      	nop			; (mov r8, r8)
    3078:	000007ff 	.word	0x000007ff
    307c:	ff7fffff 	.word	0xff7fffff
    3080:	800fffff 	.word	0x800fffff
    3084:	2b1f      	cmp	r3, #31
    3086:	dc63      	bgt.n	3150 <__aeabi_dadd+0x458>
    3088:	2020      	movs	r0, #32
    308a:	1ac3      	subs	r3, r0, r3
    308c:	0008      	movs	r0, r1
    308e:	4098      	lsls	r0, r3
    3090:	469c      	mov	ip, r3
    3092:	4683      	mov	fp, r0
    3094:	4653      	mov	r3, sl
    3096:	0010      	movs	r0, r2
    3098:	40d8      	lsrs	r0, r3
    309a:	0003      	movs	r3, r0
    309c:	4658      	mov	r0, fp
    309e:	4318      	orrs	r0, r3
    30a0:	4663      	mov	r3, ip
    30a2:	409a      	lsls	r2, r3
    30a4:	1e53      	subs	r3, r2, #1
    30a6:	419a      	sbcs	r2, r3
    30a8:	4653      	mov	r3, sl
    30aa:	4302      	orrs	r2, r0
    30ac:	40d9      	lsrs	r1, r3
    30ae:	e703      	b.n	2eb8 <__aeabi_dadd+0x1c0>
    30b0:	0026      	movs	r6, r4
    30b2:	433e      	orrs	r6, r7
    30b4:	d006      	beq.n	30c4 <__aeabi_dadd+0x3cc>
    30b6:	43eb      	mvns	r3, r5
    30b8:	4699      	mov	r9, r3
    30ba:	2b00      	cmp	r3, #0
    30bc:	d0c7      	beq.n	304e <__aeabi_dadd+0x356>
    30be:	4e94      	ldr	r6, [pc, #592]	; (3310 <__aeabi_dadd+0x618>)
    30c0:	42b0      	cmp	r0, r6
    30c2:	d1ac      	bne.n	301e <__aeabi_dadd+0x326>
    30c4:	000c      	movs	r4, r1
    30c6:	0017      	movs	r7, r2
    30c8:	0006      	movs	r6, r0
    30ca:	46d8      	mov	r8, fp
    30cc:	e698      	b.n	2e00 <__aeabi_dadd+0x108>
    30ce:	4b90      	ldr	r3, [pc, #576]	; (3310 <__aeabi_dadd+0x618>)
    30d0:	459a      	cmp	sl, r3
    30d2:	d00b      	beq.n	30ec <__aeabi_dadd+0x3f4>
    30d4:	4682      	mov	sl, r0
    30d6:	e6e7      	b.n	2ea8 <__aeabi_dadd+0x1b0>
    30d8:	2800      	cmp	r0, #0
    30da:	d000      	beq.n	30de <__aeabi_dadd+0x3e6>
    30dc:	e09e      	b.n	321c <__aeabi_dadd+0x524>
    30de:	0018      	movs	r0, r3
    30e0:	4310      	orrs	r0, r2
    30e2:	d100      	bne.n	30e6 <__aeabi_dadd+0x3ee>
    30e4:	e0e9      	b.n	32ba <__aeabi_dadd+0x5c2>
    30e6:	001c      	movs	r4, r3
    30e8:	0017      	movs	r7, r2
    30ea:	46d8      	mov	r8, fp
    30ec:	4e88      	ldr	r6, [pc, #544]	; (3310 <__aeabi_dadd+0x618>)
    30ee:	e687      	b.n	2e00 <__aeabi_dadd+0x108>
    30f0:	2500      	movs	r5, #0
    30f2:	e772      	b.n	2fda <__aeabi_dadd+0x2e2>
    30f4:	2100      	movs	r1, #0
    30f6:	e782      	b.n	2ffe <__aeabi_dadd+0x306>
    30f8:	0023      	movs	r3, r4
    30fa:	433b      	orrs	r3, r7
    30fc:	2e00      	cmp	r6, #0
    30fe:	d000      	beq.n	3102 <__aeabi_dadd+0x40a>
    3100:	e0ab      	b.n	325a <__aeabi_dadd+0x562>
    3102:	2b00      	cmp	r3, #0
    3104:	d100      	bne.n	3108 <__aeabi_dadd+0x410>
    3106:	e0e7      	b.n	32d8 <__aeabi_dadd+0x5e0>
    3108:	000b      	movs	r3, r1
    310a:	4313      	orrs	r3, r2
    310c:	d100      	bne.n	3110 <__aeabi_dadd+0x418>
    310e:	e677      	b.n	2e00 <__aeabi_dadd+0x108>
    3110:	18ba      	adds	r2, r7, r2
    3112:	42ba      	cmp	r2, r7
    3114:	41bf      	sbcs	r7, r7
    3116:	1864      	adds	r4, r4, r1
    3118:	427f      	negs	r7, r7
    311a:	19e4      	adds	r4, r4, r7
    311c:	0223      	lsls	r3, r4, #8
    311e:	d400      	bmi.n	3122 <__aeabi_dadd+0x42a>
    3120:	e0f2      	b.n	3308 <__aeabi_dadd+0x610>
    3122:	4b7c      	ldr	r3, [pc, #496]	; (3314 <__aeabi_dadd+0x61c>)
    3124:	0017      	movs	r7, r2
    3126:	401c      	ands	r4, r3
    3128:	0006      	movs	r6, r0
    312a:	e669      	b.n	2e00 <__aeabi_dadd+0x108>
    312c:	0020      	movs	r0, r4
    312e:	4338      	orrs	r0, r7
    3130:	2e00      	cmp	r6, #0
    3132:	d1d1      	bne.n	30d8 <__aeabi_dadd+0x3e0>
    3134:	2800      	cmp	r0, #0
    3136:	d15b      	bne.n	31f0 <__aeabi_dadd+0x4f8>
    3138:	001c      	movs	r4, r3
    313a:	4314      	orrs	r4, r2
    313c:	d100      	bne.n	3140 <__aeabi_dadd+0x448>
    313e:	e0a8      	b.n	3292 <__aeabi_dadd+0x59a>
    3140:	001c      	movs	r4, r3
    3142:	0017      	movs	r7, r2
    3144:	46d8      	mov	r8, fp
    3146:	e65b      	b.n	2e00 <__aeabi_dadd+0x108>
    3148:	0006      	movs	r6, r0
    314a:	2400      	movs	r4, #0
    314c:	2700      	movs	r7, #0
    314e:	e697      	b.n	2e80 <__aeabi_dadd+0x188>
    3150:	4650      	mov	r0, sl
    3152:	000b      	movs	r3, r1
    3154:	3820      	subs	r0, #32
    3156:	40c3      	lsrs	r3, r0
    3158:	4699      	mov	r9, r3
    315a:	4653      	mov	r3, sl
    315c:	2b20      	cmp	r3, #32
    315e:	d100      	bne.n	3162 <__aeabi_dadd+0x46a>
    3160:	e095      	b.n	328e <__aeabi_dadd+0x596>
    3162:	2340      	movs	r3, #64	; 0x40
    3164:	4650      	mov	r0, sl
    3166:	1a1b      	subs	r3, r3, r0
    3168:	4099      	lsls	r1, r3
    316a:	430a      	orrs	r2, r1
    316c:	1e51      	subs	r1, r2, #1
    316e:	418a      	sbcs	r2, r1
    3170:	464b      	mov	r3, r9
    3172:	2100      	movs	r1, #0
    3174:	431a      	orrs	r2, r3
    3176:	e69f      	b.n	2eb8 <__aeabi_dadd+0x1c0>
    3178:	2e00      	cmp	r6, #0
    317a:	d130      	bne.n	31de <__aeabi_dadd+0x4e6>
    317c:	0026      	movs	r6, r4
    317e:	433e      	orrs	r6, r7
    3180:	d067      	beq.n	3252 <__aeabi_dadd+0x55a>
    3182:	43db      	mvns	r3, r3
    3184:	469a      	mov	sl, r3
    3186:	2b00      	cmp	r3, #0
    3188:	d01c      	beq.n	31c4 <__aeabi_dadd+0x4cc>
    318a:	4e61      	ldr	r6, [pc, #388]	; (3310 <__aeabi_dadd+0x618>)
    318c:	42b0      	cmp	r0, r6
    318e:	d060      	beq.n	3252 <__aeabi_dadd+0x55a>
    3190:	4653      	mov	r3, sl
    3192:	2b38      	cmp	r3, #56	; 0x38
    3194:	dd00      	ble.n	3198 <__aeabi_dadd+0x4a0>
    3196:	e096      	b.n	32c6 <__aeabi_dadd+0x5ce>
    3198:	2b1f      	cmp	r3, #31
    319a:	dd00      	ble.n	319e <__aeabi_dadd+0x4a6>
    319c:	e09f      	b.n	32de <__aeabi_dadd+0x5e6>
    319e:	2620      	movs	r6, #32
    31a0:	1af3      	subs	r3, r6, r3
    31a2:	0026      	movs	r6, r4
    31a4:	409e      	lsls	r6, r3
    31a6:	469c      	mov	ip, r3
    31a8:	46b3      	mov	fp, r6
    31aa:	4653      	mov	r3, sl
    31ac:	003e      	movs	r6, r7
    31ae:	40de      	lsrs	r6, r3
    31b0:	0033      	movs	r3, r6
    31b2:	465e      	mov	r6, fp
    31b4:	431e      	orrs	r6, r3
    31b6:	4663      	mov	r3, ip
    31b8:	409f      	lsls	r7, r3
    31ba:	1e7b      	subs	r3, r7, #1
    31bc:	419f      	sbcs	r7, r3
    31be:	4653      	mov	r3, sl
    31c0:	40dc      	lsrs	r4, r3
    31c2:	4337      	orrs	r7, r6
    31c4:	18bf      	adds	r7, r7, r2
    31c6:	4297      	cmp	r7, r2
    31c8:	4192      	sbcs	r2, r2
    31ca:	1864      	adds	r4, r4, r1
    31cc:	4252      	negs	r2, r2
    31ce:	18a4      	adds	r4, r4, r2
    31d0:	0006      	movs	r6, r0
    31d2:	e678      	b.n	2ec6 <__aeabi_dadd+0x1ce>
    31d4:	4327      	orrs	r7, r4
    31d6:	1e7c      	subs	r4, r7, #1
    31d8:	41a7      	sbcs	r7, r4
    31da:	2400      	movs	r4, #0
    31dc:	e737      	b.n	304e <__aeabi_dadd+0x356>
    31de:	4e4c      	ldr	r6, [pc, #304]	; (3310 <__aeabi_dadd+0x618>)
    31e0:	42b0      	cmp	r0, r6
    31e2:	d036      	beq.n	3252 <__aeabi_dadd+0x55a>
    31e4:	2680      	movs	r6, #128	; 0x80
    31e6:	425b      	negs	r3, r3
    31e8:	0436      	lsls	r6, r6, #16
    31ea:	469a      	mov	sl, r3
    31ec:	4334      	orrs	r4, r6
    31ee:	e7cf      	b.n	3190 <__aeabi_dadd+0x498>
    31f0:	0018      	movs	r0, r3
    31f2:	4310      	orrs	r0, r2
    31f4:	d100      	bne.n	31f8 <__aeabi_dadd+0x500>
    31f6:	e603      	b.n	2e00 <__aeabi_dadd+0x108>
    31f8:	1ab8      	subs	r0, r7, r2
    31fa:	4684      	mov	ip, r0
    31fc:	4567      	cmp	r7, ip
    31fe:	41ad      	sbcs	r5, r5
    3200:	1ae0      	subs	r0, r4, r3
    3202:	426d      	negs	r5, r5
    3204:	1b40      	subs	r0, r0, r5
    3206:	0205      	lsls	r5, r0, #8
    3208:	d400      	bmi.n	320c <__aeabi_dadd+0x514>
    320a:	e62c      	b.n	2e66 <__aeabi_dadd+0x16e>
    320c:	1bd7      	subs	r7, r2, r7
    320e:	42ba      	cmp	r2, r7
    3210:	4192      	sbcs	r2, r2
    3212:	1b1c      	subs	r4, r3, r4
    3214:	4252      	negs	r2, r2
    3216:	1aa4      	subs	r4, r4, r2
    3218:	46d8      	mov	r8, fp
    321a:	e5f1      	b.n	2e00 <__aeabi_dadd+0x108>
    321c:	0018      	movs	r0, r3
    321e:	4310      	orrs	r0, r2
    3220:	d100      	bne.n	3224 <__aeabi_dadd+0x52c>
    3222:	e763      	b.n	30ec <__aeabi_dadd+0x3f4>
    3224:	08f8      	lsrs	r0, r7, #3
    3226:	0767      	lsls	r7, r4, #29
    3228:	4307      	orrs	r7, r0
    322a:	2080      	movs	r0, #128	; 0x80
    322c:	08e4      	lsrs	r4, r4, #3
    322e:	0300      	lsls	r0, r0, #12
    3230:	4204      	tst	r4, r0
    3232:	d008      	beq.n	3246 <__aeabi_dadd+0x54e>
    3234:	08dd      	lsrs	r5, r3, #3
    3236:	4205      	tst	r5, r0
    3238:	d105      	bne.n	3246 <__aeabi_dadd+0x54e>
    323a:	08d2      	lsrs	r2, r2, #3
    323c:	0759      	lsls	r1, r3, #29
    323e:	4311      	orrs	r1, r2
    3240:	000f      	movs	r7, r1
    3242:	002c      	movs	r4, r5
    3244:	46d8      	mov	r8, fp
    3246:	0f7b      	lsrs	r3, r7, #29
    3248:	00e4      	lsls	r4, r4, #3
    324a:	431c      	orrs	r4, r3
    324c:	00ff      	lsls	r7, r7, #3
    324e:	4e30      	ldr	r6, [pc, #192]	; (3310 <__aeabi_dadd+0x618>)
    3250:	e5d6      	b.n	2e00 <__aeabi_dadd+0x108>
    3252:	000c      	movs	r4, r1
    3254:	0017      	movs	r7, r2
    3256:	0006      	movs	r6, r0
    3258:	e5d2      	b.n	2e00 <__aeabi_dadd+0x108>
    325a:	2b00      	cmp	r3, #0
    325c:	d038      	beq.n	32d0 <__aeabi_dadd+0x5d8>
    325e:	000b      	movs	r3, r1
    3260:	4313      	orrs	r3, r2
    3262:	d100      	bne.n	3266 <__aeabi_dadd+0x56e>
    3264:	e742      	b.n	30ec <__aeabi_dadd+0x3f4>
    3266:	08f8      	lsrs	r0, r7, #3
    3268:	0767      	lsls	r7, r4, #29
    326a:	4307      	orrs	r7, r0
    326c:	2080      	movs	r0, #128	; 0x80
    326e:	08e4      	lsrs	r4, r4, #3
    3270:	0300      	lsls	r0, r0, #12
    3272:	4204      	tst	r4, r0
    3274:	d0e7      	beq.n	3246 <__aeabi_dadd+0x54e>
    3276:	08cb      	lsrs	r3, r1, #3
    3278:	4203      	tst	r3, r0
    327a:	d1e4      	bne.n	3246 <__aeabi_dadd+0x54e>
    327c:	08d2      	lsrs	r2, r2, #3
    327e:	0749      	lsls	r1, r1, #29
    3280:	4311      	orrs	r1, r2
    3282:	000f      	movs	r7, r1
    3284:	001c      	movs	r4, r3
    3286:	e7de      	b.n	3246 <__aeabi_dadd+0x54e>
    3288:	2700      	movs	r7, #0
    328a:	2400      	movs	r4, #0
    328c:	e5d5      	b.n	2e3a <__aeabi_dadd+0x142>
    328e:	2100      	movs	r1, #0
    3290:	e76b      	b.n	316a <__aeabi_dadd+0x472>
    3292:	2500      	movs	r5, #0
    3294:	2700      	movs	r7, #0
    3296:	e5f3      	b.n	2e80 <__aeabi_dadd+0x188>
    3298:	464e      	mov	r6, r9
    329a:	0025      	movs	r5, r4
    329c:	3e20      	subs	r6, #32
    329e:	40f5      	lsrs	r5, r6
    32a0:	464b      	mov	r3, r9
    32a2:	002e      	movs	r6, r5
    32a4:	2b20      	cmp	r3, #32
    32a6:	d02d      	beq.n	3304 <__aeabi_dadd+0x60c>
    32a8:	2540      	movs	r5, #64	; 0x40
    32aa:	1aed      	subs	r5, r5, r3
    32ac:	40ac      	lsls	r4, r5
    32ae:	4327      	orrs	r7, r4
    32b0:	1e7c      	subs	r4, r7, #1
    32b2:	41a7      	sbcs	r7, r4
    32b4:	2400      	movs	r4, #0
    32b6:	4337      	orrs	r7, r6
    32b8:	e6c9      	b.n	304e <__aeabi_dadd+0x356>
    32ba:	2480      	movs	r4, #128	; 0x80
    32bc:	2500      	movs	r5, #0
    32be:	0324      	lsls	r4, r4, #12
    32c0:	4e13      	ldr	r6, [pc, #76]	; (3310 <__aeabi_dadd+0x618>)
    32c2:	2700      	movs	r7, #0
    32c4:	e5dc      	b.n	2e80 <__aeabi_dadd+0x188>
    32c6:	4327      	orrs	r7, r4
    32c8:	1e7c      	subs	r4, r7, #1
    32ca:	41a7      	sbcs	r7, r4
    32cc:	2400      	movs	r4, #0
    32ce:	e779      	b.n	31c4 <__aeabi_dadd+0x4cc>
    32d0:	000c      	movs	r4, r1
    32d2:	0017      	movs	r7, r2
    32d4:	4e0e      	ldr	r6, [pc, #56]	; (3310 <__aeabi_dadd+0x618>)
    32d6:	e593      	b.n	2e00 <__aeabi_dadd+0x108>
    32d8:	000c      	movs	r4, r1
    32da:	0017      	movs	r7, r2
    32dc:	e590      	b.n	2e00 <__aeabi_dadd+0x108>
    32de:	4656      	mov	r6, sl
    32e0:	0023      	movs	r3, r4
    32e2:	3e20      	subs	r6, #32
    32e4:	40f3      	lsrs	r3, r6
    32e6:	4699      	mov	r9, r3
    32e8:	4653      	mov	r3, sl
    32ea:	2b20      	cmp	r3, #32
    32ec:	d00e      	beq.n	330c <__aeabi_dadd+0x614>
    32ee:	2340      	movs	r3, #64	; 0x40
    32f0:	4656      	mov	r6, sl
    32f2:	1b9b      	subs	r3, r3, r6
    32f4:	409c      	lsls	r4, r3
    32f6:	4327      	orrs	r7, r4
    32f8:	1e7c      	subs	r4, r7, #1
    32fa:	41a7      	sbcs	r7, r4
    32fc:	464b      	mov	r3, r9
    32fe:	2400      	movs	r4, #0
    3300:	431f      	orrs	r7, r3
    3302:	e75f      	b.n	31c4 <__aeabi_dadd+0x4cc>
    3304:	2400      	movs	r4, #0
    3306:	e7d2      	b.n	32ae <__aeabi_dadd+0x5b6>
    3308:	0017      	movs	r7, r2
    330a:	e5b2      	b.n	2e72 <__aeabi_dadd+0x17a>
    330c:	2400      	movs	r4, #0
    330e:	e7f2      	b.n	32f6 <__aeabi_dadd+0x5fe>
    3310:	000007ff 	.word	0x000007ff
    3314:	ff7fffff 	.word	0xff7fffff

00003318 <__aeabi_ddiv>:
    3318:	b5f0      	push	{r4, r5, r6, r7, lr}
    331a:	4657      	mov	r7, sl
    331c:	4645      	mov	r5, r8
    331e:	46de      	mov	lr, fp
    3320:	464e      	mov	r6, r9
    3322:	b5e0      	push	{r5, r6, r7, lr}
    3324:	004c      	lsls	r4, r1, #1
    3326:	030e      	lsls	r6, r1, #12
    3328:	b087      	sub	sp, #28
    332a:	4683      	mov	fp, r0
    332c:	4692      	mov	sl, r2
    332e:	001d      	movs	r5, r3
    3330:	4680      	mov	r8, r0
    3332:	0b36      	lsrs	r6, r6, #12
    3334:	0d64      	lsrs	r4, r4, #21
    3336:	0fcf      	lsrs	r7, r1, #31
    3338:	2c00      	cmp	r4, #0
    333a:	d04f      	beq.n	33dc <__aeabi_ddiv+0xc4>
    333c:	4b6f      	ldr	r3, [pc, #444]	; (34fc <__aeabi_ddiv+0x1e4>)
    333e:	429c      	cmp	r4, r3
    3340:	d035      	beq.n	33ae <__aeabi_ddiv+0x96>
    3342:	2380      	movs	r3, #128	; 0x80
    3344:	0f42      	lsrs	r2, r0, #29
    3346:	041b      	lsls	r3, r3, #16
    3348:	00f6      	lsls	r6, r6, #3
    334a:	4313      	orrs	r3, r2
    334c:	4333      	orrs	r3, r6
    334e:	4699      	mov	r9, r3
    3350:	00c3      	lsls	r3, r0, #3
    3352:	4698      	mov	r8, r3
    3354:	4b6a      	ldr	r3, [pc, #424]	; (3500 <__aeabi_ddiv+0x1e8>)
    3356:	2600      	movs	r6, #0
    3358:	469c      	mov	ip, r3
    335a:	2300      	movs	r3, #0
    335c:	4464      	add	r4, ip
    335e:	9303      	str	r3, [sp, #12]
    3360:	032b      	lsls	r3, r5, #12
    3362:	0b1b      	lsrs	r3, r3, #12
    3364:	469b      	mov	fp, r3
    3366:	006b      	lsls	r3, r5, #1
    3368:	0fed      	lsrs	r5, r5, #31
    336a:	4650      	mov	r0, sl
    336c:	0d5b      	lsrs	r3, r3, #21
    336e:	9501      	str	r5, [sp, #4]
    3370:	d05e      	beq.n	3430 <__aeabi_ddiv+0x118>
    3372:	4a62      	ldr	r2, [pc, #392]	; (34fc <__aeabi_ddiv+0x1e4>)
    3374:	4293      	cmp	r3, r2
    3376:	d053      	beq.n	3420 <__aeabi_ddiv+0x108>
    3378:	465a      	mov	r2, fp
    337a:	00d1      	lsls	r1, r2, #3
    337c:	2280      	movs	r2, #128	; 0x80
    337e:	0f40      	lsrs	r0, r0, #29
    3380:	0412      	lsls	r2, r2, #16
    3382:	4302      	orrs	r2, r0
    3384:	430a      	orrs	r2, r1
    3386:	4693      	mov	fp, r2
    3388:	4652      	mov	r2, sl
    338a:	00d1      	lsls	r1, r2, #3
    338c:	4a5c      	ldr	r2, [pc, #368]	; (3500 <__aeabi_ddiv+0x1e8>)
    338e:	4694      	mov	ip, r2
    3390:	2200      	movs	r2, #0
    3392:	4463      	add	r3, ip
    3394:	0038      	movs	r0, r7
    3396:	4068      	eors	r0, r5
    3398:	4684      	mov	ip, r0
    339a:	9002      	str	r0, [sp, #8]
    339c:	1ae4      	subs	r4, r4, r3
    339e:	4316      	orrs	r6, r2
    33a0:	2e0f      	cmp	r6, #15
    33a2:	d900      	bls.n	33a6 <__aeabi_ddiv+0x8e>
    33a4:	e0b4      	b.n	3510 <__aeabi_ddiv+0x1f8>
    33a6:	4b57      	ldr	r3, [pc, #348]	; (3504 <__aeabi_ddiv+0x1ec>)
    33a8:	00b6      	lsls	r6, r6, #2
    33aa:	599b      	ldr	r3, [r3, r6]
    33ac:	469f      	mov	pc, r3
    33ae:	0003      	movs	r3, r0
    33b0:	4333      	orrs	r3, r6
    33b2:	4699      	mov	r9, r3
    33b4:	d16c      	bne.n	3490 <__aeabi_ddiv+0x178>
    33b6:	2300      	movs	r3, #0
    33b8:	4698      	mov	r8, r3
    33ba:	3302      	adds	r3, #2
    33bc:	2608      	movs	r6, #8
    33be:	9303      	str	r3, [sp, #12]
    33c0:	e7ce      	b.n	3360 <__aeabi_ddiv+0x48>
    33c2:	46cb      	mov	fp, r9
    33c4:	4641      	mov	r1, r8
    33c6:	9a03      	ldr	r2, [sp, #12]
    33c8:	9701      	str	r7, [sp, #4]
    33ca:	2a02      	cmp	r2, #2
    33cc:	d165      	bne.n	349a <__aeabi_ddiv+0x182>
    33ce:	9b01      	ldr	r3, [sp, #4]
    33d0:	4c4a      	ldr	r4, [pc, #296]	; (34fc <__aeabi_ddiv+0x1e4>)
    33d2:	469c      	mov	ip, r3
    33d4:	2300      	movs	r3, #0
    33d6:	2200      	movs	r2, #0
    33d8:	4698      	mov	r8, r3
    33da:	e06b      	b.n	34b4 <__aeabi_ddiv+0x19c>
    33dc:	0003      	movs	r3, r0
    33de:	4333      	orrs	r3, r6
    33e0:	4699      	mov	r9, r3
    33e2:	d04e      	beq.n	3482 <__aeabi_ddiv+0x16a>
    33e4:	2e00      	cmp	r6, #0
    33e6:	d100      	bne.n	33ea <__aeabi_ddiv+0xd2>
    33e8:	e1bc      	b.n	3764 <__aeabi_ddiv+0x44c>
    33ea:	0030      	movs	r0, r6
    33ec:	f001 fad4 	bl	4998 <__clzsi2>
    33f0:	0003      	movs	r3, r0
    33f2:	3b0b      	subs	r3, #11
    33f4:	2b1c      	cmp	r3, #28
    33f6:	dd00      	ble.n	33fa <__aeabi_ddiv+0xe2>
    33f8:	e1ac      	b.n	3754 <__aeabi_ddiv+0x43c>
    33fa:	221d      	movs	r2, #29
    33fc:	1ad3      	subs	r3, r2, r3
    33fe:	465a      	mov	r2, fp
    3400:	0001      	movs	r1, r0
    3402:	40da      	lsrs	r2, r3
    3404:	3908      	subs	r1, #8
    3406:	408e      	lsls	r6, r1
    3408:	0013      	movs	r3, r2
    340a:	4333      	orrs	r3, r6
    340c:	4699      	mov	r9, r3
    340e:	465b      	mov	r3, fp
    3410:	408b      	lsls	r3, r1
    3412:	4698      	mov	r8, r3
    3414:	2300      	movs	r3, #0
    3416:	4c3c      	ldr	r4, [pc, #240]	; (3508 <__aeabi_ddiv+0x1f0>)
    3418:	2600      	movs	r6, #0
    341a:	1a24      	subs	r4, r4, r0
    341c:	9303      	str	r3, [sp, #12]
    341e:	e79f      	b.n	3360 <__aeabi_ddiv+0x48>
    3420:	4651      	mov	r1, sl
    3422:	465a      	mov	r2, fp
    3424:	4311      	orrs	r1, r2
    3426:	d129      	bne.n	347c <__aeabi_ddiv+0x164>
    3428:	2200      	movs	r2, #0
    342a:	4693      	mov	fp, r2
    342c:	3202      	adds	r2, #2
    342e:	e7b1      	b.n	3394 <__aeabi_ddiv+0x7c>
    3430:	4659      	mov	r1, fp
    3432:	4301      	orrs	r1, r0
    3434:	d01e      	beq.n	3474 <__aeabi_ddiv+0x15c>
    3436:	465b      	mov	r3, fp
    3438:	2b00      	cmp	r3, #0
    343a:	d100      	bne.n	343e <__aeabi_ddiv+0x126>
    343c:	e19e      	b.n	377c <__aeabi_ddiv+0x464>
    343e:	4658      	mov	r0, fp
    3440:	f001 faaa 	bl	4998 <__clzsi2>
    3444:	0003      	movs	r3, r0
    3446:	3b0b      	subs	r3, #11
    3448:	2b1c      	cmp	r3, #28
    344a:	dd00      	ble.n	344e <__aeabi_ddiv+0x136>
    344c:	e18f      	b.n	376e <__aeabi_ddiv+0x456>
    344e:	0002      	movs	r2, r0
    3450:	4659      	mov	r1, fp
    3452:	3a08      	subs	r2, #8
    3454:	4091      	lsls	r1, r2
    3456:	468b      	mov	fp, r1
    3458:	211d      	movs	r1, #29
    345a:	1acb      	subs	r3, r1, r3
    345c:	4651      	mov	r1, sl
    345e:	40d9      	lsrs	r1, r3
    3460:	000b      	movs	r3, r1
    3462:	4659      	mov	r1, fp
    3464:	430b      	orrs	r3, r1
    3466:	4651      	mov	r1, sl
    3468:	469b      	mov	fp, r3
    346a:	4091      	lsls	r1, r2
    346c:	4b26      	ldr	r3, [pc, #152]	; (3508 <__aeabi_ddiv+0x1f0>)
    346e:	2200      	movs	r2, #0
    3470:	1a1b      	subs	r3, r3, r0
    3472:	e78f      	b.n	3394 <__aeabi_ddiv+0x7c>
    3474:	2300      	movs	r3, #0
    3476:	2201      	movs	r2, #1
    3478:	469b      	mov	fp, r3
    347a:	e78b      	b.n	3394 <__aeabi_ddiv+0x7c>
    347c:	4651      	mov	r1, sl
    347e:	2203      	movs	r2, #3
    3480:	e788      	b.n	3394 <__aeabi_ddiv+0x7c>
    3482:	2300      	movs	r3, #0
    3484:	4698      	mov	r8, r3
    3486:	3301      	adds	r3, #1
    3488:	2604      	movs	r6, #4
    348a:	2400      	movs	r4, #0
    348c:	9303      	str	r3, [sp, #12]
    348e:	e767      	b.n	3360 <__aeabi_ddiv+0x48>
    3490:	2303      	movs	r3, #3
    3492:	46b1      	mov	r9, r6
    3494:	9303      	str	r3, [sp, #12]
    3496:	260c      	movs	r6, #12
    3498:	e762      	b.n	3360 <__aeabi_ddiv+0x48>
    349a:	2a03      	cmp	r2, #3
    349c:	d100      	bne.n	34a0 <__aeabi_ddiv+0x188>
    349e:	e25c      	b.n	395a <__aeabi_ddiv+0x642>
    34a0:	9b01      	ldr	r3, [sp, #4]
    34a2:	2a01      	cmp	r2, #1
    34a4:	d000      	beq.n	34a8 <__aeabi_ddiv+0x190>
    34a6:	e1e4      	b.n	3872 <__aeabi_ddiv+0x55a>
    34a8:	4013      	ands	r3, r2
    34aa:	469c      	mov	ip, r3
    34ac:	2300      	movs	r3, #0
    34ae:	2400      	movs	r4, #0
    34b0:	2200      	movs	r2, #0
    34b2:	4698      	mov	r8, r3
    34b4:	2100      	movs	r1, #0
    34b6:	0312      	lsls	r2, r2, #12
    34b8:	0b13      	lsrs	r3, r2, #12
    34ba:	0d0a      	lsrs	r2, r1, #20
    34bc:	0512      	lsls	r2, r2, #20
    34be:	431a      	orrs	r2, r3
    34c0:	0523      	lsls	r3, r4, #20
    34c2:	4c12      	ldr	r4, [pc, #72]	; (350c <__aeabi_ddiv+0x1f4>)
    34c4:	4640      	mov	r0, r8
    34c6:	4022      	ands	r2, r4
    34c8:	4313      	orrs	r3, r2
    34ca:	4662      	mov	r2, ip
    34cc:	005b      	lsls	r3, r3, #1
    34ce:	07d2      	lsls	r2, r2, #31
    34d0:	085b      	lsrs	r3, r3, #1
    34d2:	4313      	orrs	r3, r2
    34d4:	0019      	movs	r1, r3
    34d6:	b007      	add	sp, #28
    34d8:	bc3c      	pop	{r2, r3, r4, r5}
    34da:	4690      	mov	r8, r2
    34dc:	4699      	mov	r9, r3
    34de:	46a2      	mov	sl, r4
    34e0:	46ab      	mov	fp, r5
    34e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34e4:	2300      	movs	r3, #0
    34e6:	2280      	movs	r2, #128	; 0x80
    34e8:	469c      	mov	ip, r3
    34ea:	0312      	lsls	r2, r2, #12
    34ec:	4698      	mov	r8, r3
    34ee:	4c03      	ldr	r4, [pc, #12]	; (34fc <__aeabi_ddiv+0x1e4>)
    34f0:	e7e0      	b.n	34b4 <__aeabi_ddiv+0x19c>
    34f2:	2300      	movs	r3, #0
    34f4:	4c01      	ldr	r4, [pc, #4]	; (34fc <__aeabi_ddiv+0x1e4>)
    34f6:	2200      	movs	r2, #0
    34f8:	4698      	mov	r8, r3
    34fa:	e7db      	b.n	34b4 <__aeabi_ddiv+0x19c>
    34fc:	000007ff 	.word	0x000007ff
    3500:	fffffc01 	.word	0xfffffc01
    3504:	00004ac8 	.word	0x00004ac8
    3508:	fffffc0d 	.word	0xfffffc0d
    350c:	800fffff 	.word	0x800fffff
    3510:	45d9      	cmp	r9, fp
    3512:	d900      	bls.n	3516 <__aeabi_ddiv+0x1fe>
    3514:	e139      	b.n	378a <__aeabi_ddiv+0x472>
    3516:	d100      	bne.n	351a <__aeabi_ddiv+0x202>
    3518:	e134      	b.n	3784 <__aeabi_ddiv+0x46c>
    351a:	2300      	movs	r3, #0
    351c:	4646      	mov	r6, r8
    351e:	464d      	mov	r5, r9
    3520:	469a      	mov	sl, r3
    3522:	3c01      	subs	r4, #1
    3524:	465b      	mov	r3, fp
    3526:	0e0a      	lsrs	r2, r1, #24
    3528:	021b      	lsls	r3, r3, #8
    352a:	431a      	orrs	r2, r3
    352c:	020b      	lsls	r3, r1, #8
    352e:	0c17      	lsrs	r7, r2, #16
    3530:	9303      	str	r3, [sp, #12]
    3532:	0413      	lsls	r3, r2, #16
    3534:	0c1b      	lsrs	r3, r3, #16
    3536:	0039      	movs	r1, r7
    3538:	0028      	movs	r0, r5
    353a:	4690      	mov	r8, r2
    353c:	9301      	str	r3, [sp, #4]
    353e:	f7ff f835 	bl	25ac <__udivsi3>
    3542:	0002      	movs	r2, r0
    3544:	9b01      	ldr	r3, [sp, #4]
    3546:	4683      	mov	fp, r0
    3548:	435a      	muls	r2, r3
    354a:	0028      	movs	r0, r5
    354c:	0039      	movs	r1, r7
    354e:	4691      	mov	r9, r2
    3550:	f7ff f8b2 	bl	26b8 <__aeabi_uidivmod>
    3554:	0c35      	lsrs	r5, r6, #16
    3556:	0409      	lsls	r1, r1, #16
    3558:	430d      	orrs	r5, r1
    355a:	45a9      	cmp	r9, r5
    355c:	d90d      	bls.n	357a <__aeabi_ddiv+0x262>
    355e:	465b      	mov	r3, fp
    3560:	4445      	add	r5, r8
    3562:	3b01      	subs	r3, #1
    3564:	45a8      	cmp	r8, r5
    3566:	d900      	bls.n	356a <__aeabi_ddiv+0x252>
    3568:	e13a      	b.n	37e0 <__aeabi_ddiv+0x4c8>
    356a:	45a9      	cmp	r9, r5
    356c:	d800      	bhi.n	3570 <__aeabi_ddiv+0x258>
    356e:	e137      	b.n	37e0 <__aeabi_ddiv+0x4c8>
    3570:	2302      	movs	r3, #2
    3572:	425b      	negs	r3, r3
    3574:	469c      	mov	ip, r3
    3576:	4445      	add	r5, r8
    3578:	44e3      	add	fp, ip
    357a:	464b      	mov	r3, r9
    357c:	1aeb      	subs	r3, r5, r3
    357e:	0039      	movs	r1, r7
    3580:	0018      	movs	r0, r3
    3582:	9304      	str	r3, [sp, #16]
    3584:	f7ff f812 	bl	25ac <__udivsi3>
    3588:	9b01      	ldr	r3, [sp, #4]
    358a:	0005      	movs	r5, r0
    358c:	4343      	muls	r3, r0
    358e:	0039      	movs	r1, r7
    3590:	9804      	ldr	r0, [sp, #16]
    3592:	4699      	mov	r9, r3
    3594:	f7ff f890 	bl	26b8 <__aeabi_uidivmod>
    3598:	0433      	lsls	r3, r6, #16
    359a:	0409      	lsls	r1, r1, #16
    359c:	0c1b      	lsrs	r3, r3, #16
    359e:	430b      	orrs	r3, r1
    35a0:	4599      	cmp	r9, r3
    35a2:	d909      	bls.n	35b8 <__aeabi_ddiv+0x2a0>
    35a4:	4443      	add	r3, r8
    35a6:	1e6a      	subs	r2, r5, #1
    35a8:	4598      	cmp	r8, r3
    35aa:	d900      	bls.n	35ae <__aeabi_ddiv+0x296>
    35ac:	e11a      	b.n	37e4 <__aeabi_ddiv+0x4cc>
    35ae:	4599      	cmp	r9, r3
    35b0:	d800      	bhi.n	35b4 <__aeabi_ddiv+0x29c>
    35b2:	e117      	b.n	37e4 <__aeabi_ddiv+0x4cc>
    35b4:	3d02      	subs	r5, #2
    35b6:	4443      	add	r3, r8
    35b8:	464a      	mov	r2, r9
    35ba:	1a9b      	subs	r3, r3, r2
    35bc:	465a      	mov	r2, fp
    35be:	0412      	lsls	r2, r2, #16
    35c0:	432a      	orrs	r2, r5
    35c2:	9903      	ldr	r1, [sp, #12]
    35c4:	4693      	mov	fp, r2
    35c6:	0c10      	lsrs	r0, r2, #16
    35c8:	0c0a      	lsrs	r2, r1, #16
    35ca:	4691      	mov	r9, r2
    35cc:	0409      	lsls	r1, r1, #16
    35ce:	465a      	mov	r2, fp
    35d0:	0c09      	lsrs	r1, r1, #16
    35d2:	464e      	mov	r6, r9
    35d4:	000d      	movs	r5, r1
    35d6:	0412      	lsls	r2, r2, #16
    35d8:	0c12      	lsrs	r2, r2, #16
    35da:	4345      	muls	r5, r0
    35dc:	9105      	str	r1, [sp, #20]
    35de:	4351      	muls	r1, r2
    35e0:	4372      	muls	r2, r6
    35e2:	4370      	muls	r0, r6
    35e4:	1952      	adds	r2, r2, r5
    35e6:	0c0e      	lsrs	r6, r1, #16
    35e8:	18b2      	adds	r2, r6, r2
    35ea:	4295      	cmp	r5, r2
    35ec:	d903      	bls.n	35f6 <__aeabi_ddiv+0x2de>
    35ee:	2580      	movs	r5, #128	; 0x80
    35f0:	026d      	lsls	r5, r5, #9
    35f2:	46ac      	mov	ip, r5
    35f4:	4460      	add	r0, ip
    35f6:	0c15      	lsrs	r5, r2, #16
    35f8:	0409      	lsls	r1, r1, #16
    35fa:	0412      	lsls	r2, r2, #16
    35fc:	0c09      	lsrs	r1, r1, #16
    35fe:	1828      	adds	r0, r5, r0
    3600:	1852      	adds	r2, r2, r1
    3602:	4283      	cmp	r3, r0
    3604:	d200      	bcs.n	3608 <__aeabi_ddiv+0x2f0>
    3606:	e0ce      	b.n	37a6 <__aeabi_ddiv+0x48e>
    3608:	d100      	bne.n	360c <__aeabi_ddiv+0x2f4>
    360a:	e0c8      	b.n	379e <__aeabi_ddiv+0x486>
    360c:	1a1d      	subs	r5, r3, r0
    360e:	4653      	mov	r3, sl
    3610:	1a9e      	subs	r6, r3, r2
    3612:	45b2      	cmp	sl, r6
    3614:	4192      	sbcs	r2, r2
    3616:	4252      	negs	r2, r2
    3618:	1aab      	subs	r3, r5, r2
    361a:	469a      	mov	sl, r3
    361c:	4598      	cmp	r8, r3
    361e:	d100      	bne.n	3622 <__aeabi_ddiv+0x30a>
    3620:	e117      	b.n	3852 <__aeabi_ddiv+0x53a>
    3622:	0039      	movs	r1, r7
    3624:	0018      	movs	r0, r3
    3626:	f7fe ffc1 	bl	25ac <__udivsi3>
    362a:	9b01      	ldr	r3, [sp, #4]
    362c:	0005      	movs	r5, r0
    362e:	4343      	muls	r3, r0
    3630:	0039      	movs	r1, r7
    3632:	4650      	mov	r0, sl
    3634:	9304      	str	r3, [sp, #16]
    3636:	f7ff f83f 	bl	26b8 <__aeabi_uidivmod>
    363a:	9804      	ldr	r0, [sp, #16]
    363c:	040b      	lsls	r3, r1, #16
    363e:	0c31      	lsrs	r1, r6, #16
    3640:	4319      	orrs	r1, r3
    3642:	4288      	cmp	r0, r1
    3644:	d909      	bls.n	365a <__aeabi_ddiv+0x342>
    3646:	4441      	add	r1, r8
    3648:	1e6b      	subs	r3, r5, #1
    364a:	4588      	cmp	r8, r1
    364c:	d900      	bls.n	3650 <__aeabi_ddiv+0x338>
    364e:	e107      	b.n	3860 <__aeabi_ddiv+0x548>
    3650:	4288      	cmp	r0, r1
    3652:	d800      	bhi.n	3656 <__aeabi_ddiv+0x33e>
    3654:	e104      	b.n	3860 <__aeabi_ddiv+0x548>
    3656:	3d02      	subs	r5, #2
    3658:	4441      	add	r1, r8
    365a:	9b04      	ldr	r3, [sp, #16]
    365c:	1acb      	subs	r3, r1, r3
    365e:	0018      	movs	r0, r3
    3660:	0039      	movs	r1, r7
    3662:	9304      	str	r3, [sp, #16]
    3664:	f7fe ffa2 	bl	25ac <__udivsi3>
    3668:	9b01      	ldr	r3, [sp, #4]
    366a:	4682      	mov	sl, r0
    366c:	4343      	muls	r3, r0
    366e:	0039      	movs	r1, r7
    3670:	9804      	ldr	r0, [sp, #16]
    3672:	9301      	str	r3, [sp, #4]
    3674:	f7ff f820 	bl	26b8 <__aeabi_uidivmod>
    3678:	9801      	ldr	r0, [sp, #4]
    367a:	040b      	lsls	r3, r1, #16
    367c:	0431      	lsls	r1, r6, #16
    367e:	0c09      	lsrs	r1, r1, #16
    3680:	4319      	orrs	r1, r3
    3682:	4288      	cmp	r0, r1
    3684:	d90d      	bls.n	36a2 <__aeabi_ddiv+0x38a>
    3686:	4653      	mov	r3, sl
    3688:	4441      	add	r1, r8
    368a:	3b01      	subs	r3, #1
    368c:	4588      	cmp	r8, r1
    368e:	d900      	bls.n	3692 <__aeabi_ddiv+0x37a>
    3690:	e0e8      	b.n	3864 <__aeabi_ddiv+0x54c>
    3692:	4288      	cmp	r0, r1
    3694:	d800      	bhi.n	3698 <__aeabi_ddiv+0x380>
    3696:	e0e5      	b.n	3864 <__aeabi_ddiv+0x54c>
    3698:	2302      	movs	r3, #2
    369a:	425b      	negs	r3, r3
    369c:	469c      	mov	ip, r3
    369e:	4441      	add	r1, r8
    36a0:	44e2      	add	sl, ip
    36a2:	9b01      	ldr	r3, [sp, #4]
    36a4:	042d      	lsls	r5, r5, #16
    36a6:	1ace      	subs	r6, r1, r3
    36a8:	4651      	mov	r1, sl
    36aa:	4329      	orrs	r1, r5
    36ac:	9d05      	ldr	r5, [sp, #20]
    36ae:	464f      	mov	r7, r9
    36b0:	002a      	movs	r2, r5
    36b2:	040b      	lsls	r3, r1, #16
    36b4:	0c08      	lsrs	r0, r1, #16
    36b6:	0c1b      	lsrs	r3, r3, #16
    36b8:	435a      	muls	r2, r3
    36ba:	4345      	muls	r5, r0
    36bc:	437b      	muls	r3, r7
    36be:	4378      	muls	r0, r7
    36c0:	195b      	adds	r3, r3, r5
    36c2:	0c17      	lsrs	r7, r2, #16
    36c4:	18fb      	adds	r3, r7, r3
    36c6:	429d      	cmp	r5, r3
    36c8:	d903      	bls.n	36d2 <__aeabi_ddiv+0x3ba>
    36ca:	2580      	movs	r5, #128	; 0x80
    36cc:	026d      	lsls	r5, r5, #9
    36ce:	46ac      	mov	ip, r5
    36d0:	4460      	add	r0, ip
    36d2:	0c1d      	lsrs	r5, r3, #16
    36d4:	0412      	lsls	r2, r2, #16
    36d6:	041b      	lsls	r3, r3, #16
    36d8:	0c12      	lsrs	r2, r2, #16
    36da:	1828      	adds	r0, r5, r0
    36dc:	189b      	adds	r3, r3, r2
    36de:	4286      	cmp	r6, r0
    36e0:	d200      	bcs.n	36e4 <__aeabi_ddiv+0x3cc>
    36e2:	e093      	b.n	380c <__aeabi_ddiv+0x4f4>
    36e4:	d100      	bne.n	36e8 <__aeabi_ddiv+0x3d0>
    36e6:	e08e      	b.n	3806 <__aeabi_ddiv+0x4ee>
    36e8:	2301      	movs	r3, #1
    36ea:	4319      	orrs	r1, r3
    36ec:	4ba0      	ldr	r3, [pc, #640]	; (3970 <__aeabi_ddiv+0x658>)
    36ee:	18e3      	adds	r3, r4, r3
    36f0:	2b00      	cmp	r3, #0
    36f2:	dc00      	bgt.n	36f6 <__aeabi_ddiv+0x3de>
    36f4:	e099      	b.n	382a <__aeabi_ddiv+0x512>
    36f6:	074a      	lsls	r2, r1, #29
    36f8:	d000      	beq.n	36fc <__aeabi_ddiv+0x3e4>
    36fa:	e09e      	b.n	383a <__aeabi_ddiv+0x522>
    36fc:	465a      	mov	r2, fp
    36fe:	01d2      	lsls	r2, r2, #7
    3700:	d506      	bpl.n	3710 <__aeabi_ddiv+0x3f8>
    3702:	465a      	mov	r2, fp
    3704:	4b9b      	ldr	r3, [pc, #620]	; (3974 <__aeabi_ddiv+0x65c>)
    3706:	401a      	ands	r2, r3
    3708:	2380      	movs	r3, #128	; 0x80
    370a:	4693      	mov	fp, r2
    370c:	00db      	lsls	r3, r3, #3
    370e:	18e3      	adds	r3, r4, r3
    3710:	4a99      	ldr	r2, [pc, #612]	; (3978 <__aeabi_ddiv+0x660>)
    3712:	4293      	cmp	r3, r2
    3714:	dd68      	ble.n	37e8 <__aeabi_ddiv+0x4d0>
    3716:	2301      	movs	r3, #1
    3718:	9a02      	ldr	r2, [sp, #8]
    371a:	4c98      	ldr	r4, [pc, #608]	; (397c <__aeabi_ddiv+0x664>)
    371c:	401a      	ands	r2, r3
    371e:	2300      	movs	r3, #0
    3720:	4694      	mov	ip, r2
    3722:	4698      	mov	r8, r3
    3724:	2200      	movs	r2, #0
    3726:	e6c5      	b.n	34b4 <__aeabi_ddiv+0x19c>
    3728:	2280      	movs	r2, #128	; 0x80
    372a:	464b      	mov	r3, r9
    372c:	0312      	lsls	r2, r2, #12
    372e:	4213      	tst	r3, r2
    3730:	d00a      	beq.n	3748 <__aeabi_ddiv+0x430>
    3732:	465b      	mov	r3, fp
    3734:	4213      	tst	r3, r2
    3736:	d106      	bne.n	3746 <__aeabi_ddiv+0x42e>
    3738:	431a      	orrs	r2, r3
    373a:	0312      	lsls	r2, r2, #12
    373c:	0b12      	lsrs	r2, r2, #12
    373e:	46ac      	mov	ip, r5
    3740:	4688      	mov	r8, r1
    3742:	4c8e      	ldr	r4, [pc, #568]	; (397c <__aeabi_ddiv+0x664>)
    3744:	e6b6      	b.n	34b4 <__aeabi_ddiv+0x19c>
    3746:	464b      	mov	r3, r9
    3748:	431a      	orrs	r2, r3
    374a:	0312      	lsls	r2, r2, #12
    374c:	0b12      	lsrs	r2, r2, #12
    374e:	46bc      	mov	ip, r7
    3750:	4c8a      	ldr	r4, [pc, #552]	; (397c <__aeabi_ddiv+0x664>)
    3752:	e6af      	b.n	34b4 <__aeabi_ddiv+0x19c>
    3754:	0003      	movs	r3, r0
    3756:	465a      	mov	r2, fp
    3758:	3b28      	subs	r3, #40	; 0x28
    375a:	409a      	lsls	r2, r3
    375c:	2300      	movs	r3, #0
    375e:	4691      	mov	r9, r2
    3760:	4698      	mov	r8, r3
    3762:	e657      	b.n	3414 <__aeabi_ddiv+0xfc>
    3764:	4658      	mov	r0, fp
    3766:	f001 f917 	bl	4998 <__clzsi2>
    376a:	3020      	adds	r0, #32
    376c:	e640      	b.n	33f0 <__aeabi_ddiv+0xd8>
    376e:	0003      	movs	r3, r0
    3770:	4652      	mov	r2, sl
    3772:	3b28      	subs	r3, #40	; 0x28
    3774:	409a      	lsls	r2, r3
    3776:	2100      	movs	r1, #0
    3778:	4693      	mov	fp, r2
    377a:	e677      	b.n	346c <__aeabi_ddiv+0x154>
    377c:	f001 f90c 	bl	4998 <__clzsi2>
    3780:	3020      	adds	r0, #32
    3782:	e65f      	b.n	3444 <__aeabi_ddiv+0x12c>
    3784:	4588      	cmp	r8, r1
    3786:	d200      	bcs.n	378a <__aeabi_ddiv+0x472>
    3788:	e6c7      	b.n	351a <__aeabi_ddiv+0x202>
    378a:	464b      	mov	r3, r9
    378c:	07de      	lsls	r6, r3, #31
    378e:	085d      	lsrs	r5, r3, #1
    3790:	4643      	mov	r3, r8
    3792:	085b      	lsrs	r3, r3, #1
    3794:	431e      	orrs	r6, r3
    3796:	4643      	mov	r3, r8
    3798:	07db      	lsls	r3, r3, #31
    379a:	469a      	mov	sl, r3
    379c:	e6c2      	b.n	3524 <__aeabi_ddiv+0x20c>
    379e:	2500      	movs	r5, #0
    37a0:	4592      	cmp	sl, r2
    37a2:	d300      	bcc.n	37a6 <__aeabi_ddiv+0x48e>
    37a4:	e733      	b.n	360e <__aeabi_ddiv+0x2f6>
    37a6:	9e03      	ldr	r6, [sp, #12]
    37a8:	4659      	mov	r1, fp
    37aa:	46b4      	mov	ip, r6
    37ac:	44e2      	add	sl, ip
    37ae:	45b2      	cmp	sl, r6
    37b0:	41ad      	sbcs	r5, r5
    37b2:	426d      	negs	r5, r5
    37b4:	4445      	add	r5, r8
    37b6:	18eb      	adds	r3, r5, r3
    37b8:	3901      	subs	r1, #1
    37ba:	4598      	cmp	r8, r3
    37bc:	d207      	bcs.n	37ce <__aeabi_ddiv+0x4b6>
    37be:	4298      	cmp	r0, r3
    37c0:	d900      	bls.n	37c4 <__aeabi_ddiv+0x4ac>
    37c2:	e07f      	b.n	38c4 <__aeabi_ddiv+0x5ac>
    37c4:	d100      	bne.n	37c8 <__aeabi_ddiv+0x4b0>
    37c6:	e0bc      	b.n	3942 <__aeabi_ddiv+0x62a>
    37c8:	1a1d      	subs	r5, r3, r0
    37ca:	468b      	mov	fp, r1
    37cc:	e71f      	b.n	360e <__aeabi_ddiv+0x2f6>
    37ce:	4598      	cmp	r8, r3
    37d0:	d1fa      	bne.n	37c8 <__aeabi_ddiv+0x4b0>
    37d2:	9d03      	ldr	r5, [sp, #12]
    37d4:	4555      	cmp	r5, sl
    37d6:	d9f2      	bls.n	37be <__aeabi_ddiv+0x4a6>
    37d8:	4643      	mov	r3, r8
    37da:	468b      	mov	fp, r1
    37dc:	1a1d      	subs	r5, r3, r0
    37de:	e716      	b.n	360e <__aeabi_ddiv+0x2f6>
    37e0:	469b      	mov	fp, r3
    37e2:	e6ca      	b.n	357a <__aeabi_ddiv+0x262>
    37e4:	0015      	movs	r5, r2
    37e6:	e6e7      	b.n	35b8 <__aeabi_ddiv+0x2a0>
    37e8:	465a      	mov	r2, fp
    37ea:	08c9      	lsrs	r1, r1, #3
    37ec:	0752      	lsls	r2, r2, #29
    37ee:	430a      	orrs	r2, r1
    37f0:	055b      	lsls	r3, r3, #21
    37f2:	4690      	mov	r8, r2
    37f4:	0d5c      	lsrs	r4, r3, #21
    37f6:	465a      	mov	r2, fp
    37f8:	2301      	movs	r3, #1
    37fa:	9902      	ldr	r1, [sp, #8]
    37fc:	0252      	lsls	r2, r2, #9
    37fe:	4019      	ands	r1, r3
    3800:	0b12      	lsrs	r2, r2, #12
    3802:	468c      	mov	ip, r1
    3804:	e656      	b.n	34b4 <__aeabi_ddiv+0x19c>
    3806:	2b00      	cmp	r3, #0
    3808:	d100      	bne.n	380c <__aeabi_ddiv+0x4f4>
    380a:	e76f      	b.n	36ec <__aeabi_ddiv+0x3d4>
    380c:	4446      	add	r6, r8
    380e:	1e4a      	subs	r2, r1, #1
    3810:	45b0      	cmp	r8, r6
    3812:	d929      	bls.n	3868 <__aeabi_ddiv+0x550>
    3814:	0011      	movs	r1, r2
    3816:	4286      	cmp	r6, r0
    3818:	d000      	beq.n	381c <__aeabi_ddiv+0x504>
    381a:	e765      	b.n	36e8 <__aeabi_ddiv+0x3d0>
    381c:	9a03      	ldr	r2, [sp, #12]
    381e:	4293      	cmp	r3, r2
    3820:	d000      	beq.n	3824 <__aeabi_ddiv+0x50c>
    3822:	e761      	b.n	36e8 <__aeabi_ddiv+0x3d0>
    3824:	e762      	b.n	36ec <__aeabi_ddiv+0x3d4>
    3826:	2101      	movs	r1, #1
    3828:	4249      	negs	r1, r1
    382a:	2001      	movs	r0, #1
    382c:	1ac2      	subs	r2, r0, r3
    382e:	2a38      	cmp	r2, #56	; 0x38
    3830:	dd21      	ble.n	3876 <__aeabi_ddiv+0x55e>
    3832:	9b02      	ldr	r3, [sp, #8]
    3834:	4003      	ands	r3, r0
    3836:	469c      	mov	ip, r3
    3838:	e638      	b.n	34ac <__aeabi_ddiv+0x194>
    383a:	220f      	movs	r2, #15
    383c:	400a      	ands	r2, r1
    383e:	2a04      	cmp	r2, #4
    3840:	d100      	bne.n	3844 <__aeabi_ddiv+0x52c>
    3842:	e75b      	b.n	36fc <__aeabi_ddiv+0x3e4>
    3844:	000a      	movs	r2, r1
    3846:	1d11      	adds	r1, r2, #4
    3848:	4291      	cmp	r1, r2
    384a:	4192      	sbcs	r2, r2
    384c:	4252      	negs	r2, r2
    384e:	4493      	add	fp, r2
    3850:	e754      	b.n	36fc <__aeabi_ddiv+0x3e4>
    3852:	4b47      	ldr	r3, [pc, #284]	; (3970 <__aeabi_ddiv+0x658>)
    3854:	18e3      	adds	r3, r4, r3
    3856:	2b00      	cmp	r3, #0
    3858:	dde5      	ble.n	3826 <__aeabi_ddiv+0x50e>
    385a:	2201      	movs	r2, #1
    385c:	4252      	negs	r2, r2
    385e:	e7f2      	b.n	3846 <__aeabi_ddiv+0x52e>
    3860:	001d      	movs	r5, r3
    3862:	e6fa      	b.n	365a <__aeabi_ddiv+0x342>
    3864:	469a      	mov	sl, r3
    3866:	e71c      	b.n	36a2 <__aeabi_ddiv+0x38a>
    3868:	42b0      	cmp	r0, r6
    386a:	d839      	bhi.n	38e0 <__aeabi_ddiv+0x5c8>
    386c:	d06e      	beq.n	394c <__aeabi_ddiv+0x634>
    386e:	0011      	movs	r1, r2
    3870:	e73a      	b.n	36e8 <__aeabi_ddiv+0x3d0>
    3872:	9302      	str	r3, [sp, #8]
    3874:	e73a      	b.n	36ec <__aeabi_ddiv+0x3d4>
    3876:	2a1f      	cmp	r2, #31
    3878:	dc3c      	bgt.n	38f4 <__aeabi_ddiv+0x5dc>
    387a:	2320      	movs	r3, #32
    387c:	1a9b      	subs	r3, r3, r2
    387e:	000c      	movs	r4, r1
    3880:	4658      	mov	r0, fp
    3882:	4099      	lsls	r1, r3
    3884:	4098      	lsls	r0, r3
    3886:	1e4b      	subs	r3, r1, #1
    3888:	4199      	sbcs	r1, r3
    388a:	465b      	mov	r3, fp
    388c:	40d4      	lsrs	r4, r2
    388e:	40d3      	lsrs	r3, r2
    3890:	4320      	orrs	r0, r4
    3892:	4308      	orrs	r0, r1
    3894:	001a      	movs	r2, r3
    3896:	0743      	lsls	r3, r0, #29
    3898:	d009      	beq.n	38ae <__aeabi_ddiv+0x596>
    389a:	230f      	movs	r3, #15
    389c:	4003      	ands	r3, r0
    389e:	2b04      	cmp	r3, #4
    38a0:	d005      	beq.n	38ae <__aeabi_ddiv+0x596>
    38a2:	0001      	movs	r1, r0
    38a4:	1d08      	adds	r0, r1, #4
    38a6:	4288      	cmp	r0, r1
    38a8:	419b      	sbcs	r3, r3
    38aa:	425b      	negs	r3, r3
    38ac:	18d2      	adds	r2, r2, r3
    38ae:	0213      	lsls	r3, r2, #8
    38b0:	d53a      	bpl.n	3928 <__aeabi_ddiv+0x610>
    38b2:	2301      	movs	r3, #1
    38b4:	9a02      	ldr	r2, [sp, #8]
    38b6:	2401      	movs	r4, #1
    38b8:	401a      	ands	r2, r3
    38ba:	2300      	movs	r3, #0
    38bc:	4694      	mov	ip, r2
    38be:	4698      	mov	r8, r3
    38c0:	2200      	movs	r2, #0
    38c2:	e5f7      	b.n	34b4 <__aeabi_ddiv+0x19c>
    38c4:	2102      	movs	r1, #2
    38c6:	4249      	negs	r1, r1
    38c8:	468c      	mov	ip, r1
    38ca:	9d03      	ldr	r5, [sp, #12]
    38cc:	44e3      	add	fp, ip
    38ce:	46ac      	mov	ip, r5
    38d0:	44e2      	add	sl, ip
    38d2:	45aa      	cmp	sl, r5
    38d4:	41ad      	sbcs	r5, r5
    38d6:	426d      	negs	r5, r5
    38d8:	4445      	add	r5, r8
    38da:	18ed      	adds	r5, r5, r3
    38dc:	1a2d      	subs	r5, r5, r0
    38de:	e696      	b.n	360e <__aeabi_ddiv+0x2f6>
    38e0:	1e8a      	subs	r2, r1, #2
    38e2:	9903      	ldr	r1, [sp, #12]
    38e4:	004d      	lsls	r5, r1, #1
    38e6:	428d      	cmp	r5, r1
    38e8:	4189      	sbcs	r1, r1
    38ea:	4249      	negs	r1, r1
    38ec:	4441      	add	r1, r8
    38ee:	1876      	adds	r6, r6, r1
    38f0:	9503      	str	r5, [sp, #12]
    38f2:	e78f      	b.n	3814 <__aeabi_ddiv+0x4fc>
    38f4:	201f      	movs	r0, #31
    38f6:	4240      	negs	r0, r0
    38f8:	1ac3      	subs	r3, r0, r3
    38fa:	4658      	mov	r0, fp
    38fc:	40d8      	lsrs	r0, r3
    38fe:	0003      	movs	r3, r0
    3900:	2a20      	cmp	r2, #32
    3902:	d028      	beq.n	3956 <__aeabi_ddiv+0x63e>
    3904:	2040      	movs	r0, #64	; 0x40
    3906:	465d      	mov	r5, fp
    3908:	1a82      	subs	r2, r0, r2
    390a:	4095      	lsls	r5, r2
    390c:	4329      	orrs	r1, r5
    390e:	1e4a      	subs	r2, r1, #1
    3910:	4191      	sbcs	r1, r2
    3912:	4319      	orrs	r1, r3
    3914:	2307      	movs	r3, #7
    3916:	2200      	movs	r2, #0
    3918:	400b      	ands	r3, r1
    391a:	d009      	beq.n	3930 <__aeabi_ddiv+0x618>
    391c:	230f      	movs	r3, #15
    391e:	2200      	movs	r2, #0
    3920:	400b      	ands	r3, r1
    3922:	0008      	movs	r0, r1
    3924:	2b04      	cmp	r3, #4
    3926:	d1bd      	bne.n	38a4 <__aeabi_ddiv+0x58c>
    3928:	0001      	movs	r1, r0
    392a:	0753      	lsls	r3, r2, #29
    392c:	0252      	lsls	r2, r2, #9
    392e:	0b12      	lsrs	r2, r2, #12
    3930:	08c9      	lsrs	r1, r1, #3
    3932:	4319      	orrs	r1, r3
    3934:	2301      	movs	r3, #1
    3936:	4688      	mov	r8, r1
    3938:	9902      	ldr	r1, [sp, #8]
    393a:	2400      	movs	r4, #0
    393c:	4019      	ands	r1, r3
    393e:	468c      	mov	ip, r1
    3940:	e5b8      	b.n	34b4 <__aeabi_ddiv+0x19c>
    3942:	4552      	cmp	r2, sl
    3944:	d8be      	bhi.n	38c4 <__aeabi_ddiv+0x5ac>
    3946:	468b      	mov	fp, r1
    3948:	2500      	movs	r5, #0
    394a:	e660      	b.n	360e <__aeabi_ddiv+0x2f6>
    394c:	9d03      	ldr	r5, [sp, #12]
    394e:	429d      	cmp	r5, r3
    3950:	d3c6      	bcc.n	38e0 <__aeabi_ddiv+0x5c8>
    3952:	0011      	movs	r1, r2
    3954:	e762      	b.n	381c <__aeabi_ddiv+0x504>
    3956:	2500      	movs	r5, #0
    3958:	e7d8      	b.n	390c <__aeabi_ddiv+0x5f4>
    395a:	2280      	movs	r2, #128	; 0x80
    395c:	465b      	mov	r3, fp
    395e:	0312      	lsls	r2, r2, #12
    3960:	431a      	orrs	r2, r3
    3962:	9b01      	ldr	r3, [sp, #4]
    3964:	0312      	lsls	r2, r2, #12
    3966:	0b12      	lsrs	r2, r2, #12
    3968:	469c      	mov	ip, r3
    396a:	4688      	mov	r8, r1
    396c:	4c03      	ldr	r4, [pc, #12]	; (397c <__aeabi_ddiv+0x664>)
    396e:	e5a1      	b.n	34b4 <__aeabi_ddiv+0x19c>
    3970:	000003ff 	.word	0x000003ff
    3974:	feffffff 	.word	0xfeffffff
    3978:	000007fe 	.word	0x000007fe
    397c:	000007ff 	.word	0x000007ff

00003980 <__eqdf2>:
    3980:	b5f0      	push	{r4, r5, r6, r7, lr}
    3982:	464f      	mov	r7, r9
    3984:	4646      	mov	r6, r8
    3986:	46d6      	mov	lr, sl
    3988:	005c      	lsls	r4, r3, #1
    398a:	b5c0      	push	{r6, r7, lr}
    398c:	031f      	lsls	r7, r3, #12
    398e:	0fdb      	lsrs	r3, r3, #31
    3990:	469a      	mov	sl, r3
    3992:	4b17      	ldr	r3, [pc, #92]	; (39f0 <__eqdf2+0x70>)
    3994:	030e      	lsls	r6, r1, #12
    3996:	004d      	lsls	r5, r1, #1
    3998:	4684      	mov	ip, r0
    399a:	4680      	mov	r8, r0
    399c:	0b36      	lsrs	r6, r6, #12
    399e:	0d6d      	lsrs	r5, r5, #21
    39a0:	0fc9      	lsrs	r1, r1, #31
    39a2:	4691      	mov	r9, r2
    39a4:	0b3f      	lsrs	r7, r7, #12
    39a6:	0d64      	lsrs	r4, r4, #21
    39a8:	2001      	movs	r0, #1
    39aa:	429d      	cmp	r5, r3
    39ac:	d008      	beq.n	39c0 <__eqdf2+0x40>
    39ae:	429c      	cmp	r4, r3
    39b0:	d001      	beq.n	39b6 <__eqdf2+0x36>
    39b2:	42a5      	cmp	r5, r4
    39b4:	d00b      	beq.n	39ce <__eqdf2+0x4e>
    39b6:	bc1c      	pop	{r2, r3, r4}
    39b8:	4690      	mov	r8, r2
    39ba:	4699      	mov	r9, r3
    39bc:	46a2      	mov	sl, r4
    39be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39c0:	4663      	mov	r3, ip
    39c2:	4333      	orrs	r3, r6
    39c4:	d1f7      	bne.n	39b6 <__eqdf2+0x36>
    39c6:	42ac      	cmp	r4, r5
    39c8:	d1f5      	bne.n	39b6 <__eqdf2+0x36>
    39ca:	433a      	orrs	r2, r7
    39cc:	d1f3      	bne.n	39b6 <__eqdf2+0x36>
    39ce:	2001      	movs	r0, #1
    39d0:	42be      	cmp	r6, r7
    39d2:	d1f0      	bne.n	39b6 <__eqdf2+0x36>
    39d4:	45c8      	cmp	r8, r9
    39d6:	d1ee      	bne.n	39b6 <__eqdf2+0x36>
    39d8:	4551      	cmp	r1, sl
    39da:	d007      	beq.n	39ec <__eqdf2+0x6c>
    39dc:	2d00      	cmp	r5, #0
    39de:	d1ea      	bne.n	39b6 <__eqdf2+0x36>
    39e0:	4663      	mov	r3, ip
    39e2:	431e      	orrs	r6, r3
    39e4:	0030      	movs	r0, r6
    39e6:	1e46      	subs	r6, r0, #1
    39e8:	41b0      	sbcs	r0, r6
    39ea:	e7e4      	b.n	39b6 <__eqdf2+0x36>
    39ec:	2000      	movs	r0, #0
    39ee:	e7e2      	b.n	39b6 <__eqdf2+0x36>
    39f0:	000007ff 	.word	0x000007ff

000039f4 <__gedf2>:
    39f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    39f6:	4645      	mov	r5, r8
    39f8:	46de      	mov	lr, fp
    39fa:	4657      	mov	r7, sl
    39fc:	464e      	mov	r6, r9
    39fe:	b5e0      	push	{r5, r6, r7, lr}
    3a00:	031f      	lsls	r7, r3, #12
    3a02:	0b3d      	lsrs	r5, r7, #12
    3a04:	4f2c      	ldr	r7, [pc, #176]	; (3ab8 <__gedf2+0xc4>)
    3a06:	030e      	lsls	r6, r1, #12
    3a08:	004c      	lsls	r4, r1, #1
    3a0a:	46ab      	mov	fp, r5
    3a0c:	005d      	lsls	r5, r3, #1
    3a0e:	4684      	mov	ip, r0
    3a10:	0b36      	lsrs	r6, r6, #12
    3a12:	0d64      	lsrs	r4, r4, #21
    3a14:	0fc9      	lsrs	r1, r1, #31
    3a16:	4690      	mov	r8, r2
    3a18:	0d6d      	lsrs	r5, r5, #21
    3a1a:	0fdb      	lsrs	r3, r3, #31
    3a1c:	42bc      	cmp	r4, r7
    3a1e:	d02a      	beq.n	3a76 <__gedf2+0x82>
    3a20:	4f25      	ldr	r7, [pc, #148]	; (3ab8 <__gedf2+0xc4>)
    3a22:	42bd      	cmp	r5, r7
    3a24:	d02d      	beq.n	3a82 <__gedf2+0x8e>
    3a26:	2c00      	cmp	r4, #0
    3a28:	d10f      	bne.n	3a4a <__gedf2+0x56>
    3a2a:	4330      	orrs	r0, r6
    3a2c:	0007      	movs	r7, r0
    3a2e:	4681      	mov	r9, r0
    3a30:	4278      	negs	r0, r7
    3a32:	4178      	adcs	r0, r7
    3a34:	b2c0      	uxtb	r0, r0
    3a36:	2d00      	cmp	r5, #0
    3a38:	d117      	bne.n	3a6a <__gedf2+0x76>
    3a3a:	465f      	mov	r7, fp
    3a3c:	433a      	orrs	r2, r7
    3a3e:	d114      	bne.n	3a6a <__gedf2+0x76>
    3a40:	464b      	mov	r3, r9
    3a42:	2000      	movs	r0, #0
    3a44:	2b00      	cmp	r3, #0
    3a46:	d00a      	beq.n	3a5e <__gedf2+0x6a>
    3a48:	e006      	b.n	3a58 <__gedf2+0x64>
    3a4a:	2d00      	cmp	r5, #0
    3a4c:	d102      	bne.n	3a54 <__gedf2+0x60>
    3a4e:	4658      	mov	r0, fp
    3a50:	4302      	orrs	r2, r0
    3a52:	d001      	beq.n	3a58 <__gedf2+0x64>
    3a54:	4299      	cmp	r1, r3
    3a56:	d018      	beq.n	3a8a <__gedf2+0x96>
    3a58:	4248      	negs	r0, r1
    3a5a:	2101      	movs	r1, #1
    3a5c:	4308      	orrs	r0, r1
    3a5e:	bc3c      	pop	{r2, r3, r4, r5}
    3a60:	4690      	mov	r8, r2
    3a62:	4699      	mov	r9, r3
    3a64:	46a2      	mov	sl, r4
    3a66:	46ab      	mov	fp, r5
    3a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a6a:	2800      	cmp	r0, #0
    3a6c:	d0f2      	beq.n	3a54 <__gedf2+0x60>
    3a6e:	2001      	movs	r0, #1
    3a70:	3b01      	subs	r3, #1
    3a72:	4318      	orrs	r0, r3
    3a74:	e7f3      	b.n	3a5e <__gedf2+0x6a>
    3a76:	0037      	movs	r7, r6
    3a78:	4307      	orrs	r7, r0
    3a7a:	d0d1      	beq.n	3a20 <__gedf2+0x2c>
    3a7c:	2002      	movs	r0, #2
    3a7e:	4240      	negs	r0, r0
    3a80:	e7ed      	b.n	3a5e <__gedf2+0x6a>
    3a82:	465f      	mov	r7, fp
    3a84:	4317      	orrs	r7, r2
    3a86:	d0ce      	beq.n	3a26 <__gedf2+0x32>
    3a88:	e7f8      	b.n	3a7c <__gedf2+0x88>
    3a8a:	42ac      	cmp	r4, r5
    3a8c:	dce4      	bgt.n	3a58 <__gedf2+0x64>
    3a8e:	da03      	bge.n	3a98 <__gedf2+0xa4>
    3a90:	1e48      	subs	r0, r1, #1
    3a92:	2101      	movs	r1, #1
    3a94:	4308      	orrs	r0, r1
    3a96:	e7e2      	b.n	3a5e <__gedf2+0x6a>
    3a98:	455e      	cmp	r6, fp
    3a9a:	d8dd      	bhi.n	3a58 <__gedf2+0x64>
    3a9c:	d006      	beq.n	3aac <__gedf2+0xb8>
    3a9e:	2000      	movs	r0, #0
    3aa0:	455e      	cmp	r6, fp
    3aa2:	d2dc      	bcs.n	3a5e <__gedf2+0x6a>
    3aa4:	2301      	movs	r3, #1
    3aa6:	1e48      	subs	r0, r1, #1
    3aa8:	4318      	orrs	r0, r3
    3aaa:	e7d8      	b.n	3a5e <__gedf2+0x6a>
    3aac:	45c4      	cmp	ip, r8
    3aae:	d8d3      	bhi.n	3a58 <__gedf2+0x64>
    3ab0:	2000      	movs	r0, #0
    3ab2:	45c4      	cmp	ip, r8
    3ab4:	d3f6      	bcc.n	3aa4 <__gedf2+0xb0>
    3ab6:	e7d2      	b.n	3a5e <__gedf2+0x6a>
    3ab8:	000007ff 	.word	0x000007ff

00003abc <__ledf2>:
    3abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3abe:	464e      	mov	r6, r9
    3ac0:	4645      	mov	r5, r8
    3ac2:	46de      	mov	lr, fp
    3ac4:	4657      	mov	r7, sl
    3ac6:	005c      	lsls	r4, r3, #1
    3ac8:	b5e0      	push	{r5, r6, r7, lr}
    3aca:	031f      	lsls	r7, r3, #12
    3acc:	0fdb      	lsrs	r3, r3, #31
    3ace:	4699      	mov	r9, r3
    3ad0:	4b2a      	ldr	r3, [pc, #168]	; (3b7c <__ledf2+0xc0>)
    3ad2:	030e      	lsls	r6, r1, #12
    3ad4:	004d      	lsls	r5, r1, #1
    3ad6:	0fc9      	lsrs	r1, r1, #31
    3ad8:	4684      	mov	ip, r0
    3ada:	0b36      	lsrs	r6, r6, #12
    3adc:	0d6d      	lsrs	r5, r5, #21
    3ade:	468b      	mov	fp, r1
    3ae0:	4690      	mov	r8, r2
    3ae2:	0b3f      	lsrs	r7, r7, #12
    3ae4:	0d64      	lsrs	r4, r4, #21
    3ae6:	429d      	cmp	r5, r3
    3ae8:	d020      	beq.n	3b2c <__ledf2+0x70>
    3aea:	4b24      	ldr	r3, [pc, #144]	; (3b7c <__ledf2+0xc0>)
    3aec:	429c      	cmp	r4, r3
    3aee:	d022      	beq.n	3b36 <__ledf2+0x7a>
    3af0:	2d00      	cmp	r5, #0
    3af2:	d112      	bne.n	3b1a <__ledf2+0x5e>
    3af4:	4330      	orrs	r0, r6
    3af6:	4243      	negs	r3, r0
    3af8:	4143      	adcs	r3, r0
    3afa:	b2db      	uxtb	r3, r3
    3afc:	2c00      	cmp	r4, #0
    3afe:	d01f      	beq.n	3b40 <__ledf2+0x84>
    3b00:	2b00      	cmp	r3, #0
    3b02:	d00c      	beq.n	3b1e <__ledf2+0x62>
    3b04:	464b      	mov	r3, r9
    3b06:	2001      	movs	r0, #1
    3b08:	3b01      	subs	r3, #1
    3b0a:	4303      	orrs	r3, r0
    3b0c:	0018      	movs	r0, r3
    3b0e:	bc3c      	pop	{r2, r3, r4, r5}
    3b10:	4690      	mov	r8, r2
    3b12:	4699      	mov	r9, r3
    3b14:	46a2      	mov	sl, r4
    3b16:	46ab      	mov	fp, r5
    3b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b1a:	2c00      	cmp	r4, #0
    3b1c:	d016      	beq.n	3b4c <__ledf2+0x90>
    3b1e:	45cb      	cmp	fp, r9
    3b20:	d017      	beq.n	3b52 <__ledf2+0x96>
    3b22:	465b      	mov	r3, fp
    3b24:	4259      	negs	r1, r3
    3b26:	2301      	movs	r3, #1
    3b28:	430b      	orrs	r3, r1
    3b2a:	e7ef      	b.n	3b0c <__ledf2+0x50>
    3b2c:	0031      	movs	r1, r6
    3b2e:	2302      	movs	r3, #2
    3b30:	4301      	orrs	r1, r0
    3b32:	d1eb      	bne.n	3b0c <__ledf2+0x50>
    3b34:	e7d9      	b.n	3aea <__ledf2+0x2e>
    3b36:	0039      	movs	r1, r7
    3b38:	2302      	movs	r3, #2
    3b3a:	4311      	orrs	r1, r2
    3b3c:	d1e6      	bne.n	3b0c <__ledf2+0x50>
    3b3e:	e7d7      	b.n	3af0 <__ledf2+0x34>
    3b40:	433a      	orrs	r2, r7
    3b42:	d1dd      	bne.n	3b00 <__ledf2+0x44>
    3b44:	2300      	movs	r3, #0
    3b46:	2800      	cmp	r0, #0
    3b48:	d0e0      	beq.n	3b0c <__ledf2+0x50>
    3b4a:	e7ea      	b.n	3b22 <__ledf2+0x66>
    3b4c:	433a      	orrs	r2, r7
    3b4e:	d1e6      	bne.n	3b1e <__ledf2+0x62>
    3b50:	e7e7      	b.n	3b22 <__ledf2+0x66>
    3b52:	42a5      	cmp	r5, r4
    3b54:	dce5      	bgt.n	3b22 <__ledf2+0x66>
    3b56:	db05      	blt.n	3b64 <__ledf2+0xa8>
    3b58:	42be      	cmp	r6, r7
    3b5a:	d8e2      	bhi.n	3b22 <__ledf2+0x66>
    3b5c:	d007      	beq.n	3b6e <__ledf2+0xb2>
    3b5e:	2300      	movs	r3, #0
    3b60:	42be      	cmp	r6, r7
    3b62:	d2d3      	bcs.n	3b0c <__ledf2+0x50>
    3b64:	4659      	mov	r1, fp
    3b66:	2301      	movs	r3, #1
    3b68:	3901      	subs	r1, #1
    3b6a:	430b      	orrs	r3, r1
    3b6c:	e7ce      	b.n	3b0c <__ledf2+0x50>
    3b6e:	45c4      	cmp	ip, r8
    3b70:	d8d7      	bhi.n	3b22 <__ledf2+0x66>
    3b72:	2300      	movs	r3, #0
    3b74:	45c4      	cmp	ip, r8
    3b76:	d3f5      	bcc.n	3b64 <__ledf2+0xa8>
    3b78:	e7c8      	b.n	3b0c <__ledf2+0x50>
    3b7a:	46c0      	nop			; (mov r8, r8)
    3b7c:	000007ff 	.word	0x000007ff

00003b80 <__aeabi_dmul>:
    3b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b82:	4657      	mov	r7, sl
    3b84:	4645      	mov	r5, r8
    3b86:	46de      	mov	lr, fp
    3b88:	464e      	mov	r6, r9
    3b8a:	b5e0      	push	{r5, r6, r7, lr}
    3b8c:	030c      	lsls	r4, r1, #12
    3b8e:	4698      	mov	r8, r3
    3b90:	004e      	lsls	r6, r1, #1
    3b92:	0b23      	lsrs	r3, r4, #12
    3b94:	b087      	sub	sp, #28
    3b96:	0007      	movs	r7, r0
    3b98:	4692      	mov	sl, r2
    3b9a:	469b      	mov	fp, r3
    3b9c:	0d76      	lsrs	r6, r6, #21
    3b9e:	0fcd      	lsrs	r5, r1, #31
    3ba0:	2e00      	cmp	r6, #0
    3ba2:	d06b      	beq.n	3c7c <__aeabi_dmul+0xfc>
    3ba4:	4b6d      	ldr	r3, [pc, #436]	; (3d5c <__aeabi_dmul+0x1dc>)
    3ba6:	429e      	cmp	r6, r3
    3ba8:	d035      	beq.n	3c16 <__aeabi_dmul+0x96>
    3baa:	2480      	movs	r4, #128	; 0x80
    3bac:	465b      	mov	r3, fp
    3bae:	0f42      	lsrs	r2, r0, #29
    3bb0:	0424      	lsls	r4, r4, #16
    3bb2:	00db      	lsls	r3, r3, #3
    3bb4:	4314      	orrs	r4, r2
    3bb6:	431c      	orrs	r4, r3
    3bb8:	00c3      	lsls	r3, r0, #3
    3bba:	4699      	mov	r9, r3
    3bbc:	4b68      	ldr	r3, [pc, #416]	; (3d60 <__aeabi_dmul+0x1e0>)
    3bbe:	46a3      	mov	fp, r4
    3bc0:	469c      	mov	ip, r3
    3bc2:	2300      	movs	r3, #0
    3bc4:	2700      	movs	r7, #0
    3bc6:	4466      	add	r6, ip
    3bc8:	9302      	str	r3, [sp, #8]
    3bca:	4643      	mov	r3, r8
    3bcc:	031c      	lsls	r4, r3, #12
    3bce:	005a      	lsls	r2, r3, #1
    3bd0:	0fdb      	lsrs	r3, r3, #31
    3bd2:	4650      	mov	r0, sl
    3bd4:	0b24      	lsrs	r4, r4, #12
    3bd6:	0d52      	lsrs	r2, r2, #21
    3bd8:	4698      	mov	r8, r3
    3bda:	d100      	bne.n	3bde <__aeabi_dmul+0x5e>
    3bdc:	e076      	b.n	3ccc <__aeabi_dmul+0x14c>
    3bde:	4b5f      	ldr	r3, [pc, #380]	; (3d5c <__aeabi_dmul+0x1dc>)
    3be0:	429a      	cmp	r2, r3
    3be2:	d06d      	beq.n	3cc0 <__aeabi_dmul+0x140>
    3be4:	2380      	movs	r3, #128	; 0x80
    3be6:	0f41      	lsrs	r1, r0, #29
    3be8:	041b      	lsls	r3, r3, #16
    3bea:	430b      	orrs	r3, r1
    3bec:	495c      	ldr	r1, [pc, #368]	; (3d60 <__aeabi_dmul+0x1e0>)
    3bee:	00e4      	lsls	r4, r4, #3
    3bf0:	468c      	mov	ip, r1
    3bf2:	431c      	orrs	r4, r3
    3bf4:	00c3      	lsls	r3, r0, #3
    3bf6:	2000      	movs	r0, #0
    3bf8:	4462      	add	r2, ip
    3bfa:	4641      	mov	r1, r8
    3bfc:	18b6      	adds	r6, r6, r2
    3bfe:	4069      	eors	r1, r5
    3c00:	1c72      	adds	r2, r6, #1
    3c02:	9101      	str	r1, [sp, #4]
    3c04:	4694      	mov	ip, r2
    3c06:	4307      	orrs	r7, r0
    3c08:	2f0f      	cmp	r7, #15
    3c0a:	d900      	bls.n	3c0e <__aeabi_dmul+0x8e>
    3c0c:	e0b0      	b.n	3d70 <__aeabi_dmul+0x1f0>
    3c0e:	4a55      	ldr	r2, [pc, #340]	; (3d64 <__aeabi_dmul+0x1e4>)
    3c10:	00bf      	lsls	r7, r7, #2
    3c12:	59d2      	ldr	r2, [r2, r7]
    3c14:	4697      	mov	pc, r2
    3c16:	465b      	mov	r3, fp
    3c18:	4303      	orrs	r3, r0
    3c1a:	4699      	mov	r9, r3
    3c1c:	d000      	beq.n	3c20 <__aeabi_dmul+0xa0>
    3c1e:	e087      	b.n	3d30 <__aeabi_dmul+0x1b0>
    3c20:	2300      	movs	r3, #0
    3c22:	469b      	mov	fp, r3
    3c24:	3302      	adds	r3, #2
    3c26:	2708      	movs	r7, #8
    3c28:	9302      	str	r3, [sp, #8]
    3c2a:	e7ce      	b.n	3bca <__aeabi_dmul+0x4a>
    3c2c:	4642      	mov	r2, r8
    3c2e:	9201      	str	r2, [sp, #4]
    3c30:	2802      	cmp	r0, #2
    3c32:	d067      	beq.n	3d04 <__aeabi_dmul+0x184>
    3c34:	2803      	cmp	r0, #3
    3c36:	d100      	bne.n	3c3a <__aeabi_dmul+0xba>
    3c38:	e20e      	b.n	4058 <__aeabi_dmul+0x4d8>
    3c3a:	2801      	cmp	r0, #1
    3c3c:	d000      	beq.n	3c40 <__aeabi_dmul+0xc0>
    3c3e:	e162      	b.n	3f06 <__aeabi_dmul+0x386>
    3c40:	2300      	movs	r3, #0
    3c42:	2400      	movs	r4, #0
    3c44:	2200      	movs	r2, #0
    3c46:	4699      	mov	r9, r3
    3c48:	9901      	ldr	r1, [sp, #4]
    3c4a:	4001      	ands	r1, r0
    3c4c:	b2cd      	uxtb	r5, r1
    3c4e:	2100      	movs	r1, #0
    3c50:	0312      	lsls	r2, r2, #12
    3c52:	0d0b      	lsrs	r3, r1, #20
    3c54:	0b12      	lsrs	r2, r2, #12
    3c56:	051b      	lsls	r3, r3, #20
    3c58:	4313      	orrs	r3, r2
    3c5a:	4a43      	ldr	r2, [pc, #268]	; (3d68 <__aeabi_dmul+0x1e8>)
    3c5c:	0524      	lsls	r4, r4, #20
    3c5e:	4013      	ands	r3, r2
    3c60:	431c      	orrs	r4, r3
    3c62:	0064      	lsls	r4, r4, #1
    3c64:	07ed      	lsls	r5, r5, #31
    3c66:	0864      	lsrs	r4, r4, #1
    3c68:	432c      	orrs	r4, r5
    3c6a:	4648      	mov	r0, r9
    3c6c:	0021      	movs	r1, r4
    3c6e:	b007      	add	sp, #28
    3c70:	bc3c      	pop	{r2, r3, r4, r5}
    3c72:	4690      	mov	r8, r2
    3c74:	4699      	mov	r9, r3
    3c76:	46a2      	mov	sl, r4
    3c78:	46ab      	mov	fp, r5
    3c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c7c:	4303      	orrs	r3, r0
    3c7e:	4699      	mov	r9, r3
    3c80:	d04f      	beq.n	3d22 <__aeabi_dmul+0x1a2>
    3c82:	465b      	mov	r3, fp
    3c84:	2b00      	cmp	r3, #0
    3c86:	d100      	bne.n	3c8a <__aeabi_dmul+0x10a>
    3c88:	e189      	b.n	3f9e <__aeabi_dmul+0x41e>
    3c8a:	4658      	mov	r0, fp
    3c8c:	f000 fe84 	bl	4998 <__clzsi2>
    3c90:	0003      	movs	r3, r0
    3c92:	3b0b      	subs	r3, #11
    3c94:	2b1c      	cmp	r3, #28
    3c96:	dd00      	ble.n	3c9a <__aeabi_dmul+0x11a>
    3c98:	e17a      	b.n	3f90 <__aeabi_dmul+0x410>
    3c9a:	221d      	movs	r2, #29
    3c9c:	1ad3      	subs	r3, r2, r3
    3c9e:	003a      	movs	r2, r7
    3ca0:	0001      	movs	r1, r0
    3ca2:	465c      	mov	r4, fp
    3ca4:	40da      	lsrs	r2, r3
    3ca6:	3908      	subs	r1, #8
    3ca8:	408c      	lsls	r4, r1
    3caa:	0013      	movs	r3, r2
    3cac:	408f      	lsls	r7, r1
    3cae:	4323      	orrs	r3, r4
    3cb0:	469b      	mov	fp, r3
    3cb2:	46b9      	mov	r9, r7
    3cb4:	2300      	movs	r3, #0
    3cb6:	4e2d      	ldr	r6, [pc, #180]	; (3d6c <__aeabi_dmul+0x1ec>)
    3cb8:	2700      	movs	r7, #0
    3cba:	1a36      	subs	r6, r6, r0
    3cbc:	9302      	str	r3, [sp, #8]
    3cbe:	e784      	b.n	3bca <__aeabi_dmul+0x4a>
    3cc0:	4653      	mov	r3, sl
    3cc2:	4323      	orrs	r3, r4
    3cc4:	d12a      	bne.n	3d1c <__aeabi_dmul+0x19c>
    3cc6:	2400      	movs	r4, #0
    3cc8:	2002      	movs	r0, #2
    3cca:	e796      	b.n	3bfa <__aeabi_dmul+0x7a>
    3ccc:	4653      	mov	r3, sl
    3cce:	4323      	orrs	r3, r4
    3cd0:	d020      	beq.n	3d14 <__aeabi_dmul+0x194>
    3cd2:	2c00      	cmp	r4, #0
    3cd4:	d100      	bne.n	3cd8 <__aeabi_dmul+0x158>
    3cd6:	e157      	b.n	3f88 <__aeabi_dmul+0x408>
    3cd8:	0020      	movs	r0, r4
    3cda:	f000 fe5d 	bl	4998 <__clzsi2>
    3cde:	0003      	movs	r3, r0
    3ce0:	3b0b      	subs	r3, #11
    3ce2:	2b1c      	cmp	r3, #28
    3ce4:	dd00      	ble.n	3ce8 <__aeabi_dmul+0x168>
    3ce6:	e149      	b.n	3f7c <__aeabi_dmul+0x3fc>
    3ce8:	211d      	movs	r1, #29
    3cea:	1acb      	subs	r3, r1, r3
    3cec:	4651      	mov	r1, sl
    3cee:	0002      	movs	r2, r0
    3cf0:	40d9      	lsrs	r1, r3
    3cf2:	4653      	mov	r3, sl
    3cf4:	3a08      	subs	r2, #8
    3cf6:	4094      	lsls	r4, r2
    3cf8:	4093      	lsls	r3, r2
    3cfa:	430c      	orrs	r4, r1
    3cfc:	4a1b      	ldr	r2, [pc, #108]	; (3d6c <__aeabi_dmul+0x1ec>)
    3cfe:	1a12      	subs	r2, r2, r0
    3d00:	2000      	movs	r0, #0
    3d02:	e77a      	b.n	3bfa <__aeabi_dmul+0x7a>
    3d04:	2501      	movs	r5, #1
    3d06:	9b01      	ldr	r3, [sp, #4]
    3d08:	4c14      	ldr	r4, [pc, #80]	; (3d5c <__aeabi_dmul+0x1dc>)
    3d0a:	401d      	ands	r5, r3
    3d0c:	2300      	movs	r3, #0
    3d0e:	2200      	movs	r2, #0
    3d10:	4699      	mov	r9, r3
    3d12:	e79c      	b.n	3c4e <__aeabi_dmul+0xce>
    3d14:	2400      	movs	r4, #0
    3d16:	2200      	movs	r2, #0
    3d18:	2001      	movs	r0, #1
    3d1a:	e76e      	b.n	3bfa <__aeabi_dmul+0x7a>
    3d1c:	4653      	mov	r3, sl
    3d1e:	2003      	movs	r0, #3
    3d20:	e76b      	b.n	3bfa <__aeabi_dmul+0x7a>
    3d22:	2300      	movs	r3, #0
    3d24:	469b      	mov	fp, r3
    3d26:	3301      	adds	r3, #1
    3d28:	2704      	movs	r7, #4
    3d2a:	2600      	movs	r6, #0
    3d2c:	9302      	str	r3, [sp, #8]
    3d2e:	e74c      	b.n	3bca <__aeabi_dmul+0x4a>
    3d30:	2303      	movs	r3, #3
    3d32:	4681      	mov	r9, r0
    3d34:	270c      	movs	r7, #12
    3d36:	9302      	str	r3, [sp, #8]
    3d38:	e747      	b.n	3bca <__aeabi_dmul+0x4a>
    3d3a:	2280      	movs	r2, #128	; 0x80
    3d3c:	2300      	movs	r3, #0
    3d3e:	2500      	movs	r5, #0
    3d40:	0312      	lsls	r2, r2, #12
    3d42:	4699      	mov	r9, r3
    3d44:	4c05      	ldr	r4, [pc, #20]	; (3d5c <__aeabi_dmul+0x1dc>)
    3d46:	e782      	b.n	3c4e <__aeabi_dmul+0xce>
    3d48:	465c      	mov	r4, fp
    3d4a:	464b      	mov	r3, r9
    3d4c:	9802      	ldr	r0, [sp, #8]
    3d4e:	e76f      	b.n	3c30 <__aeabi_dmul+0xb0>
    3d50:	465c      	mov	r4, fp
    3d52:	464b      	mov	r3, r9
    3d54:	9501      	str	r5, [sp, #4]
    3d56:	9802      	ldr	r0, [sp, #8]
    3d58:	e76a      	b.n	3c30 <__aeabi_dmul+0xb0>
    3d5a:	46c0      	nop			; (mov r8, r8)
    3d5c:	000007ff 	.word	0x000007ff
    3d60:	fffffc01 	.word	0xfffffc01
    3d64:	00004b08 	.word	0x00004b08
    3d68:	800fffff 	.word	0x800fffff
    3d6c:	fffffc0d 	.word	0xfffffc0d
    3d70:	464a      	mov	r2, r9
    3d72:	4649      	mov	r1, r9
    3d74:	0c17      	lsrs	r7, r2, #16
    3d76:	0c1a      	lsrs	r2, r3, #16
    3d78:	041b      	lsls	r3, r3, #16
    3d7a:	0c1b      	lsrs	r3, r3, #16
    3d7c:	0408      	lsls	r0, r1, #16
    3d7e:	0019      	movs	r1, r3
    3d80:	0c00      	lsrs	r0, r0, #16
    3d82:	4341      	muls	r1, r0
    3d84:	0015      	movs	r5, r2
    3d86:	4688      	mov	r8, r1
    3d88:	0019      	movs	r1, r3
    3d8a:	437d      	muls	r5, r7
    3d8c:	4379      	muls	r1, r7
    3d8e:	9503      	str	r5, [sp, #12]
    3d90:	4689      	mov	r9, r1
    3d92:	0029      	movs	r1, r5
    3d94:	0015      	movs	r5, r2
    3d96:	4345      	muls	r5, r0
    3d98:	444d      	add	r5, r9
    3d9a:	9502      	str	r5, [sp, #8]
    3d9c:	4645      	mov	r5, r8
    3d9e:	0c2d      	lsrs	r5, r5, #16
    3da0:	46aa      	mov	sl, r5
    3da2:	9d02      	ldr	r5, [sp, #8]
    3da4:	4455      	add	r5, sl
    3da6:	45a9      	cmp	r9, r5
    3da8:	d906      	bls.n	3db8 <__aeabi_dmul+0x238>
    3daa:	468a      	mov	sl, r1
    3dac:	2180      	movs	r1, #128	; 0x80
    3dae:	0249      	lsls	r1, r1, #9
    3db0:	4689      	mov	r9, r1
    3db2:	44ca      	add	sl, r9
    3db4:	4651      	mov	r1, sl
    3db6:	9103      	str	r1, [sp, #12]
    3db8:	0c29      	lsrs	r1, r5, #16
    3dba:	9104      	str	r1, [sp, #16]
    3dbc:	4641      	mov	r1, r8
    3dbe:	0409      	lsls	r1, r1, #16
    3dc0:	042d      	lsls	r5, r5, #16
    3dc2:	0c09      	lsrs	r1, r1, #16
    3dc4:	4688      	mov	r8, r1
    3dc6:	0029      	movs	r1, r5
    3dc8:	0c25      	lsrs	r5, r4, #16
    3dca:	0424      	lsls	r4, r4, #16
    3dcc:	4441      	add	r1, r8
    3dce:	0c24      	lsrs	r4, r4, #16
    3dd0:	9105      	str	r1, [sp, #20]
    3dd2:	0021      	movs	r1, r4
    3dd4:	4341      	muls	r1, r0
    3dd6:	4688      	mov	r8, r1
    3dd8:	0021      	movs	r1, r4
    3dda:	4379      	muls	r1, r7
    3ddc:	468a      	mov	sl, r1
    3dde:	4368      	muls	r0, r5
    3de0:	4641      	mov	r1, r8
    3de2:	4450      	add	r0, sl
    3de4:	4681      	mov	r9, r0
    3de6:	0c08      	lsrs	r0, r1, #16
    3de8:	4448      	add	r0, r9
    3dea:	436f      	muls	r7, r5
    3dec:	4582      	cmp	sl, r0
    3dee:	d903      	bls.n	3df8 <__aeabi_dmul+0x278>
    3df0:	2180      	movs	r1, #128	; 0x80
    3df2:	0249      	lsls	r1, r1, #9
    3df4:	4689      	mov	r9, r1
    3df6:	444f      	add	r7, r9
    3df8:	0c01      	lsrs	r1, r0, #16
    3dfa:	4689      	mov	r9, r1
    3dfc:	0039      	movs	r1, r7
    3dfe:	4449      	add	r1, r9
    3e00:	9102      	str	r1, [sp, #8]
    3e02:	4641      	mov	r1, r8
    3e04:	040f      	lsls	r7, r1, #16
    3e06:	9904      	ldr	r1, [sp, #16]
    3e08:	0c3f      	lsrs	r7, r7, #16
    3e0a:	4688      	mov	r8, r1
    3e0c:	0400      	lsls	r0, r0, #16
    3e0e:	19c0      	adds	r0, r0, r7
    3e10:	4480      	add	r8, r0
    3e12:	4641      	mov	r1, r8
    3e14:	9104      	str	r1, [sp, #16]
    3e16:	4659      	mov	r1, fp
    3e18:	0c0f      	lsrs	r7, r1, #16
    3e1a:	0409      	lsls	r1, r1, #16
    3e1c:	0c09      	lsrs	r1, r1, #16
    3e1e:	4688      	mov	r8, r1
    3e20:	4359      	muls	r1, r3
    3e22:	468a      	mov	sl, r1
    3e24:	0039      	movs	r1, r7
    3e26:	4351      	muls	r1, r2
    3e28:	4689      	mov	r9, r1
    3e2a:	4641      	mov	r1, r8
    3e2c:	434a      	muls	r2, r1
    3e2e:	4651      	mov	r1, sl
    3e30:	0c09      	lsrs	r1, r1, #16
    3e32:	468b      	mov	fp, r1
    3e34:	437b      	muls	r3, r7
    3e36:	18d2      	adds	r2, r2, r3
    3e38:	445a      	add	r2, fp
    3e3a:	4293      	cmp	r3, r2
    3e3c:	d903      	bls.n	3e46 <__aeabi_dmul+0x2c6>
    3e3e:	2380      	movs	r3, #128	; 0x80
    3e40:	025b      	lsls	r3, r3, #9
    3e42:	469b      	mov	fp, r3
    3e44:	44d9      	add	r9, fp
    3e46:	4651      	mov	r1, sl
    3e48:	0409      	lsls	r1, r1, #16
    3e4a:	0c09      	lsrs	r1, r1, #16
    3e4c:	468a      	mov	sl, r1
    3e4e:	4641      	mov	r1, r8
    3e50:	4361      	muls	r1, r4
    3e52:	437c      	muls	r4, r7
    3e54:	0c13      	lsrs	r3, r2, #16
    3e56:	0412      	lsls	r2, r2, #16
    3e58:	444b      	add	r3, r9
    3e5a:	4452      	add	r2, sl
    3e5c:	46a1      	mov	r9, r4
    3e5e:	468a      	mov	sl, r1
    3e60:	003c      	movs	r4, r7
    3e62:	4641      	mov	r1, r8
    3e64:	436c      	muls	r4, r5
    3e66:	434d      	muls	r5, r1
    3e68:	4651      	mov	r1, sl
    3e6a:	444d      	add	r5, r9
    3e6c:	0c0f      	lsrs	r7, r1, #16
    3e6e:	197d      	adds	r5, r7, r5
    3e70:	45a9      	cmp	r9, r5
    3e72:	d903      	bls.n	3e7c <__aeabi_dmul+0x2fc>
    3e74:	2180      	movs	r1, #128	; 0x80
    3e76:	0249      	lsls	r1, r1, #9
    3e78:	4688      	mov	r8, r1
    3e7a:	4444      	add	r4, r8
    3e7c:	9f04      	ldr	r7, [sp, #16]
    3e7e:	9903      	ldr	r1, [sp, #12]
    3e80:	46b8      	mov	r8, r7
    3e82:	4441      	add	r1, r8
    3e84:	468b      	mov	fp, r1
    3e86:	4583      	cmp	fp, r0
    3e88:	4180      	sbcs	r0, r0
    3e8a:	4241      	negs	r1, r0
    3e8c:	4688      	mov	r8, r1
    3e8e:	4651      	mov	r1, sl
    3e90:	0408      	lsls	r0, r1, #16
    3e92:	042f      	lsls	r7, r5, #16
    3e94:	0c00      	lsrs	r0, r0, #16
    3e96:	183f      	adds	r7, r7, r0
    3e98:	4658      	mov	r0, fp
    3e9a:	9902      	ldr	r1, [sp, #8]
    3e9c:	1810      	adds	r0, r2, r0
    3e9e:	4689      	mov	r9, r1
    3ea0:	4290      	cmp	r0, r2
    3ea2:	4192      	sbcs	r2, r2
    3ea4:	444f      	add	r7, r9
    3ea6:	46ba      	mov	sl, r7
    3ea8:	4252      	negs	r2, r2
    3eaa:	4699      	mov	r9, r3
    3eac:	4693      	mov	fp, r2
    3eae:	44c2      	add	sl, r8
    3eb0:	44d1      	add	r9, sl
    3eb2:	44cb      	add	fp, r9
    3eb4:	428f      	cmp	r7, r1
    3eb6:	41bf      	sbcs	r7, r7
    3eb8:	45c2      	cmp	sl, r8
    3eba:	4189      	sbcs	r1, r1
    3ebc:	4599      	cmp	r9, r3
    3ebe:	419b      	sbcs	r3, r3
    3ec0:	4593      	cmp	fp, r2
    3ec2:	4192      	sbcs	r2, r2
    3ec4:	427f      	negs	r7, r7
    3ec6:	4249      	negs	r1, r1
    3ec8:	0c2d      	lsrs	r5, r5, #16
    3eca:	4252      	negs	r2, r2
    3ecc:	430f      	orrs	r7, r1
    3ece:	425b      	negs	r3, r3
    3ed0:	4313      	orrs	r3, r2
    3ed2:	197f      	adds	r7, r7, r5
    3ed4:	18ff      	adds	r7, r7, r3
    3ed6:	465b      	mov	r3, fp
    3ed8:	193c      	adds	r4, r7, r4
    3eda:	0ddb      	lsrs	r3, r3, #23
    3edc:	9a05      	ldr	r2, [sp, #20]
    3ede:	0264      	lsls	r4, r4, #9
    3ee0:	431c      	orrs	r4, r3
    3ee2:	0243      	lsls	r3, r0, #9
    3ee4:	4313      	orrs	r3, r2
    3ee6:	1e5d      	subs	r5, r3, #1
    3ee8:	41ab      	sbcs	r3, r5
    3eea:	465a      	mov	r2, fp
    3eec:	0dc0      	lsrs	r0, r0, #23
    3eee:	4303      	orrs	r3, r0
    3ef0:	0252      	lsls	r2, r2, #9
    3ef2:	4313      	orrs	r3, r2
    3ef4:	01e2      	lsls	r2, r4, #7
    3ef6:	d556      	bpl.n	3fa6 <__aeabi_dmul+0x426>
    3ef8:	2001      	movs	r0, #1
    3efa:	085a      	lsrs	r2, r3, #1
    3efc:	4003      	ands	r3, r0
    3efe:	4313      	orrs	r3, r2
    3f00:	07e2      	lsls	r2, r4, #31
    3f02:	4313      	orrs	r3, r2
    3f04:	0864      	lsrs	r4, r4, #1
    3f06:	485a      	ldr	r0, [pc, #360]	; (4070 <__aeabi_dmul+0x4f0>)
    3f08:	4460      	add	r0, ip
    3f0a:	2800      	cmp	r0, #0
    3f0c:	dd4d      	ble.n	3faa <__aeabi_dmul+0x42a>
    3f0e:	075a      	lsls	r2, r3, #29
    3f10:	d009      	beq.n	3f26 <__aeabi_dmul+0x3a6>
    3f12:	220f      	movs	r2, #15
    3f14:	401a      	ands	r2, r3
    3f16:	2a04      	cmp	r2, #4
    3f18:	d005      	beq.n	3f26 <__aeabi_dmul+0x3a6>
    3f1a:	1d1a      	adds	r2, r3, #4
    3f1c:	429a      	cmp	r2, r3
    3f1e:	419b      	sbcs	r3, r3
    3f20:	425b      	negs	r3, r3
    3f22:	18e4      	adds	r4, r4, r3
    3f24:	0013      	movs	r3, r2
    3f26:	01e2      	lsls	r2, r4, #7
    3f28:	d504      	bpl.n	3f34 <__aeabi_dmul+0x3b4>
    3f2a:	2080      	movs	r0, #128	; 0x80
    3f2c:	4a51      	ldr	r2, [pc, #324]	; (4074 <__aeabi_dmul+0x4f4>)
    3f2e:	00c0      	lsls	r0, r0, #3
    3f30:	4014      	ands	r4, r2
    3f32:	4460      	add	r0, ip
    3f34:	4a50      	ldr	r2, [pc, #320]	; (4078 <__aeabi_dmul+0x4f8>)
    3f36:	4290      	cmp	r0, r2
    3f38:	dd00      	ble.n	3f3c <__aeabi_dmul+0x3bc>
    3f3a:	e6e3      	b.n	3d04 <__aeabi_dmul+0x184>
    3f3c:	2501      	movs	r5, #1
    3f3e:	08db      	lsrs	r3, r3, #3
    3f40:	0762      	lsls	r2, r4, #29
    3f42:	431a      	orrs	r2, r3
    3f44:	0264      	lsls	r4, r4, #9
    3f46:	9b01      	ldr	r3, [sp, #4]
    3f48:	4691      	mov	r9, r2
    3f4a:	0b22      	lsrs	r2, r4, #12
    3f4c:	0544      	lsls	r4, r0, #21
    3f4e:	0d64      	lsrs	r4, r4, #21
    3f50:	401d      	ands	r5, r3
    3f52:	e67c      	b.n	3c4e <__aeabi_dmul+0xce>
    3f54:	2280      	movs	r2, #128	; 0x80
    3f56:	4659      	mov	r1, fp
    3f58:	0312      	lsls	r2, r2, #12
    3f5a:	4211      	tst	r1, r2
    3f5c:	d008      	beq.n	3f70 <__aeabi_dmul+0x3f0>
    3f5e:	4214      	tst	r4, r2
    3f60:	d106      	bne.n	3f70 <__aeabi_dmul+0x3f0>
    3f62:	4322      	orrs	r2, r4
    3f64:	0312      	lsls	r2, r2, #12
    3f66:	0b12      	lsrs	r2, r2, #12
    3f68:	4645      	mov	r5, r8
    3f6a:	4699      	mov	r9, r3
    3f6c:	4c43      	ldr	r4, [pc, #268]	; (407c <__aeabi_dmul+0x4fc>)
    3f6e:	e66e      	b.n	3c4e <__aeabi_dmul+0xce>
    3f70:	465b      	mov	r3, fp
    3f72:	431a      	orrs	r2, r3
    3f74:	0312      	lsls	r2, r2, #12
    3f76:	0b12      	lsrs	r2, r2, #12
    3f78:	4c40      	ldr	r4, [pc, #256]	; (407c <__aeabi_dmul+0x4fc>)
    3f7a:	e668      	b.n	3c4e <__aeabi_dmul+0xce>
    3f7c:	0003      	movs	r3, r0
    3f7e:	4654      	mov	r4, sl
    3f80:	3b28      	subs	r3, #40	; 0x28
    3f82:	409c      	lsls	r4, r3
    3f84:	2300      	movs	r3, #0
    3f86:	e6b9      	b.n	3cfc <__aeabi_dmul+0x17c>
    3f88:	f000 fd06 	bl	4998 <__clzsi2>
    3f8c:	3020      	adds	r0, #32
    3f8e:	e6a6      	b.n	3cde <__aeabi_dmul+0x15e>
    3f90:	0003      	movs	r3, r0
    3f92:	3b28      	subs	r3, #40	; 0x28
    3f94:	409f      	lsls	r7, r3
    3f96:	2300      	movs	r3, #0
    3f98:	46bb      	mov	fp, r7
    3f9a:	4699      	mov	r9, r3
    3f9c:	e68a      	b.n	3cb4 <__aeabi_dmul+0x134>
    3f9e:	f000 fcfb 	bl	4998 <__clzsi2>
    3fa2:	3020      	adds	r0, #32
    3fa4:	e674      	b.n	3c90 <__aeabi_dmul+0x110>
    3fa6:	46b4      	mov	ip, r6
    3fa8:	e7ad      	b.n	3f06 <__aeabi_dmul+0x386>
    3faa:	2501      	movs	r5, #1
    3fac:	1a2a      	subs	r2, r5, r0
    3fae:	2a38      	cmp	r2, #56	; 0x38
    3fb0:	dd06      	ble.n	3fc0 <__aeabi_dmul+0x440>
    3fb2:	9b01      	ldr	r3, [sp, #4]
    3fb4:	2400      	movs	r4, #0
    3fb6:	401d      	ands	r5, r3
    3fb8:	2300      	movs	r3, #0
    3fba:	2200      	movs	r2, #0
    3fbc:	4699      	mov	r9, r3
    3fbe:	e646      	b.n	3c4e <__aeabi_dmul+0xce>
    3fc0:	2a1f      	cmp	r2, #31
    3fc2:	dc21      	bgt.n	4008 <__aeabi_dmul+0x488>
    3fc4:	2520      	movs	r5, #32
    3fc6:	0020      	movs	r0, r4
    3fc8:	1aad      	subs	r5, r5, r2
    3fca:	001e      	movs	r6, r3
    3fcc:	40ab      	lsls	r3, r5
    3fce:	40a8      	lsls	r0, r5
    3fd0:	40d6      	lsrs	r6, r2
    3fd2:	1e5d      	subs	r5, r3, #1
    3fd4:	41ab      	sbcs	r3, r5
    3fd6:	4330      	orrs	r0, r6
    3fd8:	4318      	orrs	r0, r3
    3fda:	40d4      	lsrs	r4, r2
    3fdc:	0743      	lsls	r3, r0, #29
    3fde:	d009      	beq.n	3ff4 <__aeabi_dmul+0x474>
    3fe0:	230f      	movs	r3, #15
    3fe2:	4003      	ands	r3, r0
    3fe4:	2b04      	cmp	r3, #4
    3fe6:	d005      	beq.n	3ff4 <__aeabi_dmul+0x474>
    3fe8:	0003      	movs	r3, r0
    3fea:	1d18      	adds	r0, r3, #4
    3fec:	4298      	cmp	r0, r3
    3fee:	419b      	sbcs	r3, r3
    3ff0:	425b      	negs	r3, r3
    3ff2:	18e4      	adds	r4, r4, r3
    3ff4:	0223      	lsls	r3, r4, #8
    3ff6:	d521      	bpl.n	403c <__aeabi_dmul+0x4bc>
    3ff8:	2501      	movs	r5, #1
    3ffa:	9b01      	ldr	r3, [sp, #4]
    3ffc:	2401      	movs	r4, #1
    3ffe:	401d      	ands	r5, r3
    4000:	2300      	movs	r3, #0
    4002:	2200      	movs	r2, #0
    4004:	4699      	mov	r9, r3
    4006:	e622      	b.n	3c4e <__aeabi_dmul+0xce>
    4008:	251f      	movs	r5, #31
    400a:	0021      	movs	r1, r4
    400c:	426d      	negs	r5, r5
    400e:	1a28      	subs	r0, r5, r0
    4010:	40c1      	lsrs	r1, r0
    4012:	0008      	movs	r0, r1
    4014:	2a20      	cmp	r2, #32
    4016:	d01d      	beq.n	4054 <__aeabi_dmul+0x4d4>
    4018:	355f      	adds	r5, #95	; 0x5f
    401a:	1aaa      	subs	r2, r5, r2
    401c:	4094      	lsls	r4, r2
    401e:	4323      	orrs	r3, r4
    4020:	1e5c      	subs	r4, r3, #1
    4022:	41a3      	sbcs	r3, r4
    4024:	2507      	movs	r5, #7
    4026:	4303      	orrs	r3, r0
    4028:	401d      	ands	r5, r3
    402a:	2200      	movs	r2, #0
    402c:	2d00      	cmp	r5, #0
    402e:	d009      	beq.n	4044 <__aeabi_dmul+0x4c4>
    4030:	220f      	movs	r2, #15
    4032:	2400      	movs	r4, #0
    4034:	401a      	ands	r2, r3
    4036:	0018      	movs	r0, r3
    4038:	2a04      	cmp	r2, #4
    403a:	d1d6      	bne.n	3fea <__aeabi_dmul+0x46a>
    403c:	0003      	movs	r3, r0
    403e:	0765      	lsls	r5, r4, #29
    4040:	0264      	lsls	r4, r4, #9
    4042:	0b22      	lsrs	r2, r4, #12
    4044:	08db      	lsrs	r3, r3, #3
    4046:	432b      	orrs	r3, r5
    4048:	2501      	movs	r5, #1
    404a:	4699      	mov	r9, r3
    404c:	9b01      	ldr	r3, [sp, #4]
    404e:	2400      	movs	r4, #0
    4050:	401d      	ands	r5, r3
    4052:	e5fc      	b.n	3c4e <__aeabi_dmul+0xce>
    4054:	2400      	movs	r4, #0
    4056:	e7e2      	b.n	401e <__aeabi_dmul+0x49e>
    4058:	2280      	movs	r2, #128	; 0x80
    405a:	2501      	movs	r5, #1
    405c:	0312      	lsls	r2, r2, #12
    405e:	4322      	orrs	r2, r4
    4060:	9901      	ldr	r1, [sp, #4]
    4062:	0312      	lsls	r2, r2, #12
    4064:	0b12      	lsrs	r2, r2, #12
    4066:	400d      	ands	r5, r1
    4068:	4699      	mov	r9, r3
    406a:	4c04      	ldr	r4, [pc, #16]	; (407c <__aeabi_dmul+0x4fc>)
    406c:	e5ef      	b.n	3c4e <__aeabi_dmul+0xce>
    406e:	46c0      	nop			; (mov r8, r8)
    4070:	000003ff 	.word	0x000003ff
    4074:	feffffff 	.word	0xfeffffff
    4078:	000007fe 	.word	0x000007fe
    407c:	000007ff 	.word	0x000007ff

00004080 <__aeabi_dsub>:
    4080:	b5f0      	push	{r4, r5, r6, r7, lr}
    4082:	4646      	mov	r6, r8
    4084:	46d6      	mov	lr, sl
    4086:	464f      	mov	r7, r9
    4088:	030c      	lsls	r4, r1, #12
    408a:	b5c0      	push	{r6, r7, lr}
    408c:	0fcd      	lsrs	r5, r1, #31
    408e:	004e      	lsls	r6, r1, #1
    4090:	0a61      	lsrs	r1, r4, #9
    4092:	0f44      	lsrs	r4, r0, #29
    4094:	430c      	orrs	r4, r1
    4096:	00c1      	lsls	r1, r0, #3
    4098:	0058      	lsls	r0, r3, #1
    409a:	0d40      	lsrs	r0, r0, #21
    409c:	4684      	mov	ip, r0
    409e:	468a      	mov	sl, r1
    40a0:	000f      	movs	r7, r1
    40a2:	0319      	lsls	r1, r3, #12
    40a4:	0f50      	lsrs	r0, r2, #29
    40a6:	0a49      	lsrs	r1, r1, #9
    40a8:	4301      	orrs	r1, r0
    40aa:	48c6      	ldr	r0, [pc, #792]	; (43c4 <__aeabi_dsub+0x344>)
    40ac:	0d76      	lsrs	r6, r6, #21
    40ae:	46a8      	mov	r8, r5
    40b0:	0fdb      	lsrs	r3, r3, #31
    40b2:	00d2      	lsls	r2, r2, #3
    40b4:	4584      	cmp	ip, r0
    40b6:	d100      	bne.n	40ba <__aeabi_dsub+0x3a>
    40b8:	e0d8      	b.n	426c <__aeabi_dsub+0x1ec>
    40ba:	2001      	movs	r0, #1
    40bc:	4043      	eors	r3, r0
    40be:	42ab      	cmp	r3, r5
    40c0:	d100      	bne.n	40c4 <__aeabi_dsub+0x44>
    40c2:	e0a6      	b.n	4212 <__aeabi_dsub+0x192>
    40c4:	4660      	mov	r0, ip
    40c6:	1a35      	subs	r5, r6, r0
    40c8:	2d00      	cmp	r5, #0
    40ca:	dc00      	bgt.n	40ce <__aeabi_dsub+0x4e>
    40cc:	e105      	b.n	42da <__aeabi_dsub+0x25a>
    40ce:	2800      	cmp	r0, #0
    40d0:	d110      	bne.n	40f4 <__aeabi_dsub+0x74>
    40d2:	000b      	movs	r3, r1
    40d4:	4313      	orrs	r3, r2
    40d6:	d100      	bne.n	40da <__aeabi_dsub+0x5a>
    40d8:	e0d7      	b.n	428a <__aeabi_dsub+0x20a>
    40da:	1e6b      	subs	r3, r5, #1
    40dc:	2b00      	cmp	r3, #0
    40de:	d000      	beq.n	40e2 <__aeabi_dsub+0x62>
    40e0:	e14b      	b.n	437a <__aeabi_dsub+0x2fa>
    40e2:	4653      	mov	r3, sl
    40e4:	1a9f      	subs	r7, r3, r2
    40e6:	45ba      	cmp	sl, r7
    40e8:	4180      	sbcs	r0, r0
    40ea:	1a64      	subs	r4, r4, r1
    40ec:	4240      	negs	r0, r0
    40ee:	1a24      	subs	r4, r4, r0
    40f0:	2601      	movs	r6, #1
    40f2:	e01e      	b.n	4132 <__aeabi_dsub+0xb2>
    40f4:	4bb3      	ldr	r3, [pc, #716]	; (43c4 <__aeabi_dsub+0x344>)
    40f6:	429e      	cmp	r6, r3
    40f8:	d048      	beq.n	418c <__aeabi_dsub+0x10c>
    40fa:	2380      	movs	r3, #128	; 0x80
    40fc:	041b      	lsls	r3, r3, #16
    40fe:	4319      	orrs	r1, r3
    4100:	2d38      	cmp	r5, #56	; 0x38
    4102:	dd00      	ble.n	4106 <__aeabi_dsub+0x86>
    4104:	e119      	b.n	433a <__aeabi_dsub+0x2ba>
    4106:	2d1f      	cmp	r5, #31
    4108:	dd00      	ble.n	410c <__aeabi_dsub+0x8c>
    410a:	e14c      	b.n	43a6 <__aeabi_dsub+0x326>
    410c:	2320      	movs	r3, #32
    410e:	000f      	movs	r7, r1
    4110:	1b5b      	subs	r3, r3, r5
    4112:	0010      	movs	r0, r2
    4114:	409a      	lsls	r2, r3
    4116:	409f      	lsls	r7, r3
    4118:	40e8      	lsrs	r0, r5
    411a:	1e53      	subs	r3, r2, #1
    411c:	419a      	sbcs	r2, r3
    411e:	40e9      	lsrs	r1, r5
    4120:	4307      	orrs	r7, r0
    4122:	4317      	orrs	r7, r2
    4124:	4653      	mov	r3, sl
    4126:	1bdf      	subs	r7, r3, r7
    4128:	1a61      	subs	r1, r4, r1
    412a:	45ba      	cmp	sl, r7
    412c:	41a4      	sbcs	r4, r4
    412e:	4264      	negs	r4, r4
    4130:	1b0c      	subs	r4, r1, r4
    4132:	0223      	lsls	r3, r4, #8
    4134:	d400      	bmi.n	4138 <__aeabi_dsub+0xb8>
    4136:	e0c5      	b.n	42c4 <__aeabi_dsub+0x244>
    4138:	0264      	lsls	r4, r4, #9
    413a:	0a65      	lsrs	r5, r4, #9
    413c:	2d00      	cmp	r5, #0
    413e:	d100      	bne.n	4142 <__aeabi_dsub+0xc2>
    4140:	e0f6      	b.n	4330 <__aeabi_dsub+0x2b0>
    4142:	0028      	movs	r0, r5
    4144:	f000 fc28 	bl	4998 <__clzsi2>
    4148:	0003      	movs	r3, r0
    414a:	3b08      	subs	r3, #8
    414c:	2b1f      	cmp	r3, #31
    414e:	dd00      	ble.n	4152 <__aeabi_dsub+0xd2>
    4150:	e0e9      	b.n	4326 <__aeabi_dsub+0x2a6>
    4152:	2220      	movs	r2, #32
    4154:	003c      	movs	r4, r7
    4156:	1ad2      	subs	r2, r2, r3
    4158:	409d      	lsls	r5, r3
    415a:	40d4      	lsrs	r4, r2
    415c:	409f      	lsls	r7, r3
    415e:	4325      	orrs	r5, r4
    4160:	429e      	cmp	r6, r3
    4162:	dd00      	ble.n	4166 <__aeabi_dsub+0xe6>
    4164:	e0db      	b.n	431e <__aeabi_dsub+0x29e>
    4166:	1b9e      	subs	r6, r3, r6
    4168:	1c73      	adds	r3, r6, #1
    416a:	2b1f      	cmp	r3, #31
    416c:	dd00      	ble.n	4170 <__aeabi_dsub+0xf0>
    416e:	e10a      	b.n	4386 <__aeabi_dsub+0x306>
    4170:	2220      	movs	r2, #32
    4172:	0038      	movs	r0, r7
    4174:	1ad2      	subs	r2, r2, r3
    4176:	0029      	movs	r1, r5
    4178:	4097      	lsls	r7, r2
    417a:	002c      	movs	r4, r5
    417c:	4091      	lsls	r1, r2
    417e:	40d8      	lsrs	r0, r3
    4180:	1e7a      	subs	r2, r7, #1
    4182:	4197      	sbcs	r7, r2
    4184:	40dc      	lsrs	r4, r3
    4186:	2600      	movs	r6, #0
    4188:	4301      	orrs	r1, r0
    418a:	430f      	orrs	r7, r1
    418c:	077b      	lsls	r3, r7, #29
    418e:	d009      	beq.n	41a4 <__aeabi_dsub+0x124>
    4190:	230f      	movs	r3, #15
    4192:	403b      	ands	r3, r7
    4194:	2b04      	cmp	r3, #4
    4196:	d005      	beq.n	41a4 <__aeabi_dsub+0x124>
    4198:	1d3b      	adds	r3, r7, #4
    419a:	42bb      	cmp	r3, r7
    419c:	41bf      	sbcs	r7, r7
    419e:	427f      	negs	r7, r7
    41a0:	19e4      	adds	r4, r4, r7
    41a2:	001f      	movs	r7, r3
    41a4:	0223      	lsls	r3, r4, #8
    41a6:	d525      	bpl.n	41f4 <__aeabi_dsub+0x174>
    41a8:	4b86      	ldr	r3, [pc, #536]	; (43c4 <__aeabi_dsub+0x344>)
    41aa:	3601      	adds	r6, #1
    41ac:	429e      	cmp	r6, r3
    41ae:	d100      	bne.n	41b2 <__aeabi_dsub+0x132>
    41b0:	e0af      	b.n	4312 <__aeabi_dsub+0x292>
    41b2:	4b85      	ldr	r3, [pc, #532]	; (43c8 <__aeabi_dsub+0x348>)
    41b4:	2501      	movs	r5, #1
    41b6:	401c      	ands	r4, r3
    41b8:	4643      	mov	r3, r8
    41ba:	0762      	lsls	r2, r4, #29
    41bc:	08ff      	lsrs	r7, r7, #3
    41be:	0264      	lsls	r4, r4, #9
    41c0:	0576      	lsls	r6, r6, #21
    41c2:	4317      	orrs	r7, r2
    41c4:	0b24      	lsrs	r4, r4, #12
    41c6:	0d76      	lsrs	r6, r6, #21
    41c8:	401d      	ands	r5, r3
    41ca:	2100      	movs	r1, #0
    41cc:	0324      	lsls	r4, r4, #12
    41ce:	0b23      	lsrs	r3, r4, #12
    41d0:	0d0c      	lsrs	r4, r1, #20
    41d2:	4a7e      	ldr	r2, [pc, #504]	; (43cc <__aeabi_dsub+0x34c>)
    41d4:	0524      	lsls	r4, r4, #20
    41d6:	431c      	orrs	r4, r3
    41d8:	4014      	ands	r4, r2
    41da:	0533      	lsls	r3, r6, #20
    41dc:	4323      	orrs	r3, r4
    41de:	005b      	lsls	r3, r3, #1
    41e0:	07ed      	lsls	r5, r5, #31
    41e2:	085b      	lsrs	r3, r3, #1
    41e4:	432b      	orrs	r3, r5
    41e6:	0038      	movs	r0, r7
    41e8:	0019      	movs	r1, r3
    41ea:	bc1c      	pop	{r2, r3, r4}
    41ec:	4690      	mov	r8, r2
    41ee:	4699      	mov	r9, r3
    41f0:	46a2      	mov	sl, r4
    41f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41f4:	2501      	movs	r5, #1
    41f6:	4643      	mov	r3, r8
    41f8:	0762      	lsls	r2, r4, #29
    41fa:	08ff      	lsrs	r7, r7, #3
    41fc:	4317      	orrs	r7, r2
    41fe:	08e4      	lsrs	r4, r4, #3
    4200:	401d      	ands	r5, r3
    4202:	4b70      	ldr	r3, [pc, #448]	; (43c4 <__aeabi_dsub+0x344>)
    4204:	429e      	cmp	r6, r3
    4206:	d036      	beq.n	4276 <__aeabi_dsub+0x1f6>
    4208:	0324      	lsls	r4, r4, #12
    420a:	0576      	lsls	r6, r6, #21
    420c:	0b24      	lsrs	r4, r4, #12
    420e:	0d76      	lsrs	r6, r6, #21
    4210:	e7db      	b.n	41ca <__aeabi_dsub+0x14a>
    4212:	4663      	mov	r3, ip
    4214:	1af3      	subs	r3, r6, r3
    4216:	2b00      	cmp	r3, #0
    4218:	dc00      	bgt.n	421c <__aeabi_dsub+0x19c>
    421a:	e094      	b.n	4346 <__aeabi_dsub+0x2c6>
    421c:	4660      	mov	r0, ip
    421e:	2800      	cmp	r0, #0
    4220:	d035      	beq.n	428e <__aeabi_dsub+0x20e>
    4222:	4868      	ldr	r0, [pc, #416]	; (43c4 <__aeabi_dsub+0x344>)
    4224:	4286      	cmp	r6, r0
    4226:	d0b1      	beq.n	418c <__aeabi_dsub+0x10c>
    4228:	2780      	movs	r7, #128	; 0x80
    422a:	043f      	lsls	r7, r7, #16
    422c:	4339      	orrs	r1, r7
    422e:	2b38      	cmp	r3, #56	; 0x38
    4230:	dc00      	bgt.n	4234 <__aeabi_dsub+0x1b4>
    4232:	e0fd      	b.n	4430 <__aeabi_dsub+0x3b0>
    4234:	430a      	orrs	r2, r1
    4236:	0017      	movs	r7, r2
    4238:	2100      	movs	r1, #0
    423a:	1e7a      	subs	r2, r7, #1
    423c:	4197      	sbcs	r7, r2
    423e:	4457      	add	r7, sl
    4240:	4557      	cmp	r7, sl
    4242:	4180      	sbcs	r0, r0
    4244:	1909      	adds	r1, r1, r4
    4246:	4244      	negs	r4, r0
    4248:	190c      	adds	r4, r1, r4
    424a:	0223      	lsls	r3, r4, #8
    424c:	d53a      	bpl.n	42c4 <__aeabi_dsub+0x244>
    424e:	4b5d      	ldr	r3, [pc, #372]	; (43c4 <__aeabi_dsub+0x344>)
    4250:	3601      	adds	r6, #1
    4252:	429e      	cmp	r6, r3
    4254:	d100      	bne.n	4258 <__aeabi_dsub+0x1d8>
    4256:	e14b      	b.n	44f0 <__aeabi_dsub+0x470>
    4258:	2201      	movs	r2, #1
    425a:	4b5b      	ldr	r3, [pc, #364]	; (43c8 <__aeabi_dsub+0x348>)
    425c:	401c      	ands	r4, r3
    425e:	087b      	lsrs	r3, r7, #1
    4260:	4017      	ands	r7, r2
    4262:	431f      	orrs	r7, r3
    4264:	07e2      	lsls	r2, r4, #31
    4266:	4317      	orrs	r7, r2
    4268:	0864      	lsrs	r4, r4, #1
    426a:	e78f      	b.n	418c <__aeabi_dsub+0x10c>
    426c:	0008      	movs	r0, r1
    426e:	4310      	orrs	r0, r2
    4270:	d000      	beq.n	4274 <__aeabi_dsub+0x1f4>
    4272:	e724      	b.n	40be <__aeabi_dsub+0x3e>
    4274:	e721      	b.n	40ba <__aeabi_dsub+0x3a>
    4276:	0023      	movs	r3, r4
    4278:	433b      	orrs	r3, r7
    427a:	d100      	bne.n	427e <__aeabi_dsub+0x1fe>
    427c:	e1b9      	b.n	45f2 <__aeabi_dsub+0x572>
    427e:	2280      	movs	r2, #128	; 0x80
    4280:	0312      	lsls	r2, r2, #12
    4282:	4314      	orrs	r4, r2
    4284:	0324      	lsls	r4, r4, #12
    4286:	0b24      	lsrs	r4, r4, #12
    4288:	e79f      	b.n	41ca <__aeabi_dsub+0x14a>
    428a:	002e      	movs	r6, r5
    428c:	e77e      	b.n	418c <__aeabi_dsub+0x10c>
    428e:	0008      	movs	r0, r1
    4290:	4310      	orrs	r0, r2
    4292:	d100      	bne.n	4296 <__aeabi_dsub+0x216>
    4294:	e0ca      	b.n	442c <__aeabi_dsub+0x3ac>
    4296:	1e58      	subs	r0, r3, #1
    4298:	4684      	mov	ip, r0
    429a:	2800      	cmp	r0, #0
    429c:	d000      	beq.n	42a0 <__aeabi_dsub+0x220>
    429e:	e0e7      	b.n	4470 <__aeabi_dsub+0x3f0>
    42a0:	4452      	add	r2, sl
    42a2:	4552      	cmp	r2, sl
    42a4:	4180      	sbcs	r0, r0
    42a6:	1864      	adds	r4, r4, r1
    42a8:	4240      	negs	r0, r0
    42aa:	1824      	adds	r4, r4, r0
    42ac:	0017      	movs	r7, r2
    42ae:	2601      	movs	r6, #1
    42b0:	0223      	lsls	r3, r4, #8
    42b2:	d507      	bpl.n	42c4 <__aeabi_dsub+0x244>
    42b4:	2602      	movs	r6, #2
    42b6:	e7cf      	b.n	4258 <__aeabi_dsub+0x1d8>
    42b8:	4664      	mov	r4, ip
    42ba:	432c      	orrs	r4, r5
    42bc:	d100      	bne.n	42c0 <__aeabi_dsub+0x240>
    42be:	e1b3      	b.n	4628 <__aeabi_dsub+0x5a8>
    42c0:	002c      	movs	r4, r5
    42c2:	4667      	mov	r7, ip
    42c4:	077b      	lsls	r3, r7, #29
    42c6:	d000      	beq.n	42ca <__aeabi_dsub+0x24a>
    42c8:	e762      	b.n	4190 <__aeabi_dsub+0x110>
    42ca:	0763      	lsls	r3, r4, #29
    42cc:	08ff      	lsrs	r7, r7, #3
    42ce:	431f      	orrs	r7, r3
    42d0:	2501      	movs	r5, #1
    42d2:	4643      	mov	r3, r8
    42d4:	08e4      	lsrs	r4, r4, #3
    42d6:	401d      	ands	r5, r3
    42d8:	e793      	b.n	4202 <__aeabi_dsub+0x182>
    42da:	2d00      	cmp	r5, #0
    42dc:	d178      	bne.n	43d0 <__aeabi_dsub+0x350>
    42de:	1c75      	adds	r5, r6, #1
    42e0:	056d      	lsls	r5, r5, #21
    42e2:	0d6d      	lsrs	r5, r5, #21
    42e4:	2d01      	cmp	r5, #1
    42e6:	dc00      	bgt.n	42ea <__aeabi_dsub+0x26a>
    42e8:	e0f2      	b.n	44d0 <__aeabi_dsub+0x450>
    42ea:	4650      	mov	r0, sl
    42ec:	1a80      	subs	r0, r0, r2
    42ee:	4582      	cmp	sl, r0
    42f0:	41bf      	sbcs	r7, r7
    42f2:	1a65      	subs	r5, r4, r1
    42f4:	427f      	negs	r7, r7
    42f6:	1bed      	subs	r5, r5, r7
    42f8:	4684      	mov	ip, r0
    42fa:	0228      	lsls	r0, r5, #8
    42fc:	d400      	bmi.n	4300 <__aeabi_dsub+0x280>
    42fe:	e08c      	b.n	441a <__aeabi_dsub+0x39a>
    4300:	4650      	mov	r0, sl
    4302:	1a17      	subs	r7, r2, r0
    4304:	42ba      	cmp	r2, r7
    4306:	4192      	sbcs	r2, r2
    4308:	1b0c      	subs	r4, r1, r4
    430a:	4255      	negs	r5, r2
    430c:	1b65      	subs	r5, r4, r5
    430e:	4698      	mov	r8, r3
    4310:	e714      	b.n	413c <__aeabi_dsub+0xbc>
    4312:	2501      	movs	r5, #1
    4314:	4643      	mov	r3, r8
    4316:	2400      	movs	r4, #0
    4318:	401d      	ands	r5, r3
    431a:	2700      	movs	r7, #0
    431c:	e755      	b.n	41ca <__aeabi_dsub+0x14a>
    431e:	4c2a      	ldr	r4, [pc, #168]	; (43c8 <__aeabi_dsub+0x348>)
    4320:	1af6      	subs	r6, r6, r3
    4322:	402c      	ands	r4, r5
    4324:	e732      	b.n	418c <__aeabi_dsub+0x10c>
    4326:	003d      	movs	r5, r7
    4328:	3828      	subs	r0, #40	; 0x28
    432a:	4085      	lsls	r5, r0
    432c:	2700      	movs	r7, #0
    432e:	e717      	b.n	4160 <__aeabi_dsub+0xe0>
    4330:	0038      	movs	r0, r7
    4332:	f000 fb31 	bl	4998 <__clzsi2>
    4336:	3020      	adds	r0, #32
    4338:	e706      	b.n	4148 <__aeabi_dsub+0xc8>
    433a:	430a      	orrs	r2, r1
    433c:	0017      	movs	r7, r2
    433e:	2100      	movs	r1, #0
    4340:	1e7a      	subs	r2, r7, #1
    4342:	4197      	sbcs	r7, r2
    4344:	e6ee      	b.n	4124 <__aeabi_dsub+0xa4>
    4346:	2b00      	cmp	r3, #0
    4348:	d000      	beq.n	434c <__aeabi_dsub+0x2cc>
    434a:	e0e5      	b.n	4518 <__aeabi_dsub+0x498>
    434c:	1c73      	adds	r3, r6, #1
    434e:	469c      	mov	ip, r3
    4350:	055b      	lsls	r3, r3, #21
    4352:	0d5b      	lsrs	r3, r3, #21
    4354:	2b01      	cmp	r3, #1
    4356:	dc00      	bgt.n	435a <__aeabi_dsub+0x2da>
    4358:	e09f      	b.n	449a <__aeabi_dsub+0x41a>
    435a:	4b1a      	ldr	r3, [pc, #104]	; (43c4 <__aeabi_dsub+0x344>)
    435c:	459c      	cmp	ip, r3
    435e:	d100      	bne.n	4362 <__aeabi_dsub+0x2e2>
    4360:	e0c5      	b.n	44ee <__aeabi_dsub+0x46e>
    4362:	4452      	add	r2, sl
    4364:	4552      	cmp	r2, sl
    4366:	4180      	sbcs	r0, r0
    4368:	1864      	adds	r4, r4, r1
    436a:	4240      	negs	r0, r0
    436c:	1824      	adds	r4, r4, r0
    436e:	07e7      	lsls	r7, r4, #31
    4370:	0852      	lsrs	r2, r2, #1
    4372:	4317      	orrs	r7, r2
    4374:	0864      	lsrs	r4, r4, #1
    4376:	4666      	mov	r6, ip
    4378:	e708      	b.n	418c <__aeabi_dsub+0x10c>
    437a:	4812      	ldr	r0, [pc, #72]	; (43c4 <__aeabi_dsub+0x344>)
    437c:	4285      	cmp	r5, r0
    437e:	d100      	bne.n	4382 <__aeabi_dsub+0x302>
    4380:	e085      	b.n	448e <__aeabi_dsub+0x40e>
    4382:	001d      	movs	r5, r3
    4384:	e6bc      	b.n	4100 <__aeabi_dsub+0x80>
    4386:	0029      	movs	r1, r5
    4388:	3e1f      	subs	r6, #31
    438a:	40f1      	lsrs	r1, r6
    438c:	2b20      	cmp	r3, #32
    438e:	d100      	bne.n	4392 <__aeabi_dsub+0x312>
    4390:	e07f      	b.n	4492 <__aeabi_dsub+0x412>
    4392:	2240      	movs	r2, #64	; 0x40
    4394:	1ad3      	subs	r3, r2, r3
    4396:	409d      	lsls	r5, r3
    4398:	432f      	orrs	r7, r5
    439a:	1e7d      	subs	r5, r7, #1
    439c:	41af      	sbcs	r7, r5
    439e:	2400      	movs	r4, #0
    43a0:	430f      	orrs	r7, r1
    43a2:	2600      	movs	r6, #0
    43a4:	e78e      	b.n	42c4 <__aeabi_dsub+0x244>
    43a6:	002b      	movs	r3, r5
    43a8:	000f      	movs	r7, r1
    43aa:	3b20      	subs	r3, #32
    43ac:	40df      	lsrs	r7, r3
    43ae:	2d20      	cmp	r5, #32
    43b0:	d071      	beq.n	4496 <__aeabi_dsub+0x416>
    43b2:	2340      	movs	r3, #64	; 0x40
    43b4:	1b5d      	subs	r5, r3, r5
    43b6:	40a9      	lsls	r1, r5
    43b8:	430a      	orrs	r2, r1
    43ba:	1e51      	subs	r1, r2, #1
    43bc:	418a      	sbcs	r2, r1
    43be:	2100      	movs	r1, #0
    43c0:	4317      	orrs	r7, r2
    43c2:	e6af      	b.n	4124 <__aeabi_dsub+0xa4>
    43c4:	000007ff 	.word	0x000007ff
    43c8:	ff7fffff 	.word	0xff7fffff
    43cc:	800fffff 	.word	0x800fffff
    43d0:	2e00      	cmp	r6, #0
    43d2:	d03e      	beq.n	4452 <__aeabi_dsub+0x3d2>
    43d4:	4eb3      	ldr	r6, [pc, #716]	; (46a4 <__aeabi_dsub+0x624>)
    43d6:	45b4      	cmp	ip, r6
    43d8:	d045      	beq.n	4466 <__aeabi_dsub+0x3e6>
    43da:	2680      	movs	r6, #128	; 0x80
    43dc:	0436      	lsls	r6, r6, #16
    43de:	426d      	negs	r5, r5
    43e0:	4334      	orrs	r4, r6
    43e2:	2d38      	cmp	r5, #56	; 0x38
    43e4:	dd00      	ble.n	43e8 <__aeabi_dsub+0x368>
    43e6:	e0a8      	b.n	453a <__aeabi_dsub+0x4ba>
    43e8:	2d1f      	cmp	r5, #31
    43ea:	dd00      	ble.n	43ee <__aeabi_dsub+0x36e>
    43ec:	e11f      	b.n	462e <__aeabi_dsub+0x5ae>
    43ee:	2620      	movs	r6, #32
    43f0:	0027      	movs	r7, r4
    43f2:	4650      	mov	r0, sl
    43f4:	1b76      	subs	r6, r6, r5
    43f6:	40b7      	lsls	r7, r6
    43f8:	40e8      	lsrs	r0, r5
    43fa:	4307      	orrs	r7, r0
    43fc:	4650      	mov	r0, sl
    43fe:	40b0      	lsls	r0, r6
    4400:	1e46      	subs	r6, r0, #1
    4402:	41b0      	sbcs	r0, r6
    4404:	40ec      	lsrs	r4, r5
    4406:	4338      	orrs	r0, r7
    4408:	1a17      	subs	r7, r2, r0
    440a:	42ba      	cmp	r2, r7
    440c:	4192      	sbcs	r2, r2
    440e:	1b0c      	subs	r4, r1, r4
    4410:	4252      	negs	r2, r2
    4412:	1aa4      	subs	r4, r4, r2
    4414:	4666      	mov	r6, ip
    4416:	4698      	mov	r8, r3
    4418:	e68b      	b.n	4132 <__aeabi_dsub+0xb2>
    441a:	4664      	mov	r4, ip
    441c:	4667      	mov	r7, ip
    441e:	432c      	orrs	r4, r5
    4420:	d000      	beq.n	4424 <__aeabi_dsub+0x3a4>
    4422:	e68b      	b.n	413c <__aeabi_dsub+0xbc>
    4424:	2500      	movs	r5, #0
    4426:	2600      	movs	r6, #0
    4428:	2700      	movs	r7, #0
    442a:	e6ea      	b.n	4202 <__aeabi_dsub+0x182>
    442c:	001e      	movs	r6, r3
    442e:	e6ad      	b.n	418c <__aeabi_dsub+0x10c>
    4430:	2b1f      	cmp	r3, #31
    4432:	dc60      	bgt.n	44f6 <__aeabi_dsub+0x476>
    4434:	2720      	movs	r7, #32
    4436:	1af8      	subs	r0, r7, r3
    4438:	000f      	movs	r7, r1
    443a:	4684      	mov	ip, r0
    443c:	4087      	lsls	r7, r0
    443e:	0010      	movs	r0, r2
    4440:	40d8      	lsrs	r0, r3
    4442:	4307      	orrs	r7, r0
    4444:	4660      	mov	r0, ip
    4446:	4082      	lsls	r2, r0
    4448:	1e50      	subs	r0, r2, #1
    444a:	4182      	sbcs	r2, r0
    444c:	40d9      	lsrs	r1, r3
    444e:	4317      	orrs	r7, r2
    4450:	e6f5      	b.n	423e <__aeabi_dsub+0x1be>
    4452:	0026      	movs	r6, r4
    4454:	4650      	mov	r0, sl
    4456:	4306      	orrs	r6, r0
    4458:	d005      	beq.n	4466 <__aeabi_dsub+0x3e6>
    445a:	43ed      	mvns	r5, r5
    445c:	2d00      	cmp	r5, #0
    445e:	d0d3      	beq.n	4408 <__aeabi_dsub+0x388>
    4460:	4e90      	ldr	r6, [pc, #576]	; (46a4 <__aeabi_dsub+0x624>)
    4462:	45b4      	cmp	ip, r6
    4464:	d1bd      	bne.n	43e2 <__aeabi_dsub+0x362>
    4466:	000c      	movs	r4, r1
    4468:	0017      	movs	r7, r2
    446a:	4666      	mov	r6, ip
    446c:	4698      	mov	r8, r3
    446e:	e68d      	b.n	418c <__aeabi_dsub+0x10c>
    4470:	488c      	ldr	r0, [pc, #560]	; (46a4 <__aeabi_dsub+0x624>)
    4472:	4283      	cmp	r3, r0
    4474:	d00b      	beq.n	448e <__aeabi_dsub+0x40e>
    4476:	4663      	mov	r3, ip
    4478:	e6d9      	b.n	422e <__aeabi_dsub+0x1ae>
    447a:	2d00      	cmp	r5, #0
    447c:	d000      	beq.n	4480 <__aeabi_dsub+0x400>
    447e:	e096      	b.n	45ae <__aeabi_dsub+0x52e>
    4480:	0008      	movs	r0, r1
    4482:	4310      	orrs	r0, r2
    4484:	d100      	bne.n	4488 <__aeabi_dsub+0x408>
    4486:	e0e2      	b.n	464e <__aeabi_dsub+0x5ce>
    4488:	000c      	movs	r4, r1
    448a:	0017      	movs	r7, r2
    448c:	4698      	mov	r8, r3
    448e:	4e85      	ldr	r6, [pc, #532]	; (46a4 <__aeabi_dsub+0x624>)
    4490:	e67c      	b.n	418c <__aeabi_dsub+0x10c>
    4492:	2500      	movs	r5, #0
    4494:	e780      	b.n	4398 <__aeabi_dsub+0x318>
    4496:	2100      	movs	r1, #0
    4498:	e78e      	b.n	43b8 <__aeabi_dsub+0x338>
    449a:	0023      	movs	r3, r4
    449c:	4650      	mov	r0, sl
    449e:	4303      	orrs	r3, r0
    44a0:	2e00      	cmp	r6, #0
    44a2:	d000      	beq.n	44a6 <__aeabi_dsub+0x426>
    44a4:	e0a8      	b.n	45f8 <__aeabi_dsub+0x578>
    44a6:	2b00      	cmp	r3, #0
    44a8:	d100      	bne.n	44ac <__aeabi_dsub+0x42c>
    44aa:	e0de      	b.n	466a <__aeabi_dsub+0x5ea>
    44ac:	000b      	movs	r3, r1
    44ae:	4313      	orrs	r3, r2
    44b0:	d100      	bne.n	44b4 <__aeabi_dsub+0x434>
    44b2:	e66b      	b.n	418c <__aeabi_dsub+0x10c>
    44b4:	4452      	add	r2, sl
    44b6:	4552      	cmp	r2, sl
    44b8:	4180      	sbcs	r0, r0
    44ba:	1864      	adds	r4, r4, r1
    44bc:	4240      	negs	r0, r0
    44be:	1824      	adds	r4, r4, r0
    44c0:	0017      	movs	r7, r2
    44c2:	0223      	lsls	r3, r4, #8
    44c4:	d400      	bmi.n	44c8 <__aeabi_dsub+0x448>
    44c6:	e6fd      	b.n	42c4 <__aeabi_dsub+0x244>
    44c8:	4b77      	ldr	r3, [pc, #476]	; (46a8 <__aeabi_dsub+0x628>)
    44ca:	4666      	mov	r6, ip
    44cc:	401c      	ands	r4, r3
    44ce:	e65d      	b.n	418c <__aeabi_dsub+0x10c>
    44d0:	0025      	movs	r5, r4
    44d2:	4650      	mov	r0, sl
    44d4:	4305      	orrs	r5, r0
    44d6:	2e00      	cmp	r6, #0
    44d8:	d1cf      	bne.n	447a <__aeabi_dsub+0x3fa>
    44da:	2d00      	cmp	r5, #0
    44dc:	d14f      	bne.n	457e <__aeabi_dsub+0x4fe>
    44de:	000c      	movs	r4, r1
    44e0:	4314      	orrs	r4, r2
    44e2:	d100      	bne.n	44e6 <__aeabi_dsub+0x466>
    44e4:	e0a0      	b.n	4628 <__aeabi_dsub+0x5a8>
    44e6:	000c      	movs	r4, r1
    44e8:	0017      	movs	r7, r2
    44ea:	4698      	mov	r8, r3
    44ec:	e64e      	b.n	418c <__aeabi_dsub+0x10c>
    44ee:	4666      	mov	r6, ip
    44f0:	2400      	movs	r4, #0
    44f2:	2700      	movs	r7, #0
    44f4:	e685      	b.n	4202 <__aeabi_dsub+0x182>
    44f6:	001f      	movs	r7, r3
    44f8:	0008      	movs	r0, r1
    44fa:	3f20      	subs	r7, #32
    44fc:	40f8      	lsrs	r0, r7
    44fe:	0007      	movs	r7, r0
    4500:	2b20      	cmp	r3, #32
    4502:	d100      	bne.n	4506 <__aeabi_dsub+0x486>
    4504:	e08e      	b.n	4624 <__aeabi_dsub+0x5a4>
    4506:	2040      	movs	r0, #64	; 0x40
    4508:	1ac3      	subs	r3, r0, r3
    450a:	4099      	lsls	r1, r3
    450c:	430a      	orrs	r2, r1
    450e:	1e51      	subs	r1, r2, #1
    4510:	418a      	sbcs	r2, r1
    4512:	2100      	movs	r1, #0
    4514:	4317      	orrs	r7, r2
    4516:	e692      	b.n	423e <__aeabi_dsub+0x1be>
    4518:	2e00      	cmp	r6, #0
    451a:	d114      	bne.n	4546 <__aeabi_dsub+0x4c6>
    451c:	0026      	movs	r6, r4
    451e:	4650      	mov	r0, sl
    4520:	4306      	orrs	r6, r0
    4522:	d062      	beq.n	45ea <__aeabi_dsub+0x56a>
    4524:	43db      	mvns	r3, r3
    4526:	2b00      	cmp	r3, #0
    4528:	d15c      	bne.n	45e4 <__aeabi_dsub+0x564>
    452a:	1887      	adds	r7, r0, r2
    452c:	4297      	cmp	r7, r2
    452e:	4192      	sbcs	r2, r2
    4530:	1864      	adds	r4, r4, r1
    4532:	4252      	negs	r2, r2
    4534:	18a4      	adds	r4, r4, r2
    4536:	4666      	mov	r6, ip
    4538:	e687      	b.n	424a <__aeabi_dsub+0x1ca>
    453a:	4650      	mov	r0, sl
    453c:	4320      	orrs	r0, r4
    453e:	1e44      	subs	r4, r0, #1
    4540:	41a0      	sbcs	r0, r4
    4542:	2400      	movs	r4, #0
    4544:	e760      	b.n	4408 <__aeabi_dsub+0x388>
    4546:	4e57      	ldr	r6, [pc, #348]	; (46a4 <__aeabi_dsub+0x624>)
    4548:	45b4      	cmp	ip, r6
    454a:	d04e      	beq.n	45ea <__aeabi_dsub+0x56a>
    454c:	2680      	movs	r6, #128	; 0x80
    454e:	0436      	lsls	r6, r6, #16
    4550:	425b      	negs	r3, r3
    4552:	4334      	orrs	r4, r6
    4554:	2b38      	cmp	r3, #56	; 0x38
    4556:	dd00      	ble.n	455a <__aeabi_dsub+0x4da>
    4558:	e07f      	b.n	465a <__aeabi_dsub+0x5da>
    455a:	2b1f      	cmp	r3, #31
    455c:	dd00      	ble.n	4560 <__aeabi_dsub+0x4e0>
    455e:	e08b      	b.n	4678 <__aeabi_dsub+0x5f8>
    4560:	2620      	movs	r6, #32
    4562:	0027      	movs	r7, r4
    4564:	4650      	mov	r0, sl
    4566:	1af6      	subs	r6, r6, r3
    4568:	40b7      	lsls	r7, r6
    456a:	40d8      	lsrs	r0, r3
    456c:	4307      	orrs	r7, r0
    456e:	4650      	mov	r0, sl
    4570:	40b0      	lsls	r0, r6
    4572:	1e46      	subs	r6, r0, #1
    4574:	41b0      	sbcs	r0, r6
    4576:	4307      	orrs	r7, r0
    4578:	40dc      	lsrs	r4, r3
    457a:	18bf      	adds	r7, r7, r2
    457c:	e7d6      	b.n	452c <__aeabi_dsub+0x4ac>
    457e:	000d      	movs	r5, r1
    4580:	4315      	orrs	r5, r2
    4582:	d100      	bne.n	4586 <__aeabi_dsub+0x506>
    4584:	e602      	b.n	418c <__aeabi_dsub+0x10c>
    4586:	4650      	mov	r0, sl
    4588:	1a80      	subs	r0, r0, r2
    458a:	4582      	cmp	sl, r0
    458c:	41bf      	sbcs	r7, r7
    458e:	1a65      	subs	r5, r4, r1
    4590:	427f      	negs	r7, r7
    4592:	1bed      	subs	r5, r5, r7
    4594:	4684      	mov	ip, r0
    4596:	0228      	lsls	r0, r5, #8
    4598:	d400      	bmi.n	459c <__aeabi_dsub+0x51c>
    459a:	e68d      	b.n	42b8 <__aeabi_dsub+0x238>
    459c:	4650      	mov	r0, sl
    459e:	1a17      	subs	r7, r2, r0
    45a0:	42ba      	cmp	r2, r7
    45a2:	4192      	sbcs	r2, r2
    45a4:	1b0c      	subs	r4, r1, r4
    45a6:	4252      	negs	r2, r2
    45a8:	1aa4      	subs	r4, r4, r2
    45aa:	4698      	mov	r8, r3
    45ac:	e5ee      	b.n	418c <__aeabi_dsub+0x10c>
    45ae:	000d      	movs	r5, r1
    45b0:	4315      	orrs	r5, r2
    45b2:	d100      	bne.n	45b6 <__aeabi_dsub+0x536>
    45b4:	e76b      	b.n	448e <__aeabi_dsub+0x40e>
    45b6:	4650      	mov	r0, sl
    45b8:	0767      	lsls	r7, r4, #29
    45ba:	08c0      	lsrs	r0, r0, #3
    45bc:	4307      	orrs	r7, r0
    45be:	2080      	movs	r0, #128	; 0x80
    45c0:	08e4      	lsrs	r4, r4, #3
    45c2:	0300      	lsls	r0, r0, #12
    45c4:	4204      	tst	r4, r0
    45c6:	d007      	beq.n	45d8 <__aeabi_dsub+0x558>
    45c8:	08cd      	lsrs	r5, r1, #3
    45ca:	4205      	tst	r5, r0
    45cc:	d104      	bne.n	45d8 <__aeabi_dsub+0x558>
    45ce:	002c      	movs	r4, r5
    45d0:	4698      	mov	r8, r3
    45d2:	08d7      	lsrs	r7, r2, #3
    45d4:	0749      	lsls	r1, r1, #29
    45d6:	430f      	orrs	r7, r1
    45d8:	0f7b      	lsrs	r3, r7, #29
    45da:	00e4      	lsls	r4, r4, #3
    45dc:	431c      	orrs	r4, r3
    45de:	00ff      	lsls	r7, r7, #3
    45e0:	4e30      	ldr	r6, [pc, #192]	; (46a4 <__aeabi_dsub+0x624>)
    45e2:	e5d3      	b.n	418c <__aeabi_dsub+0x10c>
    45e4:	4e2f      	ldr	r6, [pc, #188]	; (46a4 <__aeabi_dsub+0x624>)
    45e6:	45b4      	cmp	ip, r6
    45e8:	d1b4      	bne.n	4554 <__aeabi_dsub+0x4d4>
    45ea:	000c      	movs	r4, r1
    45ec:	0017      	movs	r7, r2
    45ee:	4666      	mov	r6, ip
    45f0:	e5cc      	b.n	418c <__aeabi_dsub+0x10c>
    45f2:	2700      	movs	r7, #0
    45f4:	2400      	movs	r4, #0
    45f6:	e5e8      	b.n	41ca <__aeabi_dsub+0x14a>
    45f8:	2b00      	cmp	r3, #0
    45fa:	d039      	beq.n	4670 <__aeabi_dsub+0x5f0>
    45fc:	000b      	movs	r3, r1
    45fe:	4313      	orrs	r3, r2
    4600:	d100      	bne.n	4604 <__aeabi_dsub+0x584>
    4602:	e744      	b.n	448e <__aeabi_dsub+0x40e>
    4604:	08c0      	lsrs	r0, r0, #3
    4606:	0767      	lsls	r7, r4, #29
    4608:	4307      	orrs	r7, r0
    460a:	2080      	movs	r0, #128	; 0x80
    460c:	08e4      	lsrs	r4, r4, #3
    460e:	0300      	lsls	r0, r0, #12
    4610:	4204      	tst	r4, r0
    4612:	d0e1      	beq.n	45d8 <__aeabi_dsub+0x558>
    4614:	08cb      	lsrs	r3, r1, #3
    4616:	4203      	tst	r3, r0
    4618:	d1de      	bne.n	45d8 <__aeabi_dsub+0x558>
    461a:	08d7      	lsrs	r7, r2, #3
    461c:	0749      	lsls	r1, r1, #29
    461e:	430f      	orrs	r7, r1
    4620:	001c      	movs	r4, r3
    4622:	e7d9      	b.n	45d8 <__aeabi_dsub+0x558>
    4624:	2100      	movs	r1, #0
    4626:	e771      	b.n	450c <__aeabi_dsub+0x48c>
    4628:	2500      	movs	r5, #0
    462a:	2700      	movs	r7, #0
    462c:	e5e9      	b.n	4202 <__aeabi_dsub+0x182>
    462e:	002e      	movs	r6, r5
    4630:	0027      	movs	r7, r4
    4632:	3e20      	subs	r6, #32
    4634:	40f7      	lsrs	r7, r6
    4636:	2d20      	cmp	r5, #32
    4638:	d02f      	beq.n	469a <__aeabi_dsub+0x61a>
    463a:	2640      	movs	r6, #64	; 0x40
    463c:	1b75      	subs	r5, r6, r5
    463e:	40ac      	lsls	r4, r5
    4640:	4650      	mov	r0, sl
    4642:	4320      	orrs	r0, r4
    4644:	1e44      	subs	r4, r0, #1
    4646:	41a0      	sbcs	r0, r4
    4648:	2400      	movs	r4, #0
    464a:	4338      	orrs	r0, r7
    464c:	e6dc      	b.n	4408 <__aeabi_dsub+0x388>
    464e:	2480      	movs	r4, #128	; 0x80
    4650:	2500      	movs	r5, #0
    4652:	0324      	lsls	r4, r4, #12
    4654:	4e13      	ldr	r6, [pc, #76]	; (46a4 <__aeabi_dsub+0x624>)
    4656:	2700      	movs	r7, #0
    4658:	e5d3      	b.n	4202 <__aeabi_dsub+0x182>
    465a:	4650      	mov	r0, sl
    465c:	4320      	orrs	r0, r4
    465e:	0007      	movs	r7, r0
    4660:	1e78      	subs	r0, r7, #1
    4662:	4187      	sbcs	r7, r0
    4664:	2400      	movs	r4, #0
    4666:	18bf      	adds	r7, r7, r2
    4668:	e760      	b.n	452c <__aeabi_dsub+0x4ac>
    466a:	000c      	movs	r4, r1
    466c:	0017      	movs	r7, r2
    466e:	e58d      	b.n	418c <__aeabi_dsub+0x10c>
    4670:	000c      	movs	r4, r1
    4672:	0017      	movs	r7, r2
    4674:	4e0b      	ldr	r6, [pc, #44]	; (46a4 <__aeabi_dsub+0x624>)
    4676:	e589      	b.n	418c <__aeabi_dsub+0x10c>
    4678:	001e      	movs	r6, r3
    467a:	0027      	movs	r7, r4
    467c:	3e20      	subs	r6, #32
    467e:	40f7      	lsrs	r7, r6
    4680:	2b20      	cmp	r3, #32
    4682:	d00c      	beq.n	469e <__aeabi_dsub+0x61e>
    4684:	2640      	movs	r6, #64	; 0x40
    4686:	1af3      	subs	r3, r6, r3
    4688:	409c      	lsls	r4, r3
    468a:	4650      	mov	r0, sl
    468c:	4320      	orrs	r0, r4
    468e:	1e44      	subs	r4, r0, #1
    4690:	41a0      	sbcs	r0, r4
    4692:	4307      	orrs	r7, r0
    4694:	2400      	movs	r4, #0
    4696:	18bf      	adds	r7, r7, r2
    4698:	e748      	b.n	452c <__aeabi_dsub+0x4ac>
    469a:	2400      	movs	r4, #0
    469c:	e7d0      	b.n	4640 <__aeabi_dsub+0x5c0>
    469e:	2400      	movs	r4, #0
    46a0:	e7f3      	b.n	468a <__aeabi_dsub+0x60a>
    46a2:	46c0      	nop			; (mov r8, r8)
    46a4:	000007ff 	.word	0x000007ff
    46a8:	ff7fffff 	.word	0xff7fffff

000046ac <__aeabi_dcmpun>:
    46ac:	b570      	push	{r4, r5, r6, lr}
    46ae:	4e0e      	ldr	r6, [pc, #56]	; (46e8 <__aeabi_dcmpun+0x3c>)
    46b0:	030d      	lsls	r5, r1, #12
    46b2:	031c      	lsls	r4, r3, #12
    46b4:	0049      	lsls	r1, r1, #1
    46b6:	005b      	lsls	r3, r3, #1
    46b8:	0b2d      	lsrs	r5, r5, #12
    46ba:	0d49      	lsrs	r1, r1, #21
    46bc:	0b24      	lsrs	r4, r4, #12
    46be:	0d5b      	lsrs	r3, r3, #21
    46c0:	42b1      	cmp	r1, r6
    46c2:	d004      	beq.n	46ce <__aeabi_dcmpun+0x22>
    46c4:	4908      	ldr	r1, [pc, #32]	; (46e8 <__aeabi_dcmpun+0x3c>)
    46c6:	2000      	movs	r0, #0
    46c8:	428b      	cmp	r3, r1
    46ca:	d008      	beq.n	46de <__aeabi_dcmpun+0x32>
    46cc:	bd70      	pop	{r4, r5, r6, pc}
    46ce:	4305      	orrs	r5, r0
    46d0:	2001      	movs	r0, #1
    46d2:	2d00      	cmp	r5, #0
    46d4:	d1fa      	bne.n	46cc <__aeabi_dcmpun+0x20>
    46d6:	4904      	ldr	r1, [pc, #16]	; (46e8 <__aeabi_dcmpun+0x3c>)
    46d8:	2000      	movs	r0, #0
    46da:	428b      	cmp	r3, r1
    46dc:	d1f6      	bne.n	46cc <__aeabi_dcmpun+0x20>
    46de:	4314      	orrs	r4, r2
    46e0:	0020      	movs	r0, r4
    46e2:	1e44      	subs	r4, r0, #1
    46e4:	41a0      	sbcs	r0, r4
    46e6:	e7f1      	b.n	46cc <__aeabi_dcmpun+0x20>
    46e8:	000007ff 	.word	0x000007ff

000046ec <__aeabi_i2d>:
    46ec:	b570      	push	{r4, r5, r6, lr}
    46ee:	2800      	cmp	r0, #0
    46f0:	d030      	beq.n	4754 <__aeabi_i2d+0x68>
    46f2:	17c3      	asrs	r3, r0, #31
    46f4:	18c4      	adds	r4, r0, r3
    46f6:	405c      	eors	r4, r3
    46f8:	0fc5      	lsrs	r5, r0, #31
    46fa:	0020      	movs	r0, r4
    46fc:	f000 f94c 	bl	4998 <__clzsi2>
    4700:	4b17      	ldr	r3, [pc, #92]	; (4760 <__aeabi_i2d+0x74>)
    4702:	4a18      	ldr	r2, [pc, #96]	; (4764 <__aeabi_i2d+0x78>)
    4704:	1a1b      	subs	r3, r3, r0
    4706:	1ad2      	subs	r2, r2, r3
    4708:	2a1f      	cmp	r2, #31
    470a:	dd18      	ble.n	473e <__aeabi_i2d+0x52>
    470c:	4a16      	ldr	r2, [pc, #88]	; (4768 <__aeabi_i2d+0x7c>)
    470e:	1ad2      	subs	r2, r2, r3
    4710:	4094      	lsls	r4, r2
    4712:	2200      	movs	r2, #0
    4714:	0324      	lsls	r4, r4, #12
    4716:	055b      	lsls	r3, r3, #21
    4718:	0b24      	lsrs	r4, r4, #12
    471a:	0d5b      	lsrs	r3, r3, #21
    471c:	2100      	movs	r1, #0
    471e:	0010      	movs	r0, r2
    4720:	0324      	lsls	r4, r4, #12
    4722:	0d0a      	lsrs	r2, r1, #20
    4724:	0b24      	lsrs	r4, r4, #12
    4726:	0512      	lsls	r2, r2, #20
    4728:	4322      	orrs	r2, r4
    472a:	4c10      	ldr	r4, [pc, #64]	; (476c <__aeabi_i2d+0x80>)
    472c:	051b      	lsls	r3, r3, #20
    472e:	4022      	ands	r2, r4
    4730:	4313      	orrs	r3, r2
    4732:	005b      	lsls	r3, r3, #1
    4734:	07ed      	lsls	r5, r5, #31
    4736:	085b      	lsrs	r3, r3, #1
    4738:	432b      	orrs	r3, r5
    473a:	0019      	movs	r1, r3
    473c:	bd70      	pop	{r4, r5, r6, pc}
    473e:	0021      	movs	r1, r4
    4740:	4091      	lsls	r1, r2
    4742:	000a      	movs	r2, r1
    4744:	210b      	movs	r1, #11
    4746:	1a08      	subs	r0, r1, r0
    4748:	40c4      	lsrs	r4, r0
    474a:	055b      	lsls	r3, r3, #21
    474c:	0324      	lsls	r4, r4, #12
    474e:	0b24      	lsrs	r4, r4, #12
    4750:	0d5b      	lsrs	r3, r3, #21
    4752:	e7e3      	b.n	471c <__aeabi_i2d+0x30>
    4754:	2500      	movs	r5, #0
    4756:	2300      	movs	r3, #0
    4758:	2400      	movs	r4, #0
    475a:	2200      	movs	r2, #0
    475c:	e7de      	b.n	471c <__aeabi_i2d+0x30>
    475e:	46c0      	nop			; (mov r8, r8)
    4760:	0000041e 	.word	0x0000041e
    4764:	00000433 	.word	0x00000433
    4768:	00000413 	.word	0x00000413
    476c:	800fffff 	.word	0x800fffff

00004770 <__aeabi_ui2d>:
    4770:	b510      	push	{r4, lr}
    4772:	1e04      	subs	r4, r0, #0
    4774:	d028      	beq.n	47c8 <__aeabi_ui2d+0x58>
    4776:	f000 f90f 	bl	4998 <__clzsi2>
    477a:	4b15      	ldr	r3, [pc, #84]	; (47d0 <__aeabi_ui2d+0x60>)
    477c:	4a15      	ldr	r2, [pc, #84]	; (47d4 <__aeabi_ui2d+0x64>)
    477e:	1a1b      	subs	r3, r3, r0
    4780:	1ad2      	subs	r2, r2, r3
    4782:	2a1f      	cmp	r2, #31
    4784:	dd15      	ble.n	47b2 <__aeabi_ui2d+0x42>
    4786:	4a14      	ldr	r2, [pc, #80]	; (47d8 <__aeabi_ui2d+0x68>)
    4788:	1ad2      	subs	r2, r2, r3
    478a:	4094      	lsls	r4, r2
    478c:	2200      	movs	r2, #0
    478e:	0324      	lsls	r4, r4, #12
    4790:	055b      	lsls	r3, r3, #21
    4792:	0b24      	lsrs	r4, r4, #12
    4794:	0d5b      	lsrs	r3, r3, #21
    4796:	2100      	movs	r1, #0
    4798:	0010      	movs	r0, r2
    479a:	0324      	lsls	r4, r4, #12
    479c:	0d0a      	lsrs	r2, r1, #20
    479e:	0b24      	lsrs	r4, r4, #12
    47a0:	0512      	lsls	r2, r2, #20
    47a2:	4322      	orrs	r2, r4
    47a4:	4c0d      	ldr	r4, [pc, #52]	; (47dc <__aeabi_ui2d+0x6c>)
    47a6:	051b      	lsls	r3, r3, #20
    47a8:	4022      	ands	r2, r4
    47aa:	4313      	orrs	r3, r2
    47ac:	005b      	lsls	r3, r3, #1
    47ae:	0859      	lsrs	r1, r3, #1
    47b0:	bd10      	pop	{r4, pc}
    47b2:	0021      	movs	r1, r4
    47b4:	4091      	lsls	r1, r2
    47b6:	000a      	movs	r2, r1
    47b8:	210b      	movs	r1, #11
    47ba:	1a08      	subs	r0, r1, r0
    47bc:	40c4      	lsrs	r4, r0
    47be:	055b      	lsls	r3, r3, #21
    47c0:	0324      	lsls	r4, r4, #12
    47c2:	0b24      	lsrs	r4, r4, #12
    47c4:	0d5b      	lsrs	r3, r3, #21
    47c6:	e7e6      	b.n	4796 <__aeabi_ui2d+0x26>
    47c8:	2300      	movs	r3, #0
    47ca:	2400      	movs	r4, #0
    47cc:	2200      	movs	r2, #0
    47ce:	e7e2      	b.n	4796 <__aeabi_ui2d+0x26>
    47d0:	0000041e 	.word	0x0000041e
    47d4:	00000433 	.word	0x00000433
    47d8:	00000413 	.word	0x00000413
    47dc:	800fffff 	.word	0x800fffff

000047e0 <__aeabi_f2d>:
    47e0:	0041      	lsls	r1, r0, #1
    47e2:	0e09      	lsrs	r1, r1, #24
    47e4:	1c4b      	adds	r3, r1, #1
    47e6:	b570      	push	{r4, r5, r6, lr}
    47e8:	b2db      	uxtb	r3, r3
    47ea:	0246      	lsls	r6, r0, #9
    47ec:	0a75      	lsrs	r5, r6, #9
    47ee:	0fc4      	lsrs	r4, r0, #31
    47f0:	2b01      	cmp	r3, #1
    47f2:	dd14      	ble.n	481e <__aeabi_f2d+0x3e>
    47f4:	23e0      	movs	r3, #224	; 0xe0
    47f6:	009b      	lsls	r3, r3, #2
    47f8:	076d      	lsls	r5, r5, #29
    47fa:	0b36      	lsrs	r6, r6, #12
    47fc:	18cb      	adds	r3, r1, r3
    47fe:	2100      	movs	r1, #0
    4800:	0d0a      	lsrs	r2, r1, #20
    4802:	0028      	movs	r0, r5
    4804:	0512      	lsls	r2, r2, #20
    4806:	4d1c      	ldr	r5, [pc, #112]	; (4878 <__aeabi_f2d+0x98>)
    4808:	4332      	orrs	r2, r6
    480a:	055b      	lsls	r3, r3, #21
    480c:	402a      	ands	r2, r5
    480e:	085b      	lsrs	r3, r3, #1
    4810:	4313      	orrs	r3, r2
    4812:	005b      	lsls	r3, r3, #1
    4814:	07e4      	lsls	r4, r4, #31
    4816:	085b      	lsrs	r3, r3, #1
    4818:	4323      	orrs	r3, r4
    481a:	0019      	movs	r1, r3
    481c:	bd70      	pop	{r4, r5, r6, pc}
    481e:	2900      	cmp	r1, #0
    4820:	d114      	bne.n	484c <__aeabi_f2d+0x6c>
    4822:	2d00      	cmp	r5, #0
    4824:	d01e      	beq.n	4864 <__aeabi_f2d+0x84>
    4826:	0028      	movs	r0, r5
    4828:	f000 f8b6 	bl	4998 <__clzsi2>
    482c:	280a      	cmp	r0, #10
    482e:	dc1c      	bgt.n	486a <__aeabi_f2d+0x8a>
    4830:	230b      	movs	r3, #11
    4832:	002a      	movs	r2, r5
    4834:	1a1b      	subs	r3, r3, r0
    4836:	40da      	lsrs	r2, r3
    4838:	0003      	movs	r3, r0
    483a:	3315      	adds	r3, #21
    483c:	409d      	lsls	r5, r3
    483e:	4b0f      	ldr	r3, [pc, #60]	; (487c <__aeabi_f2d+0x9c>)
    4840:	0312      	lsls	r2, r2, #12
    4842:	1a1b      	subs	r3, r3, r0
    4844:	055b      	lsls	r3, r3, #21
    4846:	0b16      	lsrs	r6, r2, #12
    4848:	0d5b      	lsrs	r3, r3, #21
    484a:	e7d8      	b.n	47fe <__aeabi_f2d+0x1e>
    484c:	2d00      	cmp	r5, #0
    484e:	d006      	beq.n	485e <__aeabi_f2d+0x7e>
    4850:	0b32      	lsrs	r2, r6, #12
    4852:	2680      	movs	r6, #128	; 0x80
    4854:	0336      	lsls	r6, r6, #12
    4856:	076d      	lsls	r5, r5, #29
    4858:	4316      	orrs	r6, r2
    485a:	4b09      	ldr	r3, [pc, #36]	; (4880 <__aeabi_f2d+0xa0>)
    485c:	e7cf      	b.n	47fe <__aeabi_f2d+0x1e>
    485e:	4b08      	ldr	r3, [pc, #32]	; (4880 <__aeabi_f2d+0xa0>)
    4860:	2600      	movs	r6, #0
    4862:	e7cc      	b.n	47fe <__aeabi_f2d+0x1e>
    4864:	2300      	movs	r3, #0
    4866:	2600      	movs	r6, #0
    4868:	e7c9      	b.n	47fe <__aeabi_f2d+0x1e>
    486a:	0003      	movs	r3, r0
    486c:	002a      	movs	r2, r5
    486e:	3b0b      	subs	r3, #11
    4870:	409a      	lsls	r2, r3
    4872:	2500      	movs	r5, #0
    4874:	e7e3      	b.n	483e <__aeabi_f2d+0x5e>
    4876:	46c0      	nop			; (mov r8, r8)
    4878:	800fffff 	.word	0x800fffff
    487c:	00000389 	.word	0x00000389
    4880:	000007ff 	.word	0x000007ff

00004884 <__aeabi_d2f>:
    4884:	b5f0      	push	{r4, r5, r6, r7, lr}
    4886:	004c      	lsls	r4, r1, #1
    4888:	0d64      	lsrs	r4, r4, #21
    488a:	030b      	lsls	r3, r1, #12
    488c:	1c62      	adds	r2, r4, #1
    488e:	0f45      	lsrs	r5, r0, #29
    4890:	0a5b      	lsrs	r3, r3, #9
    4892:	0552      	lsls	r2, r2, #21
    4894:	432b      	orrs	r3, r5
    4896:	0fc9      	lsrs	r1, r1, #31
    4898:	00c5      	lsls	r5, r0, #3
    489a:	0d52      	lsrs	r2, r2, #21
    489c:	2a01      	cmp	r2, #1
    489e:	dd28      	ble.n	48f2 <__aeabi_d2f+0x6e>
    48a0:	4a3a      	ldr	r2, [pc, #232]	; (498c <__aeabi_d2f+0x108>)
    48a2:	18a6      	adds	r6, r4, r2
    48a4:	2efe      	cmp	r6, #254	; 0xfe
    48a6:	dc1b      	bgt.n	48e0 <__aeabi_d2f+0x5c>
    48a8:	2e00      	cmp	r6, #0
    48aa:	dd3e      	ble.n	492a <__aeabi_d2f+0xa6>
    48ac:	0180      	lsls	r0, r0, #6
    48ae:	0002      	movs	r2, r0
    48b0:	1e50      	subs	r0, r2, #1
    48b2:	4182      	sbcs	r2, r0
    48b4:	0f6d      	lsrs	r5, r5, #29
    48b6:	432a      	orrs	r2, r5
    48b8:	00db      	lsls	r3, r3, #3
    48ba:	4313      	orrs	r3, r2
    48bc:	075a      	lsls	r2, r3, #29
    48be:	d004      	beq.n	48ca <__aeabi_d2f+0x46>
    48c0:	220f      	movs	r2, #15
    48c2:	401a      	ands	r2, r3
    48c4:	2a04      	cmp	r2, #4
    48c6:	d000      	beq.n	48ca <__aeabi_d2f+0x46>
    48c8:	3304      	adds	r3, #4
    48ca:	2280      	movs	r2, #128	; 0x80
    48cc:	04d2      	lsls	r2, r2, #19
    48ce:	401a      	ands	r2, r3
    48d0:	d05a      	beq.n	4988 <__aeabi_d2f+0x104>
    48d2:	3601      	adds	r6, #1
    48d4:	2eff      	cmp	r6, #255	; 0xff
    48d6:	d003      	beq.n	48e0 <__aeabi_d2f+0x5c>
    48d8:	019b      	lsls	r3, r3, #6
    48da:	0a5b      	lsrs	r3, r3, #9
    48dc:	b2f4      	uxtb	r4, r6
    48de:	e001      	b.n	48e4 <__aeabi_d2f+0x60>
    48e0:	24ff      	movs	r4, #255	; 0xff
    48e2:	2300      	movs	r3, #0
    48e4:	0258      	lsls	r0, r3, #9
    48e6:	05e4      	lsls	r4, r4, #23
    48e8:	0a40      	lsrs	r0, r0, #9
    48ea:	07c9      	lsls	r1, r1, #31
    48ec:	4320      	orrs	r0, r4
    48ee:	4308      	orrs	r0, r1
    48f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48f2:	2c00      	cmp	r4, #0
    48f4:	d007      	beq.n	4906 <__aeabi_d2f+0x82>
    48f6:	431d      	orrs	r5, r3
    48f8:	d0f2      	beq.n	48e0 <__aeabi_d2f+0x5c>
    48fa:	2080      	movs	r0, #128	; 0x80
    48fc:	00db      	lsls	r3, r3, #3
    48fe:	0480      	lsls	r0, r0, #18
    4900:	4303      	orrs	r3, r0
    4902:	26ff      	movs	r6, #255	; 0xff
    4904:	e7da      	b.n	48bc <__aeabi_d2f+0x38>
    4906:	432b      	orrs	r3, r5
    4908:	d003      	beq.n	4912 <__aeabi_d2f+0x8e>
    490a:	2305      	movs	r3, #5
    490c:	08db      	lsrs	r3, r3, #3
    490e:	2cff      	cmp	r4, #255	; 0xff
    4910:	d003      	beq.n	491a <__aeabi_d2f+0x96>
    4912:	025b      	lsls	r3, r3, #9
    4914:	0a5b      	lsrs	r3, r3, #9
    4916:	b2e4      	uxtb	r4, r4
    4918:	e7e4      	b.n	48e4 <__aeabi_d2f+0x60>
    491a:	2b00      	cmp	r3, #0
    491c:	d032      	beq.n	4984 <__aeabi_d2f+0x100>
    491e:	2080      	movs	r0, #128	; 0x80
    4920:	03c0      	lsls	r0, r0, #15
    4922:	4303      	orrs	r3, r0
    4924:	025b      	lsls	r3, r3, #9
    4926:	0a5b      	lsrs	r3, r3, #9
    4928:	e7dc      	b.n	48e4 <__aeabi_d2f+0x60>
    492a:	0032      	movs	r2, r6
    492c:	3217      	adds	r2, #23
    492e:	db14      	blt.n	495a <__aeabi_d2f+0xd6>
    4930:	2280      	movs	r2, #128	; 0x80
    4932:	271e      	movs	r7, #30
    4934:	0412      	lsls	r2, r2, #16
    4936:	4313      	orrs	r3, r2
    4938:	1bbf      	subs	r7, r7, r6
    493a:	2f1f      	cmp	r7, #31
    493c:	dc0f      	bgt.n	495e <__aeabi_d2f+0xda>
    493e:	4a14      	ldr	r2, [pc, #80]	; (4990 <__aeabi_d2f+0x10c>)
    4940:	4694      	mov	ip, r2
    4942:	4464      	add	r4, ip
    4944:	002a      	movs	r2, r5
    4946:	40a5      	lsls	r5, r4
    4948:	002e      	movs	r6, r5
    494a:	40a3      	lsls	r3, r4
    494c:	1e75      	subs	r5, r6, #1
    494e:	41ae      	sbcs	r6, r5
    4950:	40fa      	lsrs	r2, r7
    4952:	4333      	orrs	r3, r6
    4954:	4313      	orrs	r3, r2
    4956:	2600      	movs	r6, #0
    4958:	e7b0      	b.n	48bc <__aeabi_d2f+0x38>
    495a:	2400      	movs	r4, #0
    495c:	e7d5      	b.n	490a <__aeabi_d2f+0x86>
    495e:	2202      	movs	r2, #2
    4960:	4252      	negs	r2, r2
    4962:	1b96      	subs	r6, r2, r6
    4964:	001a      	movs	r2, r3
    4966:	40f2      	lsrs	r2, r6
    4968:	2f20      	cmp	r7, #32
    496a:	d009      	beq.n	4980 <__aeabi_d2f+0xfc>
    496c:	4809      	ldr	r0, [pc, #36]	; (4994 <__aeabi_d2f+0x110>)
    496e:	4684      	mov	ip, r0
    4970:	4464      	add	r4, ip
    4972:	40a3      	lsls	r3, r4
    4974:	432b      	orrs	r3, r5
    4976:	1e5d      	subs	r5, r3, #1
    4978:	41ab      	sbcs	r3, r5
    497a:	2600      	movs	r6, #0
    497c:	4313      	orrs	r3, r2
    497e:	e79d      	b.n	48bc <__aeabi_d2f+0x38>
    4980:	2300      	movs	r3, #0
    4982:	e7f7      	b.n	4974 <__aeabi_d2f+0xf0>
    4984:	2300      	movs	r3, #0
    4986:	e7ad      	b.n	48e4 <__aeabi_d2f+0x60>
    4988:	0034      	movs	r4, r6
    498a:	e7bf      	b.n	490c <__aeabi_d2f+0x88>
    498c:	fffffc80 	.word	0xfffffc80
    4990:	fffffc82 	.word	0xfffffc82
    4994:	fffffca2 	.word	0xfffffca2

00004998 <__clzsi2>:
    4998:	211c      	movs	r1, #28
    499a:	2301      	movs	r3, #1
    499c:	041b      	lsls	r3, r3, #16
    499e:	4298      	cmp	r0, r3
    49a0:	d301      	bcc.n	49a6 <__clzsi2+0xe>
    49a2:	0c00      	lsrs	r0, r0, #16
    49a4:	3910      	subs	r1, #16
    49a6:	0a1b      	lsrs	r3, r3, #8
    49a8:	4298      	cmp	r0, r3
    49aa:	d301      	bcc.n	49b0 <__clzsi2+0x18>
    49ac:	0a00      	lsrs	r0, r0, #8
    49ae:	3908      	subs	r1, #8
    49b0:	091b      	lsrs	r3, r3, #4
    49b2:	4298      	cmp	r0, r3
    49b4:	d301      	bcc.n	49ba <__clzsi2+0x22>
    49b6:	0900      	lsrs	r0, r0, #4
    49b8:	3904      	subs	r1, #4
    49ba:	a202      	add	r2, pc, #8	; (adr r2, 49c4 <__clzsi2+0x2c>)
    49bc:	5c10      	ldrb	r0, [r2, r0]
    49be:	1840      	adds	r0, r0, r1
    49c0:	4770      	bx	lr
    49c2:	46c0      	nop			; (mov r8, r8)
    49c4:	02020304 	.word	0x02020304
    49c8:	01010101 	.word	0x01010101
	...

000049d4 <__errno>:
    49d4:	4b01      	ldr	r3, [pc, #4]	; (49dc <__errno+0x8>)
    49d6:	6818      	ldr	r0, [r3, #0]
    49d8:	4770      	bx	lr
    49da:	46c0      	nop			; (mov r8, r8)
    49dc:	2000000c 	.word	0x2000000c

000049e0 <__libc_init_array>:
    49e0:	b570      	push	{r4, r5, r6, lr}
    49e2:	2600      	movs	r6, #0
    49e4:	4d0c      	ldr	r5, [pc, #48]	; (4a18 <__libc_init_array+0x38>)
    49e6:	4c0d      	ldr	r4, [pc, #52]	; (4a1c <__libc_init_array+0x3c>)
    49e8:	1b64      	subs	r4, r4, r5
    49ea:	10a4      	asrs	r4, r4, #2
    49ec:	42a6      	cmp	r6, r4
    49ee:	d109      	bne.n	4a04 <__libc_init_array+0x24>
    49f0:	2600      	movs	r6, #0
    49f2:	f000 f8a9 	bl	4b48 <_init>
    49f6:	4d0a      	ldr	r5, [pc, #40]	; (4a20 <__libc_init_array+0x40>)
    49f8:	4c0a      	ldr	r4, [pc, #40]	; (4a24 <__libc_init_array+0x44>)
    49fa:	1b64      	subs	r4, r4, r5
    49fc:	10a4      	asrs	r4, r4, #2
    49fe:	42a6      	cmp	r6, r4
    4a00:	d105      	bne.n	4a0e <__libc_init_array+0x2e>
    4a02:	bd70      	pop	{r4, r5, r6, pc}
    4a04:	00b3      	lsls	r3, r6, #2
    4a06:	58eb      	ldr	r3, [r5, r3]
    4a08:	4798      	blx	r3
    4a0a:	3601      	adds	r6, #1
    4a0c:	e7ee      	b.n	49ec <__libc_init_array+0xc>
    4a0e:	00b3      	lsls	r3, r6, #2
    4a10:	58eb      	ldr	r3, [r5, r3]
    4a12:	4798      	blx	r3
    4a14:	3601      	adds	r6, #1
    4a16:	e7f2      	b.n	49fe <__libc_init_array+0x1e>
    4a18:	00004b54 	.word	0x00004b54
    4a1c:	00004b54 	.word	0x00004b54
    4a20:	00004b54 	.word	0x00004b54
    4a24:	00004b58 	.word	0x00004b58
    4a28:	00000f4a 	.word	0x00000f4a
    4a2c:	00000fc4 	.word	0x00000fc4
    4a30:	00000fc4 	.word	0x00000fc4
    4a34:	00000f68 	.word	0x00000f68
    4a38:	00000f62 	.word	0x00000f62
    4a3c:	00000f6e 	.word	0x00000f6e
    4a40:	00000f50 	.word	0x00000f50
    4a44:	00000f74 	.word	0x00000f74
    4a48:	00000faa 	.word	0x00000faa
    4a4c:	000010a0 	.word	0x000010a0
    4a50:	000010f0 	.word	0x000010f0
    4a54:	000010f0 	.word	0x000010f0
    4a58:	000010ec 	.word	0x000010ec
    4a5c:	00001092 	.word	0x00001092
    4a60:	000010b2 	.word	0x000010b2
    4a64:	00001082 	.word	0x00001082
    4a68:	000010c4 	.word	0x000010c4
    4a6c:	000010d6 	.word	0x000010d6

00004a70 <coil_pins>:
    4a70:	00000001 00000023 00000000 00000022     ....#......."...
    4a80:	736f6361 00000000 0000286c 000027bc     acos....l(...'..
    4a90:	000027bc 000027ba 0000285e 0000285e     .'...'..^(..^(..
    4aa0:	00002854 000027ba 0000285e 00002854     T(...'..^(..T(..
    4ab0:	0000285e 000027ba 00002864 00002864     ^(...'..d(..d(..
    4ac0:	00002864 000028f4 00003510 000034f2     d(...(...5...4..
    4ad0:	000034ac 000033ca 000034ac 000034e4     .4...3...4...4..
    4ae0:	000034ac 000033ca 000034f2 000034f2     .4...3...4...4..
    4af0:	000034e4 000033ca 000033c2 000033c2     .4...3...3...3..
    4b00:	000033c2 00003728 00003d70 00003c30     .3..(7..p=..0<..
    4b10:	00003c30 00003c2c 00003d48 00003d48     0<..,<..H=..H=..
    4b20:	00003d3a 00003c2c 00003d48 00003d3a     :=..,<..H=..:=..
    4b30:	00003d48 00003c2c 00003d50 00003d50     H=..,<..P=..P=..
    4b40:	00003d50 00003f54                       P=..T?..

00004b48 <_init>:
    4b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b4a:	46c0      	nop			; (mov r8, r8)
    4b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4b4e:	bc08      	pop	{r3}
    4b50:	469e      	mov	lr, r3
    4b52:	4770      	bx	lr

00004b54 <__init_array_start>:
    4b54:	000000dd 	.word	0x000000dd

00004b58 <_fini>:
    4b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b5a:	46c0      	nop			; (mov r8, r8)
    4b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4b5e:	bc08      	pop	{r3}
    4b60:	469e      	mov	lr, r3
    4b62:	4770      	bx	lr

00004b64 <__fini_array_start>:
    4b64:	000000b5 	.word	0x000000b5
